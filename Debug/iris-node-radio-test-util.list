
iris-node-radio-test-util.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a204  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800a2c8  0800a2c8  0001a2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a9a0  0800a9a0  0001a9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a9a8  0800a9a8  0001a9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a9ac  0800a9ac  0001a9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  20000000  0800a9b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000624  20000228  0800abd4  00020228  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000084c  0800abd4  0002084c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 10 .debug_info   000286a5  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005596  00000000  00000000  000488f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b3db  00000000  00000000  0004de87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001388  00000000  00000000  00059268  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001258  00000000  00000000  0005a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001e162  00000000  00000000  0005b848  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001a593  00000000  00000000  000799aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0009b11f  00000000  00000000  00093f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0012f05c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003b6c  00000000  00000000  0012f0d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000228 	.word	0x20000228
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a2ac 	.word	0x0800a2ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000022c 	.word	0x2000022c
 8000104:	0800a2ac 	.word	0x0800a2ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f813 	bl	8001454 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ff6d 	bl	8001318 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f805 	bl	8001454 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fffb 	bl	8001454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff8d 	bl	800138c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff83 	bl	800138c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	1c08      	adds	r0, r1, #0
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	; (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	ffffff5d 	.word	0xffffff5d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f824 	bl	8000510 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__aeabi_d2uiz>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2200      	movs	r2, #0
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <__aeabi_d2uiz+0x38>)
 80004da:	0004      	movs	r4, r0
 80004dc:	000d      	movs	r5, r1
 80004de:	f7ff ffcf 	bl	8000480 <__aeabi_dcmpge>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d104      	bne.n	80004f0 <__aeabi_d2uiz+0x1c>
 80004e6:	0020      	movs	r0, r4
 80004e8:	0029      	movs	r1, r5
 80004ea:	f001 fdcb 	bl	8002084 <__aeabi_d2iz>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <__aeabi_d2uiz+0x38>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0020      	movs	r0, r4
 80004f6:	0029      	movs	r1, r5
 80004f8:	f001 fa8e 	bl	8001a18 <__aeabi_dsub>
 80004fc:	f001 fdc2 	bl	8002084 <__aeabi_d2iz>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	469c      	mov	ip, r3
 8000506:	4460      	add	r0, ip
 8000508:	e7f1      	b.n	80004ee <__aeabi_d2uiz+0x1a>
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	41e00000 	.word	0x41e00000

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	4657      	mov	r7, sl
 8000514:	464e      	mov	r6, r9
 8000516:	4645      	mov	r5, r8
 8000518:	46de      	mov	lr, fp
 800051a:	b5e0      	push	{r5, r6, r7, lr}
 800051c:	0004      	movs	r4, r0
 800051e:	b083      	sub	sp, #12
 8000520:	000d      	movs	r5, r1
 8000522:	4692      	mov	sl, r2
 8000524:	4699      	mov	r9, r3
 8000526:	428b      	cmp	r3, r1
 8000528:	d82f      	bhi.n	800058a <__udivmoddi4+0x7a>
 800052a:	d02c      	beq.n	8000586 <__udivmoddi4+0x76>
 800052c:	4649      	mov	r1, r9
 800052e:	4650      	mov	r0, sl
 8000530:	f001 fe74 	bl	800221c <__clzdi2>
 8000534:	0029      	movs	r1, r5
 8000536:	0006      	movs	r6, r0
 8000538:	0020      	movs	r0, r4
 800053a:	f001 fe6f 	bl	800221c <__clzdi2>
 800053e:	1a33      	subs	r3, r6, r0
 8000540:	4698      	mov	r8, r3
 8000542:	3b20      	subs	r3, #32
 8000544:	469b      	mov	fp, r3
 8000546:	d500      	bpl.n	800054a <__udivmoddi4+0x3a>
 8000548:	e074      	b.n	8000634 <__udivmoddi4+0x124>
 800054a:	4653      	mov	r3, sl
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	001f      	movs	r7, r3
 8000552:	4653      	mov	r3, sl
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	001e      	movs	r6, r3
 800055a:	42af      	cmp	r7, r5
 800055c:	d829      	bhi.n	80005b2 <__udivmoddi4+0xa2>
 800055e:	d026      	beq.n	80005ae <__udivmoddi4+0x9e>
 8000560:	465b      	mov	r3, fp
 8000562:	1ba4      	subs	r4, r4, r6
 8000564:	41bd      	sbcs	r5, r7
 8000566:	2b00      	cmp	r3, #0
 8000568:	da00      	bge.n	800056c <__udivmoddi4+0x5c>
 800056a:	e079      	b.n	8000660 <__udivmoddi4+0x150>
 800056c:	2200      	movs	r2, #0
 800056e:	2300      	movs	r3, #0
 8000570:	9200      	str	r2, [sp, #0]
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	2301      	movs	r3, #1
 8000576:	465a      	mov	r2, fp
 8000578:	4093      	lsls	r3, r2
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	2301      	movs	r3, #1
 800057e:	4642      	mov	r2, r8
 8000580:	4093      	lsls	r3, r2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	e019      	b.n	80005ba <__udivmoddi4+0xaa>
 8000586:	4282      	cmp	r2, r0
 8000588:	d9d0      	bls.n	800052c <__udivmoddi4+0x1c>
 800058a:	2200      	movs	r2, #0
 800058c:	2300      	movs	r3, #0
 800058e:	9200      	str	r2, [sp, #0]
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <__udivmoddi4+0x8c>
 8000598:	601c      	str	r4, [r3, #0]
 800059a:	605d      	str	r5, [r3, #4]
 800059c:	9800      	ldr	r0, [sp, #0]
 800059e:	9901      	ldr	r1, [sp, #4]
 80005a0:	b003      	add	sp, #12
 80005a2:	bc3c      	pop	{r2, r3, r4, r5}
 80005a4:	4690      	mov	r8, r2
 80005a6:	4699      	mov	r9, r3
 80005a8:	46a2      	mov	sl, r4
 80005aa:	46ab      	mov	fp, r5
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d9d6      	bls.n	8000560 <__udivmoddi4+0x50>
 80005b2:	2200      	movs	r2, #0
 80005b4:	2300      	movs	r3, #0
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	4643      	mov	r3, r8
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0e8      	beq.n	8000592 <__udivmoddi4+0x82>
 80005c0:	07fb      	lsls	r3, r7, #31
 80005c2:	0872      	lsrs	r2, r6, #1
 80005c4:	431a      	orrs	r2, r3
 80005c6:	4646      	mov	r6, r8
 80005c8:	087b      	lsrs	r3, r7, #1
 80005ca:	e00e      	b.n	80005ea <__udivmoddi4+0xda>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d101      	bne.n	80005d4 <__udivmoddi4+0xc4>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	d80c      	bhi.n	80005ee <__udivmoddi4+0xde>
 80005d4:	1aa4      	subs	r4, r4, r2
 80005d6:	419d      	sbcs	r5, r3
 80005d8:	2001      	movs	r0, #1
 80005da:	1924      	adds	r4, r4, r4
 80005dc:	416d      	adcs	r5, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1824      	adds	r4, r4, r0
 80005e4:	414d      	adcs	r5, r1
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d006      	beq.n	80005f8 <__udivmoddi4+0xe8>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d9ee      	bls.n	80005cc <__udivmoddi4+0xbc>
 80005ee:	3e01      	subs	r6, #1
 80005f0:	1924      	adds	r4, r4, r4
 80005f2:	416d      	adcs	r5, r5
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d1f8      	bne.n	80005ea <__udivmoddi4+0xda>
 80005f8:	465b      	mov	r3, fp
 80005fa:	9800      	ldr	r0, [sp, #0]
 80005fc:	9901      	ldr	r1, [sp, #4]
 80005fe:	1900      	adds	r0, r0, r4
 8000600:	4169      	adcs	r1, r5
 8000602:	2b00      	cmp	r3, #0
 8000604:	db22      	blt.n	800064c <__udivmoddi4+0x13c>
 8000606:	002b      	movs	r3, r5
 8000608:	465a      	mov	r2, fp
 800060a:	40d3      	lsrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4644      	mov	r4, r8
 8000610:	40e2      	lsrs	r2, r4
 8000612:	001c      	movs	r4, r3
 8000614:	465b      	mov	r3, fp
 8000616:	0015      	movs	r5, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	db2c      	blt.n	8000676 <__udivmoddi4+0x166>
 800061c:	0026      	movs	r6, r4
 800061e:	409e      	lsls	r6, r3
 8000620:	0033      	movs	r3, r6
 8000622:	0026      	movs	r6, r4
 8000624:	4647      	mov	r7, r8
 8000626:	40be      	lsls	r6, r7
 8000628:	0032      	movs	r2, r6
 800062a:	1a80      	subs	r0, r0, r2
 800062c:	4199      	sbcs	r1, r3
 800062e:	9000      	str	r0, [sp, #0]
 8000630:	9101      	str	r1, [sp, #4]
 8000632:	e7ae      	b.n	8000592 <__udivmoddi4+0x82>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	4652      	mov	r2, sl
 800063c:	40da      	lsrs	r2, r3
 800063e:	4641      	mov	r1, r8
 8000640:	0013      	movs	r3, r2
 8000642:	464a      	mov	r2, r9
 8000644:	408a      	lsls	r2, r1
 8000646:	0017      	movs	r7, r2
 8000648:	431f      	orrs	r7, r3
 800064a:	e782      	b.n	8000552 <__udivmoddi4+0x42>
 800064c:	4642      	mov	r2, r8
 800064e:	2320      	movs	r3, #32
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	002a      	movs	r2, r5
 8000654:	4646      	mov	r6, r8
 8000656:	409a      	lsls	r2, r3
 8000658:	0023      	movs	r3, r4
 800065a:	40f3      	lsrs	r3, r6
 800065c:	4313      	orrs	r3, r2
 800065e:	e7d5      	b.n	800060c <__udivmoddi4+0xfc>
 8000660:	4642      	mov	r2, r8
 8000662:	2320      	movs	r3, #32
 8000664:	2100      	movs	r1, #0
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	2200      	movs	r2, #0
 800066a:	9100      	str	r1, [sp, #0]
 800066c:	9201      	str	r2, [sp, #4]
 800066e:	2201      	movs	r2, #1
 8000670:	40da      	lsrs	r2, r3
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	e782      	b.n	800057c <__udivmoddi4+0x6c>
 8000676:	4642      	mov	r2, r8
 8000678:	2320      	movs	r3, #32
 800067a:	0026      	movs	r6, r4
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	40de      	lsrs	r6, r3
 8000680:	002f      	movs	r7, r5
 8000682:	46b4      	mov	ip, r6
 8000684:	4097      	lsls	r7, r2
 8000686:	4666      	mov	r6, ip
 8000688:	003b      	movs	r3, r7
 800068a:	4333      	orrs	r3, r6
 800068c:	e7c9      	b.n	8000622 <__udivmoddi4+0x112>
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <__aeabi_dadd>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	4645      	mov	r5, r8
 8000694:	46de      	mov	lr, fp
 8000696:	4657      	mov	r7, sl
 8000698:	464e      	mov	r6, r9
 800069a:	030c      	lsls	r4, r1, #12
 800069c:	b5e0      	push	{r5, r6, r7, lr}
 800069e:	004e      	lsls	r6, r1, #1
 80006a0:	0fc9      	lsrs	r1, r1, #31
 80006a2:	4688      	mov	r8, r1
 80006a4:	000d      	movs	r5, r1
 80006a6:	0a61      	lsrs	r1, r4, #9
 80006a8:	0f44      	lsrs	r4, r0, #29
 80006aa:	430c      	orrs	r4, r1
 80006ac:	00c7      	lsls	r7, r0, #3
 80006ae:	0319      	lsls	r1, r3, #12
 80006b0:	0058      	lsls	r0, r3, #1
 80006b2:	0fdb      	lsrs	r3, r3, #31
 80006b4:	469b      	mov	fp, r3
 80006b6:	0a4b      	lsrs	r3, r1, #9
 80006b8:	0f51      	lsrs	r1, r2, #29
 80006ba:	430b      	orrs	r3, r1
 80006bc:	0d76      	lsrs	r6, r6, #21
 80006be:	0d40      	lsrs	r0, r0, #21
 80006c0:	0019      	movs	r1, r3
 80006c2:	00d2      	lsls	r2, r2, #3
 80006c4:	45d8      	cmp	r8, fp
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x3a>
 80006c8:	e0ae      	b.n	8000828 <__aeabi_dadd+0x198>
 80006ca:	1a35      	subs	r5, r6, r0
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	dc00      	bgt.n	80006d2 <__aeabi_dadd+0x42>
 80006d0:	e0f6      	b.n	80008c0 <__aeabi_dadd+0x230>
 80006d2:	2800      	cmp	r0, #0
 80006d4:	d10f      	bne.n	80006f6 <__aeabi_dadd+0x66>
 80006d6:	4313      	orrs	r3, r2
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x4c>
 80006da:	e0db      	b.n	8000894 <__aeabi_dadd+0x204>
 80006dc:	1e6b      	subs	r3, r5, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d000      	beq.n	80006e4 <__aeabi_dadd+0x54>
 80006e2:	e137      	b.n	8000954 <__aeabi_dadd+0x2c4>
 80006e4:	1aba      	subs	r2, r7, r2
 80006e6:	4297      	cmp	r7, r2
 80006e8:	41bf      	sbcs	r7, r7
 80006ea:	1a64      	subs	r4, r4, r1
 80006ec:	427f      	negs	r7, r7
 80006ee:	1be4      	subs	r4, r4, r7
 80006f0:	2601      	movs	r6, #1
 80006f2:	0017      	movs	r7, r2
 80006f4:	e024      	b.n	8000740 <__aeabi_dadd+0xb0>
 80006f6:	4bc6      	ldr	r3, [pc, #792]	; (8000a10 <__aeabi_dadd+0x380>)
 80006f8:	429e      	cmp	r6, r3
 80006fa:	d04d      	beq.n	8000798 <__aeabi_dadd+0x108>
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	041b      	lsls	r3, r3, #16
 8000700:	4319      	orrs	r1, r3
 8000702:	2d38      	cmp	r5, #56	; 0x38
 8000704:	dd00      	ble.n	8000708 <__aeabi_dadd+0x78>
 8000706:	e107      	b.n	8000918 <__aeabi_dadd+0x288>
 8000708:	2d1f      	cmp	r5, #31
 800070a:	dd00      	ble.n	800070e <__aeabi_dadd+0x7e>
 800070c:	e138      	b.n	8000980 <__aeabi_dadd+0x2f0>
 800070e:	2020      	movs	r0, #32
 8000710:	1b43      	subs	r3, r0, r5
 8000712:	469a      	mov	sl, r3
 8000714:	000b      	movs	r3, r1
 8000716:	4650      	mov	r0, sl
 8000718:	4083      	lsls	r3, r0
 800071a:	4699      	mov	r9, r3
 800071c:	0013      	movs	r3, r2
 800071e:	4648      	mov	r0, r9
 8000720:	40eb      	lsrs	r3, r5
 8000722:	4318      	orrs	r0, r3
 8000724:	0003      	movs	r3, r0
 8000726:	4650      	mov	r0, sl
 8000728:	4082      	lsls	r2, r0
 800072a:	1e50      	subs	r0, r2, #1
 800072c:	4182      	sbcs	r2, r0
 800072e:	40e9      	lsrs	r1, r5
 8000730:	431a      	orrs	r2, r3
 8000732:	1aba      	subs	r2, r7, r2
 8000734:	1a61      	subs	r1, r4, r1
 8000736:	4297      	cmp	r7, r2
 8000738:	41a4      	sbcs	r4, r4
 800073a:	0017      	movs	r7, r2
 800073c:	4264      	negs	r4, r4
 800073e:	1b0c      	subs	r4, r1, r4
 8000740:	0223      	lsls	r3, r4, #8
 8000742:	d562      	bpl.n	800080a <__aeabi_dadd+0x17a>
 8000744:	0264      	lsls	r4, r4, #9
 8000746:	0a65      	lsrs	r5, r4, #9
 8000748:	2d00      	cmp	r5, #0
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0xbe>
 800074c:	e0df      	b.n	800090e <__aeabi_dadd+0x27e>
 800074e:	0028      	movs	r0, r5
 8000750:	f001 fd46 	bl	80021e0 <__clzsi2>
 8000754:	0003      	movs	r3, r0
 8000756:	3b08      	subs	r3, #8
 8000758:	2b1f      	cmp	r3, #31
 800075a:	dd00      	ble.n	800075e <__aeabi_dadd+0xce>
 800075c:	e0d2      	b.n	8000904 <__aeabi_dadd+0x274>
 800075e:	2220      	movs	r2, #32
 8000760:	003c      	movs	r4, r7
 8000762:	1ad2      	subs	r2, r2, r3
 8000764:	409d      	lsls	r5, r3
 8000766:	40d4      	lsrs	r4, r2
 8000768:	409f      	lsls	r7, r3
 800076a:	4325      	orrs	r5, r4
 800076c:	429e      	cmp	r6, r3
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0xe2>
 8000770:	e0c4      	b.n	80008fc <__aeabi_dadd+0x26c>
 8000772:	1b9e      	subs	r6, r3, r6
 8000774:	1c73      	adds	r3, r6, #1
 8000776:	2b1f      	cmp	r3, #31
 8000778:	dd00      	ble.n	800077c <__aeabi_dadd+0xec>
 800077a:	e0f1      	b.n	8000960 <__aeabi_dadd+0x2d0>
 800077c:	2220      	movs	r2, #32
 800077e:	0038      	movs	r0, r7
 8000780:	0029      	movs	r1, r5
 8000782:	1ad2      	subs	r2, r2, r3
 8000784:	40d8      	lsrs	r0, r3
 8000786:	4091      	lsls	r1, r2
 8000788:	4097      	lsls	r7, r2
 800078a:	002c      	movs	r4, r5
 800078c:	4301      	orrs	r1, r0
 800078e:	1e78      	subs	r0, r7, #1
 8000790:	4187      	sbcs	r7, r0
 8000792:	40dc      	lsrs	r4, r3
 8000794:	2600      	movs	r6, #0
 8000796:	430f      	orrs	r7, r1
 8000798:	077b      	lsls	r3, r7, #29
 800079a:	d009      	beq.n	80007b0 <__aeabi_dadd+0x120>
 800079c:	230f      	movs	r3, #15
 800079e:	403b      	ands	r3, r7
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d005      	beq.n	80007b0 <__aeabi_dadd+0x120>
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	42bb      	cmp	r3, r7
 80007a8:	41bf      	sbcs	r7, r7
 80007aa:	427f      	negs	r7, r7
 80007ac:	19e4      	adds	r4, r4, r7
 80007ae:	001f      	movs	r7, r3
 80007b0:	0223      	lsls	r3, r4, #8
 80007b2:	d52c      	bpl.n	800080e <__aeabi_dadd+0x17e>
 80007b4:	4b96      	ldr	r3, [pc, #600]	; (8000a10 <__aeabi_dadd+0x380>)
 80007b6:	3601      	adds	r6, #1
 80007b8:	429e      	cmp	r6, r3
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x12e>
 80007bc:	e09a      	b.n	80008f4 <__aeabi_dadd+0x264>
 80007be:	4645      	mov	r5, r8
 80007c0:	4b94      	ldr	r3, [pc, #592]	; (8000a14 <__aeabi_dadd+0x384>)
 80007c2:	08ff      	lsrs	r7, r7, #3
 80007c4:	401c      	ands	r4, r3
 80007c6:	0760      	lsls	r0, r4, #29
 80007c8:	0576      	lsls	r6, r6, #21
 80007ca:	0264      	lsls	r4, r4, #9
 80007cc:	4307      	orrs	r7, r0
 80007ce:	0b24      	lsrs	r4, r4, #12
 80007d0:	0d76      	lsrs	r6, r6, #21
 80007d2:	2100      	movs	r1, #0
 80007d4:	0324      	lsls	r4, r4, #12
 80007d6:	0b23      	lsrs	r3, r4, #12
 80007d8:	0d0c      	lsrs	r4, r1, #20
 80007da:	4a8f      	ldr	r2, [pc, #572]	; (8000a18 <__aeabi_dadd+0x388>)
 80007dc:	0524      	lsls	r4, r4, #20
 80007de:	431c      	orrs	r4, r3
 80007e0:	4014      	ands	r4, r2
 80007e2:	0533      	lsls	r3, r6, #20
 80007e4:	4323      	orrs	r3, r4
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	07ed      	lsls	r5, r5, #31
 80007ea:	085b      	lsrs	r3, r3, #1
 80007ec:	432b      	orrs	r3, r5
 80007ee:	0038      	movs	r0, r7
 80007f0:	0019      	movs	r1, r3
 80007f2:	bc3c      	pop	{r2, r3, r4, r5}
 80007f4:	4690      	mov	r8, r2
 80007f6:	4699      	mov	r9, r3
 80007f8:	46a2      	mov	sl, r4
 80007fa:	46ab      	mov	fp, r5
 80007fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007fe:	4664      	mov	r4, ip
 8000800:	4304      	orrs	r4, r0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x176>
 8000804:	e211      	b.n	8000c2a <__aeabi_dadd+0x59a>
 8000806:	0004      	movs	r4, r0
 8000808:	4667      	mov	r7, ip
 800080a:	077b      	lsls	r3, r7, #29
 800080c:	d1c6      	bne.n	800079c <__aeabi_dadd+0x10c>
 800080e:	4645      	mov	r5, r8
 8000810:	0760      	lsls	r0, r4, #29
 8000812:	08ff      	lsrs	r7, r7, #3
 8000814:	4307      	orrs	r7, r0
 8000816:	08e4      	lsrs	r4, r4, #3
 8000818:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <__aeabi_dadd+0x380>)
 800081a:	429e      	cmp	r6, r3
 800081c:	d030      	beq.n	8000880 <__aeabi_dadd+0x1f0>
 800081e:	0324      	lsls	r4, r4, #12
 8000820:	0576      	lsls	r6, r6, #21
 8000822:	0b24      	lsrs	r4, r4, #12
 8000824:	0d76      	lsrs	r6, r6, #21
 8000826:	e7d4      	b.n	80007d2 <__aeabi_dadd+0x142>
 8000828:	1a33      	subs	r3, r6, r0
 800082a:	469a      	mov	sl, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	dd78      	ble.n	8000922 <__aeabi_dadd+0x292>
 8000830:	2800      	cmp	r0, #0
 8000832:	d031      	beq.n	8000898 <__aeabi_dadd+0x208>
 8000834:	4876      	ldr	r0, [pc, #472]	; (8000a10 <__aeabi_dadd+0x380>)
 8000836:	4286      	cmp	r6, r0
 8000838:	d0ae      	beq.n	8000798 <__aeabi_dadd+0x108>
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	0400      	lsls	r0, r0, #16
 800083e:	4301      	orrs	r1, r0
 8000840:	4653      	mov	r3, sl
 8000842:	2b38      	cmp	r3, #56	; 0x38
 8000844:	dc00      	bgt.n	8000848 <__aeabi_dadd+0x1b8>
 8000846:	e0e9      	b.n	8000a1c <__aeabi_dadd+0x38c>
 8000848:	430a      	orrs	r2, r1
 800084a:	1e51      	subs	r1, r2, #1
 800084c:	418a      	sbcs	r2, r1
 800084e:	2100      	movs	r1, #0
 8000850:	19d2      	adds	r2, r2, r7
 8000852:	42ba      	cmp	r2, r7
 8000854:	41bf      	sbcs	r7, r7
 8000856:	1909      	adds	r1, r1, r4
 8000858:	427c      	negs	r4, r7
 800085a:	0017      	movs	r7, r2
 800085c:	190c      	adds	r4, r1, r4
 800085e:	0223      	lsls	r3, r4, #8
 8000860:	d5d3      	bpl.n	800080a <__aeabi_dadd+0x17a>
 8000862:	4b6b      	ldr	r3, [pc, #428]	; (8000a10 <__aeabi_dadd+0x380>)
 8000864:	3601      	adds	r6, #1
 8000866:	429e      	cmp	r6, r3
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x1dc>
 800086a:	e13a      	b.n	8000ae2 <__aeabi_dadd+0x452>
 800086c:	2001      	movs	r0, #1
 800086e:	4b69      	ldr	r3, [pc, #420]	; (8000a14 <__aeabi_dadd+0x384>)
 8000870:	401c      	ands	r4, r3
 8000872:	087b      	lsrs	r3, r7, #1
 8000874:	4007      	ands	r7, r0
 8000876:	431f      	orrs	r7, r3
 8000878:	07e0      	lsls	r0, r4, #31
 800087a:	4307      	orrs	r7, r0
 800087c:	0864      	lsrs	r4, r4, #1
 800087e:	e78b      	b.n	8000798 <__aeabi_dadd+0x108>
 8000880:	0023      	movs	r3, r4
 8000882:	433b      	orrs	r3, r7
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x1f8>
 8000886:	e1cb      	b.n	8000c20 <__aeabi_dadd+0x590>
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	0312      	lsls	r2, r2, #12
 800088c:	4314      	orrs	r4, r2
 800088e:	0324      	lsls	r4, r4, #12
 8000890:	0b24      	lsrs	r4, r4, #12
 8000892:	e79e      	b.n	80007d2 <__aeabi_dadd+0x142>
 8000894:	002e      	movs	r6, r5
 8000896:	e77f      	b.n	8000798 <__aeabi_dadd+0x108>
 8000898:	0008      	movs	r0, r1
 800089a:	4310      	orrs	r0, r2
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x210>
 800089e:	e0b4      	b.n	8000a0a <__aeabi_dadd+0x37a>
 80008a0:	1e58      	subs	r0, r3, #1
 80008a2:	2800      	cmp	r0, #0
 80008a4:	d000      	beq.n	80008a8 <__aeabi_dadd+0x218>
 80008a6:	e0de      	b.n	8000a66 <__aeabi_dadd+0x3d6>
 80008a8:	18ba      	adds	r2, r7, r2
 80008aa:	42ba      	cmp	r2, r7
 80008ac:	419b      	sbcs	r3, r3
 80008ae:	1864      	adds	r4, r4, r1
 80008b0:	425b      	negs	r3, r3
 80008b2:	18e4      	adds	r4, r4, r3
 80008b4:	0017      	movs	r7, r2
 80008b6:	2601      	movs	r6, #1
 80008b8:	0223      	lsls	r3, r4, #8
 80008ba:	d5a6      	bpl.n	800080a <__aeabi_dadd+0x17a>
 80008bc:	2602      	movs	r6, #2
 80008be:	e7d5      	b.n	800086c <__aeabi_dadd+0x1dc>
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d16e      	bne.n	80009a2 <__aeabi_dadd+0x312>
 80008c4:	1c70      	adds	r0, r6, #1
 80008c6:	0540      	lsls	r0, r0, #21
 80008c8:	0d40      	lsrs	r0, r0, #21
 80008ca:	2801      	cmp	r0, #1
 80008cc:	dc00      	bgt.n	80008d0 <__aeabi_dadd+0x240>
 80008ce:	e0f9      	b.n	8000ac4 <__aeabi_dadd+0x434>
 80008d0:	1ab8      	subs	r0, r7, r2
 80008d2:	4684      	mov	ip, r0
 80008d4:	4287      	cmp	r7, r0
 80008d6:	4180      	sbcs	r0, r0
 80008d8:	1ae5      	subs	r5, r4, r3
 80008da:	4240      	negs	r0, r0
 80008dc:	1a2d      	subs	r5, r5, r0
 80008de:	0228      	lsls	r0, r5, #8
 80008e0:	d400      	bmi.n	80008e4 <__aeabi_dadd+0x254>
 80008e2:	e089      	b.n	80009f8 <__aeabi_dadd+0x368>
 80008e4:	1bd7      	subs	r7, r2, r7
 80008e6:	42ba      	cmp	r2, r7
 80008e8:	4192      	sbcs	r2, r2
 80008ea:	1b1c      	subs	r4, r3, r4
 80008ec:	4252      	negs	r2, r2
 80008ee:	1aa5      	subs	r5, r4, r2
 80008f0:	46d8      	mov	r8, fp
 80008f2:	e729      	b.n	8000748 <__aeabi_dadd+0xb8>
 80008f4:	4645      	mov	r5, r8
 80008f6:	2400      	movs	r4, #0
 80008f8:	2700      	movs	r7, #0
 80008fa:	e76a      	b.n	80007d2 <__aeabi_dadd+0x142>
 80008fc:	4c45      	ldr	r4, [pc, #276]	; (8000a14 <__aeabi_dadd+0x384>)
 80008fe:	1af6      	subs	r6, r6, r3
 8000900:	402c      	ands	r4, r5
 8000902:	e749      	b.n	8000798 <__aeabi_dadd+0x108>
 8000904:	003d      	movs	r5, r7
 8000906:	3828      	subs	r0, #40	; 0x28
 8000908:	4085      	lsls	r5, r0
 800090a:	2700      	movs	r7, #0
 800090c:	e72e      	b.n	800076c <__aeabi_dadd+0xdc>
 800090e:	0038      	movs	r0, r7
 8000910:	f001 fc66 	bl	80021e0 <__clzsi2>
 8000914:	3020      	adds	r0, #32
 8000916:	e71d      	b.n	8000754 <__aeabi_dadd+0xc4>
 8000918:	430a      	orrs	r2, r1
 800091a:	1e51      	subs	r1, r2, #1
 800091c:	418a      	sbcs	r2, r1
 800091e:	2100      	movs	r1, #0
 8000920:	e707      	b.n	8000732 <__aeabi_dadd+0xa2>
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <__aeabi_dadd+0x298>
 8000926:	e0f3      	b.n	8000b10 <__aeabi_dadd+0x480>
 8000928:	1c70      	adds	r0, r6, #1
 800092a:	0543      	lsls	r3, r0, #21
 800092c:	0d5b      	lsrs	r3, r3, #21
 800092e:	2b01      	cmp	r3, #1
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x2a4>
 8000932:	e0ad      	b.n	8000a90 <__aeabi_dadd+0x400>
 8000934:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <__aeabi_dadd+0x380>)
 8000936:	4298      	cmp	r0, r3
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x2ac>
 800093a:	e0d1      	b.n	8000ae0 <__aeabi_dadd+0x450>
 800093c:	18ba      	adds	r2, r7, r2
 800093e:	42ba      	cmp	r2, r7
 8000940:	41bf      	sbcs	r7, r7
 8000942:	1864      	adds	r4, r4, r1
 8000944:	427f      	negs	r7, r7
 8000946:	19e4      	adds	r4, r4, r7
 8000948:	07e7      	lsls	r7, r4, #31
 800094a:	0852      	lsrs	r2, r2, #1
 800094c:	4317      	orrs	r7, r2
 800094e:	0864      	lsrs	r4, r4, #1
 8000950:	0006      	movs	r6, r0
 8000952:	e721      	b.n	8000798 <__aeabi_dadd+0x108>
 8000954:	482e      	ldr	r0, [pc, #184]	; (8000a10 <__aeabi_dadd+0x380>)
 8000956:	4285      	cmp	r5, r0
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x2cc>
 800095a:	e093      	b.n	8000a84 <__aeabi_dadd+0x3f4>
 800095c:	001d      	movs	r5, r3
 800095e:	e6d0      	b.n	8000702 <__aeabi_dadd+0x72>
 8000960:	0029      	movs	r1, r5
 8000962:	3e1f      	subs	r6, #31
 8000964:	40f1      	lsrs	r1, r6
 8000966:	2b20      	cmp	r3, #32
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x2dc>
 800096a:	e08d      	b.n	8000a88 <__aeabi_dadd+0x3f8>
 800096c:	2240      	movs	r2, #64	; 0x40
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	409d      	lsls	r5, r3
 8000972:	432f      	orrs	r7, r5
 8000974:	1e7d      	subs	r5, r7, #1
 8000976:	41af      	sbcs	r7, r5
 8000978:	2400      	movs	r4, #0
 800097a:	430f      	orrs	r7, r1
 800097c:	2600      	movs	r6, #0
 800097e:	e744      	b.n	800080a <__aeabi_dadd+0x17a>
 8000980:	002b      	movs	r3, r5
 8000982:	0008      	movs	r0, r1
 8000984:	3b20      	subs	r3, #32
 8000986:	40d8      	lsrs	r0, r3
 8000988:	0003      	movs	r3, r0
 800098a:	2d20      	cmp	r5, #32
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x300>
 800098e:	e07d      	b.n	8000a8c <__aeabi_dadd+0x3fc>
 8000990:	2040      	movs	r0, #64	; 0x40
 8000992:	1b45      	subs	r5, r0, r5
 8000994:	40a9      	lsls	r1, r5
 8000996:	430a      	orrs	r2, r1
 8000998:	1e51      	subs	r1, r2, #1
 800099a:	418a      	sbcs	r2, r1
 800099c:	2100      	movs	r1, #0
 800099e:	431a      	orrs	r2, r3
 80009a0:	e6c7      	b.n	8000732 <__aeabi_dadd+0xa2>
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d050      	beq.n	8000a48 <__aeabi_dadd+0x3b8>
 80009a6:	4e1a      	ldr	r6, [pc, #104]	; (8000a10 <__aeabi_dadd+0x380>)
 80009a8:	42b0      	cmp	r0, r6
 80009aa:	d057      	beq.n	8000a5c <__aeabi_dadd+0x3cc>
 80009ac:	2680      	movs	r6, #128	; 0x80
 80009ae:	426b      	negs	r3, r5
 80009b0:	4699      	mov	r9, r3
 80009b2:	0436      	lsls	r6, r6, #16
 80009b4:	4334      	orrs	r4, r6
 80009b6:	464b      	mov	r3, r9
 80009b8:	2b38      	cmp	r3, #56	; 0x38
 80009ba:	dd00      	ble.n	80009be <__aeabi_dadd+0x32e>
 80009bc:	e0d6      	b.n	8000b6c <__aeabi_dadd+0x4dc>
 80009be:	2b1f      	cmp	r3, #31
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_dadd+0x334>
 80009c2:	e135      	b.n	8000c30 <__aeabi_dadd+0x5a0>
 80009c4:	2620      	movs	r6, #32
 80009c6:	1af5      	subs	r5, r6, r3
 80009c8:	0026      	movs	r6, r4
 80009ca:	40ae      	lsls	r6, r5
 80009cc:	46b2      	mov	sl, r6
 80009ce:	003e      	movs	r6, r7
 80009d0:	40de      	lsrs	r6, r3
 80009d2:	46ac      	mov	ip, r5
 80009d4:	0035      	movs	r5, r6
 80009d6:	4656      	mov	r6, sl
 80009d8:	432e      	orrs	r6, r5
 80009da:	4665      	mov	r5, ip
 80009dc:	40af      	lsls	r7, r5
 80009de:	1e7d      	subs	r5, r7, #1
 80009e0:	41af      	sbcs	r7, r5
 80009e2:	40dc      	lsrs	r4, r3
 80009e4:	4337      	orrs	r7, r6
 80009e6:	1bd7      	subs	r7, r2, r7
 80009e8:	42ba      	cmp	r2, r7
 80009ea:	4192      	sbcs	r2, r2
 80009ec:	1b0c      	subs	r4, r1, r4
 80009ee:	4252      	negs	r2, r2
 80009f0:	1aa4      	subs	r4, r4, r2
 80009f2:	0006      	movs	r6, r0
 80009f4:	46d8      	mov	r8, fp
 80009f6:	e6a3      	b.n	8000740 <__aeabi_dadd+0xb0>
 80009f8:	4664      	mov	r4, ip
 80009fa:	4667      	mov	r7, ip
 80009fc:	432c      	orrs	r4, r5
 80009fe:	d000      	beq.n	8000a02 <__aeabi_dadd+0x372>
 8000a00:	e6a2      	b.n	8000748 <__aeabi_dadd+0xb8>
 8000a02:	2500      	movs	r5, #0
 8000a04:	2600      	movs	r6, #0
 8000a06:	2700      	movs	r7, #0
 8000a08:	e706      	b.n	8000818 <__aeabi_dadd+0x188>
 8000a0a:	001e      	movs	r6, r3
 8000a0c:	e6c4      	b.n	8000798 <__aeabi_dadd+0x108>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	000007ff 	.word	0x000007ff
 8000a14:	ff7fffff 	.word	0xff7fffff
 8000a18:	800fffff 	.word	0x800fffff
 8000a1c:	2b1f      	cmp	r3, #31
 8000a1e:	dc63      	bgt.n	8000ae8 <__aeabi_dadd+0x458>
 8000a20:	2020      	movs	r0, #32
 8000a22:	1ac3      	subs	r3, r0, r3
 8000a24:	0008      	movs	r0, r1
 8000a26:	4098      	lsls	r0, r3
 8000a28:	469c      	mov	ip, r3
 8000a2a:	4683      	mov	fp, r0
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	0010      	movs	r0, r2
 8000a30:	40d8      	lsrs	r0, r3
 8000a32:	0003      	movs	r3, r0
 8000a34:	4658      	mov	r0, fp
 8000a36:	4318      	orrs	r0, r3
 8000a38:	4663      	mov	r3, ip
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	1e53      	subs	r3, r2, #1
 8000a3e:	419a      	sbcs	r2, r3
 8000a40:	4653      	mov	r3, sl
 8000a42:	4302      	orrs	r2, r0
 8000a44:	40d9      	lsrs	r1, r3
 8000a46:	e703      	b.n	8000850 <__aeabi_dadd+0x1c0>
 8000a48:	0026      	movs	r6, r4
 8000a4a:	433e      	orrs	r6, r7
 8000a4c:	d006      	beq.n	8000a5c <__aeabi_dadd+0x3cc>
 8000a4e:	43eb      	mvns	r3, r5
 8000a50:	4699      	mov	r9, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0c7      	beq.n	80009e6 <__aeabi_dadd+0x356>
 8000a56:	4e94      	ldr	r6, [pc, #592]	; (8000ca8 <__aeabi_dadd+0x618>)
 8000a58:	42b0      	cmp	r0, r6
 8000a5a:	d1ac      	bne.n	80009b6 <__aeabi_dadd+0x326>
 8000a5c:	000c      	movs	r4, r1
 8000a5e:	0017      	movs	r7, r2
 8000a60:	0006      	movs	r6, r0
 8000a62:	46d8      	mov	r8, fp
 8000a64:	e698      	b.n	8000798 <__aeabi_dadd+0x108>
 8000a66:	4b90      	ldr	r3, [pc, #576]	; (8000ca8 <__aeabi_dadd+0x618>)
 8000a68:	459a      	cmp	sl, r3
 8000a6a:	d00b      	beq.n	8000a84 <__aeabi_dadd+0x3f4>
 8000a6c:	4682      	mov	sl, r0
 8000a6e:	e6e7      	b.n	8000840 <__aeabi_dadd+0x1b0>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d000      	beq.n	8000a76 <__aeabi_dadd+0x3e6>
 8000a74:	e09e      	b.n	8000bb4 <__aeabi_dadd+0x524>
 8000a76:	0018      	movs	r0, r3
 8000a78:	4310      	orrs	r0, r2
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x3ee>
 8000a7c:	e0e9      	b.n	8000c52 <__aeabi_dadd+0x5c2>
 8000a7e:	001c      	movs	r4, r3
 8000a80:	0017      	movs	r7, r2
 8000a82:	46d8      	mov	r8, fp
 8000a84:	4e88      	ldr	r6, [pc, #544]	; (8000ca8 <__aeabi_dadd+0x618>)
 8000a86:	e687      	b.n	8000798 <__aeabi_dadd+0x108>
 8000a88:	2500      	movs	r5, #0
 8000a8a:	e772      	b.n	8000972 <__aeabi_dadd+0x2e2>
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	e782      	b.n	8000996 <__aeabi_dadd+0x306>
 8000a90:	0023      	movs	r3, r4
 8000a92:	433b      	orrs	r3, r7
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d000      	beq.n	8000a9a <__aeabi_dadd+0x40a>
 8000a98:	e0ab      	b.n	8000bf2 <__aeabi_dadd+0x562>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_dadd+0x410>
 8000a9e:	e0e7      	b.n	8000c70 <__aeabi_dadd+0x5e0>
 8000aa0:	000b      	movs	r3, r1
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x418>
 8000aa6:	e677      	b.n	8000798 <__aeabi_dadd+0x108>
 8000aa8:	18ba      	adds	r2, r7, r2
 8000aaa:	42ba      	cmp	r2, r7
 8000aac:	41bf      	sbcs	r7, r7
 8000aae:	1864      	adds	r4, r4, r1
 8000ab0:	427f      	negs	r7, r7
 8000ab2:	19e4      	adds	r4, r4, r7
 8000ab4:	0223      	lsls	r3, r4, #8
 8000ab6:	d400      	bmi.n	8000aba <__aeabi_dadd+0x42a>
 8000ab8:	e0f2      	b.n	8000ca0 <__aeabi_dadd+0x610>
 8000aba:	4b7c      	ldr	r3, [pc, #496]	; (8000cac <__aeabi_dadd+0x61c>)
 8000abc:	0017      	movs	r7, r2
 8000abe:	401c      	ands	r4, r3
 8000ac0:	0006      	movs	r6, r0
 8000ac2:	e669      	b.n	8000798 <__aeabi_dadd+0x108>
 8000ac4:	0020      	movs	r0, r4
 8000ac6:	4338      	orrs	r0, r7
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d1d1      	bne.n	8000a70 <__aeabi_dadd+0x3e0>
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d15b      	bne.n	8000b88 <__aeabi_dadd+0x4f8>
 8000ad0:	001c      	movs	r4, r3
 8000ad2:	4314      	orrs	r4, r2
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dadd+0x448>
 8000ad6:	e0a8      	b.n	8000c2a <__aeabi_dadd+0x59a>
 8000ad8:	001c      	movs	r4, r3
 8000ada:	0017      	movs	r7, r2
 8000adc:	46d8      	mov	r8, fp
 8000ade:	e65b      	b.n	8000798 <__aeabi_dadd+0x108>
 8000ae0:	0006      	movs	r6, r0
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e697      	b.n	8000818 <__aeabi_dadd+0x188>
 8000ae8:	4650      	mov	r0, sl
 8000aea:	000b      	movs	r3, r1
 8000aec:	3820      	subs	r0, #32
 8000aee:	40c3      	lsrs	r3, r0
 8000af0:	4699      	mov	r9, r3
 8000af2:	4653      	mov	r3, sl
 8000af4:	2b20      	cmp	r3, #32
 8000af6:	d100      	bne.n	8000afa <__aeabi_dadd+0x46a>
 8000af8:	e095      	b.n	8000c26 <__aeabi_dadd+0x596>
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	4650      	mov	r0, sl
 8000afe:	1a1b      	subs	r3, r3, r0
 8000b00:	4099      	lsls	r1, r3
 8000b02:	430a      	orrs	r2, r1
 8000b04:	1e51      	subs	r1, r2, #1
 8000b06:	418a      	sbcs	r2, r1
 8000b08:	464b      	mov	r3, r9
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	e69f      	b.n	8000850 <__aeabi_dadd+0x1c0>
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d130      	bne.n	8000b76 <__aeabi_dadd+0x4e6>
 8000b14:	0026      	movs	r6, r4
 8000b16:	433e      	orrs	r6, r7
 8000b18:	d067      	beq.n	8000bea <__aeabi_dadd+0x55a>
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d01c      	beq.n	8000b5c <__aeabi_dadd+0x4cc>
 8000b22:	4e61      	ldr	r6, [pc, #388]	; (8000ca8 <__aeabi_dadd+0x618>)
 8000b24:	42b0      	cmp	r0, r6
 8000b26:	d060      	beq.n	8000bea <__aeabi_dadd+0x55a>
 8000b28:	4653      	mov	r3, sl
 8000b2a:	2b38      	cmp	r3, #56	; 0x38
 8000b2c:	dd00      	ble.n	8000b30 <__aeabi_dadd+0x4a0>
 8000b2e:	e096      	b.n	8000c5e <__aeabi_dadd+0x5ce>
 8000b30:	2b1f      	cmp	r3, #31
 8000b32:	dd00      	ble.n	8000b36 <__aeabi_dadd+0x4a6>
 8000b34:	e09f      	b.n	8000c76 <__aeabi_dadd+0x5e6>
 8000b36:	2620      	movs	r6, #32
 8000b38:	1af3      	subs	r3, r6, r3
 8000b3a:	0026      	movs	r6, r4
 8000b3c:	409e      	lsls	r6, r3
 8000b3e:	469c      	mov	ip, r3
 8000b40:	46b3      	mov	fp, r6
 8000b42:	4653      	mov	r3, sl
 8000b44:	003e      	movs	r6, r7
 8000b46:	40de      	lsrs	r6, r3
 8000b48:	0033      	movs	r3, r6
 8000b4a:	465e      	mov	r6, fp
 8000b4c:	431e      	orrs	r6, r3
 8000b4e:	4663      	mov	r3, ip
 8000b50:	409f      	lsls	r7, r3
 8000b52:	1e7b      	subs	r3, r7, #1
 8000b54:	419f      	sbcs	r7, r3
 8000b56:	4653      	mov	r3, sl
 8000b58:	40dc      	lsrs	r4, r3
 8000b5a:	4337      	orrs	r7, r6
 8000b5c:	18bf      	adds	r7, r7, r2
 8000b5e:	4297      	cmp	r7, r2
 8000b60:	4192      	sbcs	r2, r2
 8000b62:	1864      	adds	r4, r4, r1
 8000b64:	4252      	negs	r2, r2
 8000b66:	18a4      	adds	r4, r4, r2
 8000b68:	0006      	movs	r6, r0
 8000b6a:	e678      	b.n	800085e <__aeabi_dadd+0x1ce>
 8000b6c:	4327      	orrs	r7, r4
 8000b6e:	1e7c      	subs	r4, r7, #1
 8000b70:	41a7      	sbcs	r7, r4
 8000b72:	2400      	movs	r4, #0
 8000b74:	e737      	b.n	80009e6 <__aeabi_dadd+0x356>
 8000b76:	4e4c      	ldr	r6, [pc, #304]	; (8000ca8 <__aeabi_dadd+0x618>)
 8000b78:	42b0      	cmp	r0, r6
 8000b7a:	d036      	beq.n	8000bea <__aeabi_dadd+0x55a>
 8000b7c:	2680      	movs	r6, #128	; 0x80
 8000b7e:	425b      	negs	r3, r3
 8000b80:	0436      	lsls	r6, r6, #16
 8000b82:	469a      	mov	sl, r3
 8000b84:	4334      	orrs	r4, r6
 8000b86:	e7cf      	b.n	8000b28 <__aeabi_dadd+0x498>
 8000b88:	0018      	movs	r0, r3
 8000b8a:	4310      	orrs	r0, r2
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x500>
 8000b8e:	e603      	b.n	8000798 <__aeabi_dadd+0x108>
 8000b90:	1ab8      	subs	r0, r7, r2
 8000b92:	4684      	mov	ip, r0
 8000b94:	4567      	cmp	r7, ip
 8000b96:	41ad      	sbcs	r5, r5
 8000b98:	1ae0      	subs	r0, r4, r3
 8000b9a:	426d      	negs	r5, r5
 8000b9c:	1b40      	subs	r0, r0, r5
 8000b9e:	0205      	lsls	r5, r0, #8
 8000ba0:	d400      	bmi.n	8000ba4 <__aeabi_dadd+0x514>
 8000ba2:	e62c      	b.n	80007fe <__aeabi_dadd+0x16e>
 8000ba4:	1bd7      	subs	r7, r2, r7
 8000ba6:	42ba      	cmp	r2, r7
 8000ba8:	4192      	sbcs	r2, r2
 8000baa:	1b1c      	subs	r4, r3, r4
 8000bac:	4252      	negs	r2, r2
 8000bae:	1aa4      	subs	r4, r4, r2
 8000bb0:	46d8      	mov	r8, fp
 8000bb2:	e5f1      	b.n	8000798 <__aeabi_dadd+0x108>
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	4310      	orrs	r0, r2
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x52c>
 8000bba:	e763      	b.n	8000a84 <__aeabi_dadd+0x3f4>
 8000bbc:	08f8      	lsrs	r0, r7, #3
 8000bbe:	0767      	lsls	r7, r4, #29
 8000bc0:	4307      	orrs	r7, r0
 8000bc2:	2080      	movs	r0, #128	; 0x80
 8000bc4:	08e4      	lsrs	r4, r4, #3
 8000bc6:	0300      	lsls	r0, r0, #12
 8000bc8:	4204      	tst	r4, r0
 8000bca:	d008      	beq.n	8000bde <__aeabi_dadd+0x54e>
 8000bcc:	08dd      	lsrs	r5, r3, #3
 8000bce:	4205      	tst	r5, r0
 8000bd0:	d105      	bne.n	8000bde <__aeabi_dadd+0x54e>
 8000bd2:	08d2      	lsrs	r2, r2, #3
 8000bd4:	0759      	lsls	r1, r3, #29
 8000bd6:	4311      	orrs	r1, r2
 8000bd8:	000f      	movs	r7, r1
 8000bda:	002c      	movs	r4, r5
 8000bdc:	46d8      	mov	r8, fp
 8000bde:	0f7b      	lsrs	r3, r7, #29
 8000be0:	00e4      	lsls	r4, r4, #3
 8000be2:	431c      	orrs	r4, r3
 8000be4:	00ff      	lsls	r7, r7, #3
 8000be6:	4e30      	ldr	r6, [pc, #192]	; (8000ca8 <__aeabi_dadd+0x618>)
 8000be8:	e5d6      	b.n	8000798 <__aeabi_dadd+0x108>
 8000bea:	000c      	movs	r4, r1
 8000bec:	0017      	movs	r7, r2
 8000bee:	0006      	movs	r6, r0
 8000bf0:	e5d2      	b.n	8000798 <__aeabi_dadd+0x108>
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d038      	beq.n	8000c68 <__aeabi_dadd+0x5d8>
 8000bf6:	000b      	movs	r3, r1
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x56e>
 8000bfc:	e742      	b.n	8000a84 <__aeabi_dadd+0x3f4>
 8000bfe:	08f8      	lsrs	r0, r7, #3
 8000c00:	0767      	lsls	r7, r4, #29
 8000c02:	4307      	orrs	r7, r0
 8000c04:	2080      	movs	r0, #128	; 0x80
 8000c06:	08e4      	lsrs	r4, r4, #3
 8000c08:	0300      	lsls	r0, r0, #12
 8000c0a:	4204      	tst	r4, r0
 8000c0c:	d0e7      	beq.n	8000bde <__aeabi_dadd+0x54e>
 8000c0e:	08cb      	lsrs	r3, r1, #3
 8000c10:	4203      	tst	r3, r0
 8000c12:	d1e4      	bne.n	8000bde <__aeabi_dadd+0x54e>
 8000c14:	08d2      	lsrs	r2, r2, #3
 8000c16:	0749      	lsls	r1, r1, #29
 8000c18:	4311      	orrs	r1, r2
 8000c1a:	000f      	movs	r7, r1
 8000c1c:	001c      	movs	r4, r3
 8000c1e:	e7de      	b.n	8000bde <__aeabi_dadd+0x54e>
 8000c20:	2700      	movs	r7, #0
 8000c22:	2400      	movs	r4, #0
 8000c24:	e5d5      	b.n	80007d2 <__aeabi_dadd+0x142>
 8000c26:	2100      	movs	r1, #0
 8000c28:	e76b      	b.n	8000b02 <__aeabi_dadd+0x472>
 8000c2a:	2500      	movs	r5, #0
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	e5f3      	b.n	8000818 <__aeabi_dadd+0x188>
 8000c30:	464e      	mov	r6, r9
 8000c32:	0025      	movs	r5, r4
 8000c34:	3e20      	subs	r6, #32
 8000c36:	40f5      	lsrs	r5, r6
 8000c38:	464b      	mov	r3, r9
 8000c3a:	002e      	movs	r6, r5
 8000c3c:	2b20      	cmp	r3, #32
 8000c3e:	d02d      	beq.n	8000c9c <__aeabi_dadd+0x60c>
 8000c40:	2540      	movs	r5, #64	; 0x40
 8000c42:	1aed      	subs	r5, r5, r3
 8000c44:	40ac      	lsls	r4, r5
 8000c46:	4327      	orrs	r7, r4
 8000c48:	1e7c      	subs	r4, r7, #1
 8000c4a:	41a7      	sbcs	r7, r4
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4337      	orrs	r7, r6
 8000c50:	e6c9      	b.n	80009e6 <__aeabi_dadd+0x356>
 8000c52:	2480      	movs	r4, #128	; 0x80
 8000c54:	2500      	movs	r5, #0
 8000c56:	0324      	lsls	r4, r4, #12
 8000c58:	4e13      	ldr	r6, [pc, #76]	; (8000ca8 <__aeabi_dadd+0x618>)
 8000c5a:	2700      	movs	r7, #0
 8000c5c:	e5dc      	b.n	8000818 <__aeabi_dadd+0x188>
 8000c5e:	4327      	orrs	r7, r4
 8000c60:	1e7c      	subs	r4, r7, #1
 8000c62:	41a7      	sbcs	r7, r4
 8000c64:	2400      	movs	r4, #0
 8000c66:	e779      	b.n	8000b5c <__aeabi_dadd+0x4cc>
 8000c68:	000c      	movs	r4, r1
 8000c6a:	0017      	movs	r7, r2
 8000c6c:	4e0e      	ldr	r6, [pc, #56]	; (8000ca8 <__aeabi_dadd+0x618>)
 8000c6e:	e593      	b.n	8000798 <__aeabi_dadd+0x108>
 8000c70:	000c      	movs	r4, r1
 8000c72:	0017      	movs	r7, r2
 8000c74:	e590      	b.n	8000798 <__aeabi_dadd+0x108>
 8000c76:	4656      	mov	r6, sl
 8000c78:	0023      	movs	r3, r4
 8000c7a:	3e20      	subs	r6, #32
 8000c7c:	40f3      	lsrs	r3, r6
 8000c7e:	4699      	mov	r9, r3
 8000c80:	4653      	mov	r3, sl
 8000c82:	2b20      	cmp	r3, #32
 8000c84:	d00e      	beq.n	8000ca4 <__aeabi_dadd+0x614>
 8000c86:	2340      	movs	r3, #64	; 0x40
 8000c88:	4656      	mov	r6, sl
 8000c8a:	1b9b      	subs	r3, r3, r6
 8000c8c:	409c      	lsls	r4, r3
 8000c8e:	4327      	orrs	r7, r4
 8000c90:	1e7c      	subs	r4, r7, #1
 8000c92:	41a7      	sbcs	r7, r4
 8000c94:	464b      	mov	r3, r9
 8000c96:	2400      	movs	r4, #0
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e75f      	b.n	8000b5c <__aeabi_dadd+0x4cc>
 8000c9c:	2400      	movs	r4, #0
 8000c9e:	e7d2      	b.n	8000c46 <__aeabi_dadd+0x5b6>
 8000ca0:	0017      	movs	r7, r2
 8000ca2:	e5b2      	b.n	800080a <__aeabi_dadd+0x17a>
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	e7f2      	b.n	8000c8e <__aeabi_dadd+0x5fe>
 8000ca8:	000007ff 	.word	0x000007ff
 8000cac:	ff7fffff 	.word	0xff7fffff

08000cb0 <__aeabi_ddiv>:
 8000cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cb2:	4657      	mov	r7, sl
 8000cb4:	4645      	mov	r5, r8
 8000cb6:	46de      	mov	lr, fp
 8000cb8:	464e      	mov	r6, r9
 8000cba:	b5e0      	push	{r5, r6, r7, lr}
 8000cbc:	004c      	lsls	r4, r1, #1
 8000cbe:	030e      	lsls	r6, r1, #12
 8000cc0:	b087      	sub	sp, #28
 8000cc2:	4683      	mov	fp, r0
 8000cc4:	4692      	mov	sl, r2
 8000cc6:	001d      	movs	r5, r3
 8000cc8:	4680      	mov	r8, r0
 8000cca:	0b36      	lsrs	r6, r6, #12
 8000ccc:	0d64      	lsrs	r4, r4, #21
 8000cce:	0fcf      	lsrs	r7, r1, #31
 8000cd0:	2c00      	cmp	r4, #0
 8000cd2:	d04f      	beq.n	8000d74 <__aeabi_ddiv+0xc4>
 8000cd4:	4b6f      	ldr	r3, [pc, #444]	; (8000e94 <__aeabi_ddiv+0x1e4>)
 8000cd6:	429c      	cmp	r4, r3
 8000cd8:	d035      	beq.n	8000d46 <__aeabi_ddiv+0x96>
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	0f42      	lsrs	r2, r0, #29
 8000cde:	041b      	lsls	r3, r3, #16
 8000ce0:	00f6      	lsls	r6, r6, #3
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	4333      	orrs	r3, r6
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	00c3      	lsls	r3, r0, #3
 8000cea:	4698      	mov	r8, r3
 8000cec:	4b6a      	ldr	r3, [pc, #424]	; (8000e98 <__aeabi_ddiv+0x1e8>)
 8000cee:	2600      	movs	r6, #0
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	4464      	add	r4, ip
 8000cf6:	9303      	str	r3, [sp, #12]
 8000cf8:	032b      	lsls	r3, r5, #12
 8000cfa:	0b1b      	lsrs	r3, r3, #12
 8000cfc:	469b      	mov	fp, r3
 8000cfe:	006b      	lsls	r3, r5, #1
 8000d00:	0fed      	lsrs	r5, r5, #31
 8000d02:	4650      	mov	r0, sl
 8000d04:	0d5b      	lsrs	r3, r3, #21
 8000d06:	9501      	str	r5, [sp, #4]
 8000d08:	d05e      	beq.n	8000dc8 <__aeabi_ddiv+0x118>
 8000d0a:	4a62      	ldr	r2, [pc, #392]	; (8000e94 <__aeabi_ddiv+0x1e4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d053      	beq.n	8000db8 <__aeabi_ddiv+0x108>
 8000d10:	465a      	mov	r2, fp
 8000d12:	00d1      	lsls	r1, r2, #3
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	0f40      	lsrs	r0, r0, #29
 8000d18:	0412      	lsls	r2, r2, #16
 8000d1a:	4302      	orrs	r2, r0
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	4693      	mov	fp, r2
 8000d20:	4652      	mov	r2, sl
 8000d22:	00d1      	lsls	r1, r2, #3
 8000d24:	4a5c      	ldr	r2, [pc, #368]	; (8000e98 <__aeabi_ddiv+0x1e8>)
 8000d26:	4694      	mov	ip, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4463      	add	r3, ip
 8000d2c:	0038      	movs	r0, r7
 8000d2e:	4068      	eors	r0, r5
 8000d30:	4684      	mov	ip, r0
 8000d32:	9002      	str	r0, [sp, #8]
 8000d34:	1ae4      	subs	r4, r4, r3
 8000d36:	4316      	orrs	r6, r2
 8000d38:	2e0f      	cmp	r6, #15
 8000d3a:	d900      	bls.n	8000d3e <__aeabi_ddiv+0x8e>
 8000d3c:	e0b4      	b.n	8000ea8 <__aeabi_ddiv+0x1f8>
 8000d3e:	4b57      	ldr	r3, [pc, #348]	; (8000e9c <__aeabi_ddiv+0x1ec>)
 8000d40:	00b6      	lsls	r6, r6, #2
 8000d42:	599b      	ldr	r3, [r3, r6]
 8000d44:	469f      	mov	pc, r3
 8000d46:	0003      	movs	r3, r0
 8000d48:	4333      	orrs	r3, r6
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	d16c      	bne.n	8000e28 <__aeabi_ddiv+0x178>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	4698      	mov	r8, r3
 8000d52:	3302      	adds	r3, #2
 8000d54:	2608      	movs	r6, #8
 8000d56:	9303      	str	r3, [sp, #12]
 8000d58:	e7ce      	b.n	8000cf8 <__aeabi_ddiv+0x48>
 8000d5a:	46cb      	mov	fp, r9
 8000d5c:	4641      	mov	r1, r8
 8000d5e:	9a03      	ldr	r2, [sp, #12]
 8000d60:	9701      	str	r7, [sp, #4]
 8000d62:	2a02      	cmp	r2, #2
 8000d64:	d165      	bne.n	8000e32 <__aeabi_ddiv+0x182>
 8000d66:	9b01      	ldr	r3, [sp, #4]
 8000d68:	4c4a      	ldr	r4, [pc, #296]	; (8000e94 <__aeabi_ddiv+0x1e4>)
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4698      	mov	r8, r3
 8000d72:	e06b      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 8000d74:	0003      	movs	r3, r0
 8000d76:	4333      	orrs	r3, r6
 8000d78:	4699      	mov	r9, r3
 8000d7a:	d04e      	beq.n	8000e1a <__aeabi_ddiv+0x16a>
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0xd2>
 8000d80:	e1bc      	b.n	80010fc <__aeabi_ddiv+0x44c>
 8000d82:	0030      	movs	r0, r6
 8000d84:	f001 fa2c 	bl	80021e0 <__clzsi2>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	3b0b      	subs	r3, #11
 8000d8c:	2b1c      	cmp	r3, #28
 8000d8e:	dd00      	ble.n	8000d92 <__aeabi_ddiv+0xe2>
 8000d90:	e1ac      	b.n	80010ec <__aeabi_ddiv+0x43c>
 8000d92:	221d      	movs	r2, #29
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	465a      	mov	r2, fp
 8000d98:	0001      	movs	r1, r0
 8000d9a:	40da      	lsrs	r2, r3
 8000d9c:	3908      	subs	r1, #8
 8000d9e:	408e      	lsls	r6, r1
 8000da0:	0013      	movs	r3, r2
 8000da2:	4333      	orrs	r3, r6
 8000da4:	4699      	mov	r9, r3
 8000da6:	465b      	mov	r3, fp
 8000da8:	408b      	lsls	r3, r1
 8000daa:	4698      	mov	r8, r3
 8000dac:	2300      	movs	r3, #0
 8000dae:	4c3c      	ldr	r4, [pc, #240]	; (8000ea0 <__aeabi_ddiv+0x1f0>)
 8000db0:	2600      	movs	r6, #0
 8000db2:	1a24      	subs	r4, r4, r0
 8000db4:	9303      	str	r3, [sp, #12]
 8000db6:	e79f      	b.n	8000cf8 <__aeabi_ddiv+0x48>
 8000db8:	4651      	mov	r1, sl
 8000dba:	465a      	mov	r2, fp
 8000dbc:	4311      	orrs	r1, r2
 8000dbe:	d129      	bne.n	8000e14 <__aeabi_ddiv+0x164>
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4693      	mov	fp, r2
 8000dc4:	3202      	adds	r2, #2
 8000dc6:	e7b1      	b.n	8000d2c <__aeabi_ddiv+0x7c>
 8000dc8:	4659      	mov	r1, fp
 8000dca:	4301      	orrs	r1, r0
 8000dcc:	d01e      	beq.n	8000e0c <__aeabi_ddiv+0x15c>
 8000dce:	465b      	mov	r3, fp
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_ddiv+0x126>
 8000dd4:	e19e      	b.n	8001114 <__aeabi_ddiv+0x464>
 8000dd6:	4658      	mov	r0, fp
 8000dd8:	f001 fa02 	bl	80021e0 <__clzsi2>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	3b0b      	subs	r3, #11
 8000de0:	2b1c      	cmp	r3, #28
 8000de2:	dd00      	ble.n	8000de6 <__aeabi_ddiv+0x136>
 8000de4:	e18f      	b.n	8001106 <__aeabi_ddiv+0x456>
 8000de6:	0002      	movs	r2, r0
 8000de8:	4659      	mov	r1, fp
 8000dea:	3a08      	subs	r2, #8
 8000dec:	4091      	lsls	r1, r2
 8000dee:	468b      	mov	fp, r1
 8000df0:	211d      	movs	r1, #29
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	4651      	mov	r1, sl
 8000df6:	40d9      	lsrs	r1, r3
 8000df8:	000b      	movs	r3, r1
 8000dfa:	4659      	mov	r1, fp
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	4651      	mov	r1, sl
 8000e00:	469b      	mov	fp, r3
 8000e02:	4091      	lsls	r1, r2
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <__aeabi_ddiv+0x1f0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	1a1b      	subs	r3, r3, r0
 8000e0a:	e78f      	b.n	8000d2c <__aeabi_ddiv+0x7c>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2201      	movs	r2, #1
 8000e10:	469b      	mov	fp, r3
 8000e12:	e78b      	b.n	8000d2c <__aeabi_ddiv+0x7c>
 8000e14:	4651      	mov	r1, sl
 8000e16:	2203      	movs	r2, #3
 8000e18:	e788      	b.n	8000d2c <__aeabi_ddiv+0x7c>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	4698      	mov	r8, r3
 8000e1e:	3301      	adds	r3, #1
 8000e20:	2604      	movs	r6, #4
 8000e22:	2400      	movs	r4, #0
 8000e24:	9303      	str	r3, [sp, #12]
 8000e26:	e767      	b.n	8000cf8 <__aeabi_ddiv+0x48>
 8000e28:	2303      	movs	r3, #3
 8000e2a:	46b1      	mov	r9, r6
 8000e2c:	9303      	str	r3, [sp, #12]
 8000e2e:	260c      	movs	r6, #12
 8000e30:	e762      	b.n	8000cf8 <__aeabi_ddiv+0x48>
 8000e32:	2a03      	cmp	r2, #3
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x188>
 8000e36:	e25c      	b.n	80012f2 <__aeabi_ddiv+0x642>
 8000e38:	9b01      	ldr	r3, [sp, #4]
 8000e3a:	2a01      	cmp	r2, #1
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_ddiv+0x190>
 8000e3e:	e1e4      	b.n	800120a <__aeabi_ddiv+0x55a>
 8000e40:	4013      	ands	r3, r2
 8000e42:	469c      	mov	ip, r3
 8000e44:	2300      	movs	r3, #0
 8000e46:	2400      	movs	r4, #0
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	0312      	lsls	r2, r2, #12
 8000e50:	0b13      	lsrs	r3, r2, #12
 8000e52:	0d0a      	lsrs	r2, r1, #20
 8000e54:	0512      	lsls	r2, r2, #20
 8000e56:	431a      	orrs	r2, r3
 8000e58:	0523      	lsls	r3, r4, #20
 8000e5a:	4c12      	ldr	r4, [pc, #72]	; (8000ea4 <__aeabi_ddiv+0x1f4>)
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	4022      	ands	r2, r4
 8000e60:	4313      	orrs	r3, r2
 8000e62:	4662      	mov	r2, ip
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	07d2      	lsls	r2, r2, #31
 8000e68:	085b      	lsrs	r3, r3, #1
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	b007      	add	sp, #28
 8000e70:	bc3c      	pop	{r2, r3, r4, r5}
 8000e72:	4690      	mov	r8, r2
 8000e74:	4699      	mov	r9, r3
 8000e76:	46a2      	mov	sl, r4
 8000e78:	46ab      	mov	fp, r5
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	469c      	mov	ip, r3
 8000e82:	0312      	lsls	r2, r2, #12
 8000e84:	4698      	mov	r8, r3
 8000e86:	4c03      	ldr	r4, [pc, #12]	; (8000e94 <__aeabi_ddiv+0x1e4>)
 8000e88:	e7e0      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	4c01      	ldr	r4, [pc, #4]	; (8000e94 <__aeabi_ddiv+0x1e4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4698      	mov	r8, r3
 8000e92:	e7db      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 8000e94:	000007ff 	.word	0x000007ff
 8000e98:	fffffc01 	.word	0xfffffc01
 8000e9c:	0800a4e8 	.word	0x0800a4e8
 8000ea0:	fffffc0d 	.word	0xfffffc0d
 8000ea4:	800fffff 	.word	0x800fffff
 8000ea8:	45d9      	cmp	r9, fp
 8000eaa:	d900      	bls.n	8000eae <__aeabi_ddiv+0x1fe>
 8000eac:	e139      	b.n	8001122 <__aeabi_ddiv+0x472>
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0x202>
 8000eb0:	e134      	b.n	800111c <__aeabi_ddiv+0x46c>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4646      	mov	r6, r8
 8000eb6:	464d      	mov	r5, r9
 8000eb8:	469a      	mov	sl, r3
 8000eba:	3c01      	subs	r4, #1
 8000ebc:	465b      	mov	r3, fp
 8000ebe:	0e0a      	lsrs	r2, r1, #24
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	020b      	lsls	r3, r1, #8
 8000ec6:	0c17      	lsrs	r7, r2, #16
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	0413      	lsls	r3, r2, #16
 8000ecc:	0c1b      	lsrs	r3, r3, #16
 8000ece:	0039      	movs	r1, r7
 8000ed0:	0028      	movs	r0, r5
 8000ed2:	4690      	mov	r8, r2
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	f7ff f929 	bl	800012c <__udivsi3>
 8000eda:	0002      	movs	r2, r0
 8000edc:	9b01      	ldr	r3, [sp, #4]
 8000ede:	4683      	mov	fp, r0
 8000ee0:	435a      	muls	r2, r3
 8000ee2:	0028      	movs	r0, r5
 8000ee4:	0039      	movs	r1, r7
 8000ee6:	4691      	mov	r9, r2
 8000ee8:	f7ff f9a6 	bl	8000238 <__aeabi_uidivmod>
 8000eec:	0c35      	lsrs	r5, r6, #16
 8000eee:	0409      	lsls	r1, r1, #16
 8000ef0:	430d      	orrs	r5, r1
 8000ef2:	45a9      	cmp	r9, r5
 8000ef4:	d90d      	bls.n	8000f12 <__aeabi_ddiv+0x262>
 8000ef6:	465b      	mov	r3, fp
 8000ef8:	4445      	add	r5, r8
 8000efa:	3b01      	subs	r3, #1
 8000efc:	45a8      	cmp	r8, r5
 8000efe:	d900      	bls.n	8000f02 <__aeabi_ddiv+0x252>
 8000f00:	e13a      	b.n	8001178 <__aeabi_ddiv+0x4c8>
 8000f02:	45a9      	cmp	r9, r5
 8000f04:	d800      	bhi.n	8000f08 <__aeabi_ddiv+0x258>
 8000f06:	e137      	b.n	8001178 <__aeabi_ddiv+0x4c8>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	425b      	negs	r3, r3
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	4445      	add	r5, r8
 8000f10:	44e3      	add	fp, ip
 8000f12:	464b      	mov	r3, r9
 8000f14:	1aeb      	subs	r3, r5, r3
 8000f16:	0039      	movs	r1, r7
 8000f18:	0018      	movs	r0, r3
 8000f1a:	9304      	str	r3, [sp, #16]
 8000f1c:	f7ff f906 	bl	800012c <__udivsi3>
 8000f20:	9b01      	ldr	r3, [sp, #4]
 8000f22:	0005      	movs	r5, r0
 8000f24:	4343      	muls	r3, r0
 8000f26:	0039      	movs	r1, r7
 8000f28:	9804      	ldr	r0, [sp, #16]
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	f7ff f984 	bl	8000238 <__aeabi_uidivmod>
 8000f30:	0433      	lsls	r3, r6, #16
 8000f32:	0409      	lsls	r1, r1, #16
 8000f34:	0c1b      	lsrs	r3, r3, #16
 8000f36:	430b      	orrs	r3, r1
 8000f38:	4599      	cmp	r9, r3
 8000f3a:	d909      	bls.n	8000f50 <__aeabi_ddiv+0x2a0>
 8000f3c:	4443      	add	r3, r8
 8000f3e:	1e6a      	subs	r2, r5, #1
 8000f40:	4598      	cmp	r8, r3
 8000f42:	d900      	bls.n	8000f46 <__aeabi_ddiv+0x296>
 8000f44:	e11a      	b.n	800117c <__aeabi_ddiv+0x4cc>
 8000f46:	4599      	cmp	r9, r3
 8000f48:	d800      	bhi.n	8000f4c <__aeabi_ddiv+0x29c>
 8000f4a:	e117      	b.n	800117c <__aeabi_ddiv+0x4cc>
 8000f4c:	3d02      	subs	r5, #2
 8000f4e:	4443      	add	r3, r8
 8000f50:	464a      	mov	r2, r9
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	465a      	mov	r2, fp
 8000f56:	0412      	lsls	r2, r2, #16
 8000f58:	432a      	orrs	r2, r5
 8000f5a:	9903      	ldr	r1, [sp, #12]
 8000f5c:	4693      	mov	fp, r2
 8000f5e:	0c10      	lsrs	r0, r2, #16
 8000f60:	0c0a      	lsrs	r2, r1, #16
 8000f62:	4691      	mov	r9, r2
 8000f64:	0409      	lsls	r1, r1, #16
 8000f66:	465a      	mov	r2, fp
 8000f68:	0c09      	lsrs	r1, r1, #16
 8000f6a:	464e      	mov	r6, r9
 8000f6c:	000d      	movs	r5, r1
 8000f6e:	0412      	lsls	r2, r2, #16
 8000f70:	0c12      	lsrs	r2, r2, #16
 8000f72:	4345      	muls	r5, r0
 8000f74:	9105      	str	r1, [sp, #20]
 8000f76:	4351      	muls	r1, r2
 8000f78:	4372      	muls	r2, r6
 8000f7a:	4370      	muls	r0, r6
 8000f7c:	1952      	adds	r2, r2, r5
 8000f7e:	0c0e      	lsrs	r6, r1, #16
 8000f80:	18b2      	adds	r2, r6, r2
 8000f82:	4295      	cmp	r5, r2
 8000f84:	d903      	bls.n	8000f8e <__aeabi_ddiv+0x2de>
 8000f86:	2580      	movs	r5, #128	; 0x80
 8000f88:	026d      	lsls	r5, r5, #9
 8000f8a:	46ac      	mov	ip, r5
 8000f8c:	4460      	add	r0, ip
 8000f8e:	0c15      	lsrs	r5, r2, #16
 8000f90:	0409      	lsls	r1, r1, #16
 8000f92:	0412      	lsls	r2, r2, #16
 8000f94:	0c09      	lsrs	r1, r1, #16
 8000f96:	1828      	adds	r0, r5, r0
 8000f98:	1852      	adds	r2, r2, r1
 8000f9a:	4283      	cmp	r3, r0
 8000f9c:	d200      	bcs.n	8000fa0 <__aeabi_ddiv+0x2f0>
 8000f9e:	e0ce      	b.n	800113e <__aeabi_ddiv+0x48e>
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x2f4>
 8000fa2:	e0c8      	b.n	8001136 <__aeabi_ddiv+0x486>
 8000fa4:	1a1d      	subs	r5, r3, r0
 8000fa6:	4653      	mov	r3, sl
 8000fa8:	1a9e      	subs	r6, r3, r2
 8000faa:	45b2      	cmp	sl, r6
 8000fac:	4192      	sbcs	r2, r2
 8000fae:	4252      	negs	r2, r2
 8000fb0:	1aab      	subs	r3, r5, r2
 8000fb2:	469a      	mov	sl, r3
 8000fb4:	4598      	cmp	r8, r3
 8000fb6:	d100      	bne.n	8000fba <__aeabi_ddiv+0x30a>
 8000fb8:	e117      	b.n	80011ea <__aeabi_ddiv+0x53a>
 8000fba:	0039      	movs	r1, r7
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff f8b5 	bl	800012c <__udivsi3>
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	0005      	movs	r5, r0
 8000fc6:	4343      	muls	r3, r0
 8000fc8:	0039      	movs	r1, r7
 8000fca:	4650      	mov	r0, sl
 8000fcc:	9304      	str	r3, [sp, #16]
 8000fce:	f7ff f933 	bl	8000238 <__aeabi_uidivmod>
 8000fd2:	9804      	ldr	r0, [sp, #16]
 8000fd4:	040b      	lsls	r3, r1, #16
 8000fd6:	0c31      	lsrs	r1, r6, #16
 8000fd8:	4319      	orrs	r1, r3
 8000fda:	4288      	cmp	r0, r1
 8000fdc:	d909      	bls.n	8000ff2 <__aeabi_ddiv+0x342>
 8000fde:	4441      	add	r1, r8
 8000fe0:	1e6b      	subs	r3, r5, #1
 8000fe2:	4588      	cmp	r8, r1
 8000fe4:	d900      	bls.n	8000fe8 <__aeabi_ddiv+0x338>
 8000fe6:	e107      	b.n	80011f8 <__aeabi_ddiv+0x548>
 8000fe8:	4288      	cmp	r0, r1
 8000fea:	d800      	bhi.n	8000fee <__aeabi_ddiv+0x33e>
 8000fec:	e104      	b.n	80011f8 <__aeabi_ddiv+0x548>
 8000fee:	3d02      	subs	r5, #2
 8000ff0:	4441      	add	r1, r8
 8000ff2:	9b04      	ldr	r3, [sp, #16]
 8000ff4:	1acb      	subs	r3, r1, r3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	0039      	movs	r1, r7
 8000ffa:	9304      	str	r3, [sp, #16]
 8000ffc:	f7ff f896 	bl	800012c <__udivsi3>
 8001000:	9b01      	ldr	r3, [sp, #4]
 8001002:	4682      	mov	sl, r0
 8001004:	4343      	muls	r3, r0
 8001006:	0039      	movs	r1, r7
 8001008:	9804      	ldr	r0, [sp, #16]
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f7ff f914 	bl	8000238 <__aeabi_uidivmod>
 8001010:	9801      	ldr	r0, [sp, #4]
 8001012:	040b      	lsls	r3, r1, #16
 8001014:	0431      	lsls	r1, r6, #16
 8001016:	0c09      	lsrs	r1, r1, #16
 8001018:	4319      	orrs	r1, r3
 800101a:	4288      	cmp	r0, r1
 800101c:	d90d      	bls.n	800103a <__aeabi_ddiv+0x38a>
 800101e:	4653      	mov	r3, sl
 8001020:	4441      	add	r1, r8
 8001022:	3b01      	subs	r3, #1
 8001024:	4588      	cmp	r8, r1
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x37a>
 8001028:	e0e8      	b.n	80011fc <__aeabi_ddiv+0x54c>
 800102a:	4288      	cmp	r0, r1
 800102c:	d800      	bhi.n	8001030 <__aeabi_ddiv+0x380>
 800102e:	e0e5      	b.n	80011fc <__aeabi_ddiv+0x54c>
 8001030:	2302      	movs	r3, #2
 8001032:	425b      	negs	r3, r3
 8001034:	469c      	mov	ip, r3
 8001036:	4441      	add	r1, r8
 8001038:	44e2      	add	sl, ip
 800103a:	9b01      	ldr	r3, [sp, #4]
 800103c:	042d      	lsls	r5, r5, #16
 800103e:	1ace      	subs	r6, r1, r3
 8001040:	4651      	mov	r1, sl
 8001042:	4329      	orrs	r1, r5
 8001044:	9d05      	ldr	r5, [sp, #20]
 8001046:	464f      	mov	r7, r9
 8001048:	002a      	movs	r2, r5
 800104a:	040b      	lsls	r3, r1, #16
 800104c:	0c08      	lsrs	r0, r1, #16
 800104e:	0c1b      	lsrs	r3, r3, #16
 8001050:	435a      	muls	r2, r3
 8001052:	4345      	muls	r5, r0
 8001054:	437b      	muls	r3, r7
 8001056:	4378      	muls	r0, r7
 8001058:	195b      	adds	r3, r3, r5
 800105a:	0c17      	lsrs	r7, r2, #16
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	429d      	cmp	r5, r3
 8001060:	d903      	bls.n	800106a <__aeabi_ddiv+0x3ba>
 8001062:	2580      	movs	r5, #128	; 0x80
 8001064:	026d      	lsls	r5, r5, #9
 8001066:	46ac      	mov	ip, r5
 8001068:	4460      	add	r0, ip
 800106a:	0c1d      	lsrs	r5, r3, #16
 800106c:	0412      	lsls	r2, r2, #16
 800106e:	041b      	lsls	r3, r3, #16
 8001070:	0c12      	lsrs	r2, r2, #16
 8001072:	1828      	adds	r0, r5, r0
 8001074:	189b      	adds	r3, r3, r2
 8001076:	4286      	cmp	r6, r0
 8001078:	d200      	bcs.n	800107c <__aeabi_ddiv+0x3cc>
 800107a:	e093      	b.n	80011a4 <__aeabi_ddiv+0x4f4>
 800107c:	d100      	bne.n	8001080 <__aeabi_ddiv+0x3d0>
 800107e:	e08e      	b.n	800119e <__aeabi_ddiv+0x4ee>
 8001080:	2301      	movs	r3, #1
 8001082:	4319      	orrs	r1, r3
 8001084:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <__aeabi_ddiv+0x658>)
 8001086:	18e3      	adds	r3, r4, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	dc00      	bgt.n	800108e <__aeabi_ddiv+0x3de>
 800108c:	e099      	b.n	80011c2 <__aeabi_ddiv+0x512>
 800108e:	074a      	lsls	r2, r1, #29
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x3e4>
 8001092:	e09e      	b.n	80011d2 <__aeabi_ddiv+0x522>
 8001094:	465a      	mov	r2, fp
 8001096:	01d2      	lsls	r2, r2, #7
 8001098:	d506      	bpl.n	80010a8 <__aeabi_ddiv+0x3f8>
 800109a:	465a      	mov	r2, fp
 800109c:	4b9b      	ldr	r3, [pc, #620]	; (800130c <__aeabi_ddiv+0x65c>)
 800109e:	401a      	ands	r2, r3
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	4693      	mov	fp, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	18e3      	adds	r3, r4, r3
 80010a8:	4a99      	ldr	r2, [pc, #612]	; (8001310 <__aeabi_ddiv+0x660>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	dd68      	ble.n	8001180 <__aeabi_ddiv+0x4d0>
 80010ae:	2301      	movs	r3, #1
 80010b0:	9a02      	ldr	r2, [sp, #8]
 80010b2:	4c98      	ldr	r4, [pc, #608]	; (8001314 <__aeabi_ddiv+0x664>)
 80010b4:	401a      	ands	r2, r3
 80010b6:	2300      	movs	r3, #0
 80010b8:	4694      	mov	ip, r2
 80010ba:	4698      	mov	r8, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	e6c5      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	464b      	mov	r3, r9
 80010c4:	0312      	lsls	r2, r2, #12
 80010c6:	4213      	tst	r3, r2
 80010c8:	d00a      	beq.n	80010e0 <__aeabi_ddiv+0x430>
 80010ca:	465b      	mov	r3, fp
 80010cc:	4213      	tst	r3, r2
 80010ce:	d106      	bne.n	80010de <__aeabi_ddiv+0x42e>
 80010d0:	431a      	orrs	r2, r3
 80010d2:	0312      	lsls	r2, r2, #12
 80010d4:	0b12      	lsrs	r2, r2, #12
 80010d6:	46ac      	mov	ip, r5
 80010d8:	4688      	mov	r8, r1
 80010da:	4c8e      	ldr	r4, [pc, #568]	; (8001314 <__aeabi_ddiv+0x664>)
 80010dc:	e6b6      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 80010de:	464b      	mov	r3, r9
 80010e0:	431a      	orrs	r2, r3
 80010e2:	0312      	lsls	r2, r2, #12
 80010e4:	0b12      	lsrs	r2, r2, #12
 80010e6:	46bc      	mov	ip, r7
 80010e8:	4c8a      	ldr	r4, [pc, #552]	; (8001314 <__aeabi_ddiv+0x664>)
 80010ea:	e6af      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 80010ec:	0003      	movs	r3, r0
 80010ee:	465a      	mov	r2, fp
 80010f0:	3b28      	subs	r3, #40	; 0x28
 80010f2:	409a      	lsls	r2, r3
 80010f4:	2300      	movs	r3, #0
 80010f6:	4691      	mov	r9, r2
 80010f8:	4698      	mov	r8, r3
 80010fa:	e657      	b.n	8000dac <__aeabi_ddiv+0xfc>
 80010fc:	4658      	mov	r0, fp
 80010fe:	f001 f86f 	bl	80021e0 <__clzsi2>
 8001102:	3020      	adds	r0, #32
 8001104:	e640      	b.n	8000d88 <__aeabi_ddiv+0xd8>
 8001106:	0003      	movs	r3, r0
 8001108:	4652      	mov	r2, sl
 800110a:	3b28      	subs	r3, #40	; 0x28
 800110c:	409a      	lsls	r2, r3
 800110e:	2100      	movs	r1, #0
 8001110:	4693      	mov	fp, r2
 8001112:	e677      	b.n	8000e04 <__aeabi_ddiv+0x154>
 8001114:	f001 f864 	bl	80021e0 <__clzsi2>
 8001118:	3020      	adds	r0, #32
 800111a:	e65f      	b.n	8000ddc <__aeabi_ddiv+0x12c>
 800111c:	4588      	cmp	r8, r1
 800111e:	d200      	bcs.n	8001122 <__aeabi_ddiv+0x472>
 8001120:	e6c7      	b.n	8000eb2 <__aeabi_ddiv+0x202>
 8001122:	464b      	mov	r3, r9
 8001124:	07de      	lsls	r6, r3, #31
 8001126:	085d      	lsrs	r5, r3, #1
 8001128:	4643      	mov	r3, r8
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	431e      	orrs	r6, r3
 800112e:	4643      	mov	r3, r8
 8001130:	07db      	lsls	r3, r3, #31
 8001132:	469a      	mov	sl, r3
 8001134:	e6c2      	b.n	8000ebc <__aeabi_ddiv+0x20c>
 8001136:	2500      	movs	r5, #0
 8001138:	4592      	cmp	sl, r2
 800113a:	d300      	bcc.n	800113e <__aeabi_ddiv+0x48e>
 800113c:	e733      	b.n	8000fa6 <__aeabi_ddiv+0x2f6>
 800113e:	9e03      	ldr	r6, [sp, #12]
 8001140:	4659      	mov	r1, fp
 8001142:	46b4      	mov	ip, r6
 8001144:	44e2      	add	sl, ip
 8001146:	45b2      	cmp	sl, r6
 8001148:	41ad      	sbcs	r5, r5
 800114a:	426d      	negs	r5, r5
 800114c:	4445      	add	r5, r8
 800114e:	18eb      	adds	r3, r5, r3
 8001150:	3901      	subs	r1, #1
 8001152:	4598      	cmp	r8, r3
 8001154:	d207      	bcs.n	8001166 <__aeabi_ddiv+0x4b6>
 8001156:	4298      	cmp	r0, r3
 8001158:	d900      	bls.n	800115c <__aeabi_ddiv+0x4ac>
 800115a:	e07f      	b.n	800125c <__aeabi_ddiv+0x5ac>
 800115c:	d100      	bne.n	8001160 <__aeabi_ddiv+0x4b0>
 800115e:	e0bc      	b.n	80012da <__aeabi_ddiv+0x62a>
 8001160:	1a1d      	subs	r5, r3, r0
 8001162:	468b      	mov	fp, r1
 8001164:	e71f      	b.n	8000fa6 <__aeabi_ddiv+0x2f6>
 8001166:	4598      	cmp	r8, r3
 8001168:	d1fa      	bne.n	8001160 <__aeabi_ddiv+0x4b0>
 800116a:	9d03      	ldr	r5, [sp, #12]
 800116c:	4555      	cmp	r5, sl
 800116e:	d9f2      	bls.n	8001156 <__aeabi_ddiv+0x4a6>
 8001170:	4643      	mov	r3, r8
 8001172:	468b      	mov	fp, r1
 8001174:	1a1d      	subs	r5, r3, r0
 8001176:	e716      	b.n	8000fa6 <__aeabi_ddiv+0x2f6>
 8001178:	469b      	mov	fp, r3
 800117a:	e6ca      	b.n	8000f12 <__aeabi_ddiv+0x262>
 800117c:	0015      	movs	r5, r2
 800117e:	e6e7      	b.n	8000f50 <__aeabi_ddiv+0x2a0>
 8001180:	465a      	mov	r2, fp
 8001182:	08c9      	lsrs	r1, r1, #3
 8001184:	0752      	lsls	r2, r2, #29
 8001186:	430a      	orrs	r2, r1
 8001188:	055b      	lsls	r3, r3, #21
 800118a:	4690      	mov	r8, r2
 800118c:	0d5c      	lsrs	r4, r3, #21
 800118e:	465a      	mov	r2, fp
 8001190:	2301      	movs	r3, #1
 8001192:	9902      	ldr	r1, [sp, #8]
 8001194:	0252      	lsls	r2, r2, #9
 8001196:	4019      	ands	r1, r3
 8001198:	0b12      	lsrs	r2, r2, #12
 800119a:	468c      	mov	ip, r1
 800119c:	e656      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x4f4>
 80011a2:	e76f      	b.n	8001084 <__aeabi_ddiv+0x3d4>
 80011a4:	4446      	add	r6, r8
 80011a6:	1e4a      	subs	r2, r1, #1
 80011a8:	45b0      	cmp	r8, r6
 80011aa:	d929      	bls.n	8001200 <__aeabi_ddiv+0x550>
 80011ac:	0011      	movs	r1, r2
 80011ae:	4286      	cmp	r6, r0
 80011b0:	d000      	beq.n	80011b4 <__aeabi_ddiv+0x504>
 80011b2:	e765      	b.n	8001080 <__aeabi_ddiv+0x3d0>
 80011b4:	9a03      	ldr	r2, [sp, #12]
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d000      	beq.n	80011bc <__aeabi_ddiv+0x50c>
 80011ba:	e761      	b.n	8001080 <__aeabi_ddiv+0x3d0>
 80011bc:	e762      	b.n	8001084 <__aeabi_ddiv+0x3d4>
 80011be:	2101      	movs	r1, #1
 80011c0:	4249      	negs	r1, r1
 80011c2:	2001      	movs	r0, #1
 80011c4:	1ac2      	subs	r2, r0, r3
 80011c6:	2a38      	cmp	r2, #56	; 0x38
 80011c8:	dd21      	ble.n	800120e <__aeabi_ddiv+0x55e>
 80011ca:	9b02      	ldr	r3, [sp, #8]
 80011cc:	4003      	ands	r3, r0
 80011ce:	469c      	mov	ip, r3
 80011d0:	e638      	b.n	8000e44 <__aeabi_ddiv+0x194>
 80011d2:	220f      	movs	r2, #15
 80011d4:	400a      	ands	r2, r1
 80011d6:	2a04      	cmp	r2, #4
 80011d8:	d100      	bne.n	80011dc <__aeabi_ddiv+0x52c>
 80011da:	e75b      	b.n	8001094 <__aeabi_ddiv+0x3e4>
 80011dc:	000a      	movs	r2, r1
 80011de:	1d11      	adds	r1, r2, #4
 80011e0:	4291      	cmp	r1, r2
 80011e2:	4192      	sbcs	r2, r2
 80011e4:	4252      	negs	r2, r2
 80011e6:	4493      	add	fp, r2
 80011e8:	e754      	b.n	8001094 <__aeabi_ddiv+0x3e4>
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <__aeabi_ddiv+0x658>)
 80011ec:	18e3      	adds	r3, r4, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dde5      	ble.n	80011be <__aeabi_ddiv+0x50e>
 80011f2:	2201      	movs	r2, #1
 80011f4:	4252      	negs	r2, r2
 80011f6:	e7f2      	b.n	80011de <__aeabi_ddiv+0x52e>
 80011f8:	001d      	movs	r5, r3
 80011fa:	e6fa      	b.n	8000ff2 <__aeabi_ddiv+0x342>
 80011fc:	469a      	mov	sl, r3
 80011fe:	e71c      	b.n	800103a <__aeabi_ddiv+0x38a>
 8001200:	42b0      	cmp	r0, r6
 8001202:	d839      	bhi.n	8001278 <__aeabi_ddiv+0x5c8>
 8001204:	d06e      	beq.n	80012e4 <__aeabi_ddiv+0x634>
 8001206:	0011      	movs	r1, r2
 8001208:	e73a      	b.n	8001080 <__aeabi_ddiv+0x3d0>
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	e73a      	b.n	8001084 <__aeabi_ddiv+0x3d4>
 800120e:	2a1f      	cmp	r2, #31
 8001210:	dc3c      	bgt.n	800128c <__aeabi_ddiv+0x5dc>
 8001212:	2320      	movs	r3, #32
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	000c      	movs	r4, r1
 8001218:	4658      	mov	r0, fp
 800121a:	4099      	lsls	r1, r3
 800121c:	4098      	lsls	r0, r3
 800121e:	1e4b      	subs	r3, r1, #1
 8001220:	4199      	sbcs	r1, r3
 8001222:	465b      	mov	r3, fp
 8001224:	40d4      	lsrs	r4, r2
 8001226:	40d3      	lsrs	r3, r2
 8001228:	4320      	orrs	r0, r4
 800122a:	4308      	orrs	r0, r1
 800122c:	001a      	movs	r2, r3
 800122e:	0743      	lsls	r3, r0, #29
 8001230:	d009      	beq.n	8001246 <__aeabi_ddiv+0x596>
 8001232:	230f      	movs	r3, #15
 8001234:	4003      	ands	r3, r0
 8001236:	2b04      	cmp	r3, #4
 8001238:	d005      	beq.n	8001246 <__aeabi_ddiv+0x596>
 800123a:	0001      	movs	r1, r0
 800123c:	1d08      	adds	r0, r1, #4
 800123e:	4288      	cmp	r0, r1
 8001240:	419b      	sbcs	r3, r3
 8001242:	425b      	negs	r3, r3
 8001244:	18d2      	adds	r2, r2, r3
 8001246:	0213      	lsls	r3, r2, #8
 8001248:	d53a      	bpl.n	80012c0 <__aeabi_ddiv+0x610>
 800124a:	2301      	movs	r3, #1
 800124c:	9a02      	ldr	r2, [sp, #8]
 800124e:	2401      	movs	r4, #1
 8001250:	401a      	ands	r2, r3
 8001252:	2300      	movs	r3, #0
 8001254:	4694      	mov	ip, r2
 8001256:	4698      	mov	r8, r3
 8001258:	2200      	movs	r2, #0
 800125a:	e5f7      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 800125c:	2102      	movs	r1, #2
 800125e:	4249      	negs	r1, r1
 8001260:	468c      	mov	ip, r1
 8001262:	9d03      	ldr	r5, [sp, #12]
 8001264:	44e3      	add	fp, ip
 8001266:	46ac      	mov	ip, r5
 8001268:	44e2      	add	sl, ip
 800126a:	45aa      	cmp	sl, r5
 800126c:	41ad      	sbcs	r5, r5
 800126e:	426d      	negs	r5, r5
 8001270:	4445      	add	r5, r8
 8001272:	18ed      	adds	r5, r5, r3
 8001274:	1a2d      	subs	r5, r5, r0
 8001276:	e696      	b.n	8000fa6 <__aeabi_ddiv+0x2f6>
 8001278:	1e8a      	subs	r2, r1, #2
 800127a:	9903      	ldr	r1, [sp, #12]
 800127c:	004d      	lsls	r5, r1, #1
 800127e:	428d      	cmp	r5, r1
 8001280:	4189      	sbcs	r1, r1
 8001282:	4249      	negs	r1, r1
 8001284:	4441      	add	r1, r8
 8001286:	1876      	adds	r6, r6, r1
 8001288:	9503      	str	r5, [sp, #12]
 800128a:	e78f      	b.n	80011ac <__aeabi_ddiv+0x4fc>
 800128c:	201f      	movs	r0, #31
 800128e:	4240      	negs	r0, r0
 8001290:	1ac3      	subs	r3, r0, r3
 8001292:	4658      	mov	r0, fp
 8001294:	40d8      	lsrs	r0, r3
 8001296:	0003      	movs	r3, r0
 8001298:	2a20      	cmp	r2, #32
 800129a:	d028      	beq.n	80012ee <__aeabi_ddiv+0x63e>
 800129c:	2040      	movs	r0, #64	; 0x40
 800129e:	465d      	mov	r5, fp
 80012a0:	1a82      	subs	r2, r0, r2
 80012a2:	4095      	lsls	r5, r2
 80012a4:	4329      	orrs	r1, r5
 80012a6:	1e4a      	subs	r2, r1, #1
 80012a8:	4191      	sbcs	r1, r2
 80012aa:	4319      	orrs	r1, r3
 80012ac:	2307      	movs	r3, #7
 80012ae:	2200      	movs	r2, #0
 80012b0:	400b      	ands	r3, r1
 80012b2:	d009      	beq.n	80012c8 <__aeabi_ddiv+0x618>
 80012b4:	230f      	movs	r3, #15
 80012b6:	2200      	movs	r2, #0
 80012b8:	400b      	ands	r3, r1
 80012ba:	0008      	movs	r0, r1
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d1bd      	bne.n	800123c <__aeabi_ddiv+0x58c>
 80012c0:	0001      	movs	r1, r0
 80012c2:	0753      	lsls	r3, r2, #29
 80012c4:	0252      	lsls	r2, r2, #9
 80012c6:	0b12      	lsrs	r2, r2, #12
 80012c8:	08c9      	lsrs	r1, r1, #3
 80012ca:	4319      	orrs	r1, r3
 80012cc:	2301      	movs	r3, #1
 80012ce:	4688      	mov	r8, r1
 80012d0:	9902      	ldr	r1, [sp, #8]
 80012d2:	2400      	movs	r4, #0
 80012d4:	4019      	ands	r1, r3
 80012d6:	468c      	mov	ip, r1
 80012d8:	e5b8      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 80012da:	4552      	cmp	r2, sl
 80012dc:	d8be      	bhi.n	800125c <__aeabi_ddiv+0x5ac>
 80012de:	468b      	mov	fp, r1
 80012e0:	2500      	movs	r5, #0
 80012e2:	e660      	b.n	8000fa6 <__aeabi_ddiv+0x2f6>
 80012e4:	9d03      	ldr	r5, [sp, #12]
 80012e6:	429d      	cmp	r5, r3
 80012e8:	d3c6      	bcc.n	8001278 <__aeabi_ddiv+0x5c8>
 80012ea:	0011      	movs	r1, r2
 80012ec:	e762      	b.n	80011b4 <__aeabi_ddiv+0x504>
 80012ee:	2500      	movs	r5, #0
 80012f0:	e7d8      	b.n	80012a4 <__aeabi_ddiv+0x5f4>
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	465b      	mov	r3, fp
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	431a      	orrs	r2, r3
 80012fa:	9b01      	ldr	r3, [sp, #4]
 80012fc:	0312      	lsls	r2, r2, #12
 80012fe:	0b12      	lsrs	r2, r2, #12
 8001300:	469c      	mov	ip, r3
 8001302:	4688      	mov	r8, r1
 8001304:	4c03      	ldr	r4, [pc, #12]	; (8001314 <__aeabi_ddiv+0x664>)
 8001306:	e5a1      	b.n	8000e4c <__aeabi_ddiv+0x19c>
 8001308:	000003ff 	.word	0x000003ff
 800130c:	feffffff 	.word	0xfeffffff
 8001310:	000007fe 	.word	0x000007fe
 8001314:	000007ff 	.word	0x000007ff

08001318 <__eqdf2>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	464f      	mov	r7, r9
 800131c:	4646      	mov	r6, r8
 800131e:	46d6      	mov	lr, sl
 8001320:	005c      	lsls	r4, r3, #1
 8001322:	b5c0      	push	{r6, r7, lr}
 8001324:	031f      	lsls	r7, r3, #12
 8001326:	0fdb      	lsrs	r3, r3, #31
 8001328:	469a      	mov	sl, r3
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <__eqdf2+0x70>)
 800132c:	030e      	lsls	r6, r1, #12
 800132e:	004d      	lsls	r5, r1, #1
 8001330:	4684      	mov	ip, r0
 8001332:	4680      	mov	r8, r0
 8001334:	0b36      	lsrs	r6, r6, #12
 8001336:	0d6d      	lsrs	r5, r5, #21
 8001338:	0fc9      	lsrs	r1, r1, #31
 800133a:	4691      	mov	r9, r2
 800133c:	0b3f      	lsrs	r7, r7, #12
 800133e:	0d64      	lsrs	r4, r4, #21
 8001340:	2001      	movs	r0, #1
 8001342:	429d      	cmp	r5, r3
 8001344:	d008      	beq.n	8001358 <__eqdf2+0x40>
 8001346:	429c      	cmp	r4, r3
 8001348:	d001      	beq.n	800134e <__eqdf2+0x36>
 800134a:	42a5      	cmp	r5, r4
 800134c:	d00b      	beq.n	8001366 <__eqdf2+0x4e>
 800134e:	bc1c      	pop	{r2, r3, r4}
 8001350:	4690      	mov	r8, r2
 8001352:	4699      	mov	r9, r3
 8001354:	46a2      	mov	sl, r4
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001358:	4663      	mov	r3, ip
 800135a:	4333      	orrs	r3, r6
 800135c:	d1f7      	bne.n	800134e <__eqdf2+0x36>
 800135e:	42ac      	cmp	r4, r5
 8001360:	d1f5      	bne.n	800134e <__eqdf2+0x36>
 8001362:	433a      	orrs	r2, r7
 8001364:	d1f3      	bne.n	800134e <__eqdf2+0x36>
 8001366:	2001      	movs	r0, #1
 8001368:	42be      	cmp	r6, r7
 800136a:	d1f0      	bne.n	800134e <__eqdf2+0x36>
 800136c:	45c8      	cmp	r8, r9
 800136e:	d1ee      	bne.n	800134e <__eqdf2+0x36>
 8001370:	4551      	cmp	r1, sl
 8001372:	d007      	beq.n	8001384 <__eqdf2+0x6c>
 8001374:	2d00      	cmp	r5, #0
 8001376:	d1ea      	bne.n	800134e <__eqdf2+0x36>
 8001378:	4663      	mov	r3, ip
 800137a:	431e      	orrs	r6, r3
 800137c:	0030      	movs	r0, r6
 800137e:	1e46      	subs	r6, r0, #1
 8001380:	41b0      	sbcs	r0, r6
 8001382:	e7e4      	b.n	800134e <__eqdf2+0x36>
 8001384:	2000      	movs	r0, #0
 8001386:	e7e2      	b.n	800134e <__eqdf2+0x36>
 8001388:	000007ff 	.word	0x000007ff

0800138c <__gedf2>:
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	4645      	mov	r5, r8
 8001390:	46de      	mov	lr, fp
 8001392:	4657      	mov	r7, sl
 8001394:	464e      	mov	r6, r9
 8001396:	b5e0      	push	{r5, r6, r7, lr}
 8001398:	031f      	lsls	r7, r3, #12
 800139a:	0b3d      	lsrs	r5, r7, #12
 800139c:	4f2c      	ldr	r7, [pc, #176]	; (8001450 <__gedf2+0xc4>)
 800139e:	030e      	lsls	r6, r1, #12
 80013a0:	004c      	lsls	r4, r1, #1
 80013a2:	46ab      	mov	fp, r5
 80013a4:	005d      	lsls	r5, r3, #1
 80013a6:	4684      	mov	ip, r0
 80013a8:	0b36      	lsrs	r6, r6, #12
 80013aa:	0d64      	lsrs	r4, r4, #21
 80013ac:	0fc9      	lsrs	r1, r1, #31
 80013ae:	4690      	mov	r8, r2
 80013b0:	0d6d      	lsrs	r5, r5, #21
 80013b2:	0fdb      	lsrs	r3, r3, #31
 80013b4:	42bc      	cmp	r4, r7
 80013b6:	d02a      	beq.n	800140e <__gedf2+0x82>
 80013b8:	4f25      	ldr	r7, [pc, #148]	; (8001450 <__gedf2+0xc4>)
 80013ba:	42bd      	cmp	r5, r7
 80013bc:	d02d      	beq.n	800141a <__gedf2+0x8e>
 80013be:	2c00      	cmp	r4, #0
 80013c0:	d10f      	bne.n	80013e2 <__gedf2+0x56>
 80013c2:	4330      	orrs	r0, r6
 80013c4:	0007      	movs	r7, r0
 80013c6:	4681      	mov	r9, r0
 80013c8:	4278      	negs	r0, r7
 80013ca:	4178      	adcs	r0, r7
 80013cc:	b2c0      	uxtb	r0, r0
 80013ce:	2d00      	cmp	r5, #0
 80013d0:	d117      	bne.n	8001402 <__gedf2+0x76>
 80013d2:	465f      	mov	r7, fp
 80013d4:	433a      	orrs	r2, r7
 80013d6:	d114      	bne.n	8001402 <__gedf2+0x76>
 80013d8:	464b      	mov	r3, r9
 80013da:	2000      	movs	r0, #0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00a      	beq.n	80013f6 <__gedf2+0x6a>
 80013e0:	e006      	b.n	80013f0 <__gedf2+0x64>
 80013e2:	2d00      	cmp	r5, #0
 80013e4:	d102      	bne.n	80013ec <__gedf2+0x60>
 80013e6:	4658      	mov	r0, fp
 80013e8:	4302      	orrs	r2, r0
 80013ea:	d001      	beq.n	80013f0 <__gedf2+0x64>
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d018      	beq.n	8001422 <__gedf2+0x96>
 80013f0:	4248      	negs	r0, r1
 80013f2:	2101      	movs	r1, #1
 80013f4:	4308      	orrs	r0, r1
 80013f6:	bc3c      	pop	{r2, r3, r4, r5}
 80013f8:	4690      	mov	r8, r2
 80013fa:	4699      	mov	r9, r3
 80013fc:	46a2      	mov	sl, r4
 80013fe:	46ab      	mov	fp, r5
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	2800      	cmp	r0, #0
 8001404:	d0f2      	beq.n	80013ec <__gedf2+0x60>
 8001406:	2001      	movs	r0, #1
 8001408:	3b01      	subs	r3, #1
 800140a:	4318      	orrs	r0, r3
 800140c:	e7f3      	b.n	80013f6 <__gedf2+0x6a>
 800140e:	0037      	movs	r7, r6
 8001410:	4307      	orrs	r7, r0
 8001412:	d0d1      	beq.n	80013b8 <__gedf2+0x2c>
 8001414:	2002      	movs	r0, #2
 8001416:	4240      	negs	r0, r0
 8001418:	e7ed      	b.n	80013f6 <__gedf2+0x6a>
 800141a:	465f      	mov	r7, fp
 800141c:	4317      	orrs	r7, r2
 800141e:	d0ce      	beq.n	80013be <__gedf2+0x32>
 8001420:	e7f8      	b.n	8001414 <__gedf2+0x88>
 8001422:	42ac      	cmp	r4, r5
 8001424:	dce4      	bgt.n	80013f0 <__gedf2+0x64>
 8001426:	da03      	bge.n	8001430 <__gedf2+0xa4>
 8001428:	1e48      	subs	r0, r1, #1
 800142a:	2101      	movs	r1, #1
 800142c:	4308      	orrs	r0, r1
 800142e:	e7e2      	b.n	80013f6 <__gedf2+0x6a>
 8001430:	455e      	cmp	r6, fp
 8001432:	d8dd      	bhi.n	80013f0 <__gedf2+0x64>
 8001434:	d006      	beq.n	8001444 <__gedf2+0xb8>
 8001436:	2000      	movs	r0, #0
 8001438:	455e      	cmp	r6, fp
 800143a:	d2dc      	bcs.n	80013f6 <__gedf2+0x6a>
 800143c:	2301      	movs	r3, #1
 800143e:	1e48      	subs	r0, r1, #1
 8001440:	4318      	orrs	r0, r3
 8001442:	e7d8      	b.n	80013f6 <__gedf2+0x6a>
 8001444:	45c4      	cmp	ip, r8
 8001446:	d8d3      	bhi.n	80013f0 <__gedf2+0x64>
 8001448:	2000      	movs	r0, #0
 800144a:	45c4      	cmp	ip, r8
 800144c:	d3f6      	bcc.n	800143c <__gedf2+0xb0>
 800144e:	e7d2      	b.n	80013f6 <__gedf2+0x6a>
 8001450:	000007ff 	.word	0x000007ff

08001454 <__ledf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	005c      	lsls	r4, r3, #1
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	031f      	lsls	r7, r3, #12
 8001464:	0fdb      	lsrs	r3, r3, #31
 8001466:	4699      	mov	r9, r3
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <__ledf2+0xc0>)
 800146a:	030e      	lsls	r6, r1, #12
 800146c:	004d      	lsls	r5, r1, #1
 800146e:	0fc9      	lsrs	r1, r1, #31
 8001470:	4684      	mov	ip, r0
 8001472:	0b36      	lsrs	r6, r6, #12
 8001474:	0d6d      	lsrs	r5, r5, #21
 8001476:	468b      	mov	fp, r1
 8001478:	4690      	mov	r8, r2
 800147a:	0b3f      	lsrs	r7, r7, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	429d      	cmp	r5, r3
 8001480:	d020      	beq.n	80014c4 <__ledf2+0x70>
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <__ledf2+0xc0>)
 8001484:	429c      	cmp	r4, r3
 8001486:	d022      	beq.n	80014ce <__ledf2+0x7a>
 8001488:	2d00      	cmp	r5, #0
 800148a:	d112      	bne.n	80014b2 <__ledf2+0x5e>
 800148c:	4330      	orrs	r0, r6
 800148e:	4243      	negs	r3, r0
 8001490:	4143      	adcs	r3, r0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2c00      	cmp	r4, #0
 8001496:	d01f      	beq.n	80014d8 <__ledf2+0x84>
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00c      	beq.n	80014b6 <__ledf2+0x62>
 800149c:	464b      	mov	r3, r9
 800149e:	2001      	movs	r0, #1
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4303      	orrs	r3, r0
 80014a4:	0018      	movs	r0, r3
 80014a6:	bc3c      	pop	{r2, r3, r4, r5}
 80014a8:	4690      	mov	r8, r2
 80014aa:	4699      	mov	r9, r3
 80014ac:	46a2      	mov	sl, r4
 80014ae:	46ab      	mov	fp, r5
 80014b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b2:	2c00      	cmp	r4, #0
 80014b4:	d016      	beq.n	80014e4 <__ledf2+0x90>
 80014b6:	45cb      	cmp	fp, r9
 80014b8:	d017      	beq.n	80014ea <__ledf2+0x96>
 80014ba:	465b      	mov	r3, fp
 80014bc:	4259      	negs	r1, r3
 80014be:	2301      	movs	r3, #1
 80014c0:	430b      	orrs	r3, r1
 80014c2:	e7ef      	b.n	80014a4 <__ledf2+0x50>
 80014c4:	0031      	movs	r1, r6
 80014c6:	2302      	movs	r3, #2
 80014c8:	4301      	orrs	r1, r0
 80014ca:	d1eb      	bne.n	80014a4 <__ledf2+0x50>
 80014cc:	e7d9      	b.n	8001482 <__ledf2+0x2e>
 80014ce:	0039      	movs	r1, r7
 80014d0:	2302      	movs	r3, #2
 80014d2:	4311      	orrs	r1, r2
 80014d4:	d1e6      	bne.n	80014a4 <__ledf2+0x50>
 80014d6:	e7d7      	b.n	8001488 <__ledf2+0x34>
 80014d8:	433a      	orrs	r2, r7
 80014da:	d1dd      	bne.n	8001498 <__ledf2+0x44>
 80014dc:	2300      	movs	r3, #0
 80014de:	2800      	cmp	r0, #0
 80014e0:	d0e0      	beq.n	80014a4 <__ledf2+0x50>
 80014e2:	e7ea      	b.n	80014ba <__ledf2+0x66>
 80014e4:	433a      	orrs	r2, r7
 80014e6:	d1e6      	bne.n	80014b6 <__ledf2+0x62>
 80014e8:	e7e7      	b.n	80014ba <__ledf2+0x66>
 80014ea:	42a5      	cmp	r5, r4
 80014ec:	dce5      	bgt.n	80014ba <__ledf2+0x66>
 80014ee:	db05      	blt.n	80014fc <__ledf2+0xa8>
 80014f0:	42be      	cmp	r6, r7
 80014f2:	d8e2      	bhi.n	80014ba <__ledf2+0x66>
 80014f4:	d007      	beq.n	8001506 <__ledf2+0xb2>
 80014f6:	2300      	movs	r3, #0
 80014f8:	42be      	cmp	r6, r7
 80014fa:	d2d3      	bcs.n	80014a4 <__ledf2+0x50>
 80014fc:	4659      	mov	r1, fp
 80014fe:	2301      	movs	r3, #1
 8001500:	3901      	subs	r1, #1
 8001502:	430b      	orrs	r3, r1
 8001504:	e7ce      	b.n	80014a4 <__ledf2+0x50>
 8001506:	45c4      	cmp	ip, r8
 8001508:	d8d7      	bhi.n	80014ba <__ledf2+0x66>
 800150a:	2300      	movs	r3, #0
 800150c:	45c4      	cmp	ip, r8
 800150e:	d3f5      	bcc.n	80014fc <__ledf2+0xa8>
 8001510:	e7c8      	b.n	80014a4 <__ledf2+0x50>
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	000007ff 	.word	0x000007ff

08001518 <__aeabi_dmul>:
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	4657      	mov	r7, sl
 800151c:	4645      	mov	r5, r8
 800151e:	46de      	mov	lr, fp
 8001520:	464e      	mov	r6, r9
 8001522:	b5e0      	push	{r5, r6, r7, lr}
 8001524:	030c      	lsls	r4, r1, #12
 8001526:	4698      	mov	r8, r3
 8001528:	004e      	lsls	r6, r1, #1
 800152a:	0b23      	lsrs	r3, r4, #12
 800152c:	b087      	sub	sp, #28
 800152e:	0007      	movs	r7, r0
 8001530:	4692      	mov	sl, r2
 8001532:	469b      	mov	fp, r3
 8001534:	0d76      	lsrs	r6, r6, #21
 8001536:	0fcd      	lsrs	r5, r1, #31
 8001538:	2e00      	cmp	r6, #0
 800153a:	d06b      	beq.n	8001614 <__aeabi_dmul+0xfc>
 800153c:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <__aeabi_dmul+0x1dc>)
 800153e:	429e      	cmp	r6, r3
 8001540:	d035      	beq.n	80015ae <__aeabi_dmul+0x96>
 8001542:	2480      	movs	r4, #128	; 0x80
 8001544:	465b      	mov	r3, fp
 8001546:	0f42      	lsrs	r2, r0, #29
 8001548:	0424      	lsls	r4, r4, #16
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4314      	orrs	r4, r2
 800154e:	431c      	orrs	r4, r3
 8001550:	00c3      	lsls	r3, r0, #3
 8001552:	4699      	mov	r9, r3
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <__aeabi_dmul+0x1e0>)
 8001556:	46a3      	mov	fp, r4
 8001558:	469c      	mov	ip, r3
 800155a:	2300      	movs	r3, #0
 800155c:	2700      	movs	r7, #0
 800155e:	4466      	add	r6, ip
 8001560:	9302      	str	r3, [sp, #8]
 8001562:	4643      	mov	r3, r8
 8001564:	031c      	lsls	r4, r3, #12
 8001566:	005a      	lsls	r2, r3, #1
 8001568:	0fdb      	lsrs	r3, r3, #31
 800156a:	4650      	mov	r0, sl
 800156c:	0b24      	lsrs	r4, r4, #12
 800156e:	0d52      	lsrs	r2, r2, #21
 8001570:	4698      	mov	r8, r3
 8001572:	d100      	bne.n	8001576 <__aeabi_dmul+0x5e>
 8001574:	e076      	b.n	8001664 <__aeabi_dmul+0x14c>
 8001576:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <__aeabi_dmul+0x1dc>)
 8001578:	429a      	cmp	r2, r3
 800157a:	d06d      	beq.n	8001658 <__aeabi_dmul+0x140>
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	0f41      	lsrs	r1, r0, #29
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	430b      	orrs	r3, r1
 8001584:	495c      	ldr	r1, [pc, #368]	; (80016f8 <__aeabi_dmul+0x1e0>)
 8001586:	00e4      	lsls	r4, r4, #3
 8001588:	468c      	mov	ip, r1
 800158a:	431c      	orrs	r4, r3
 800158c:	00c3      	lsls	r3, r0, #3
 800158e:	2000      	movs	r0, #0
 8001590:	4462      	add	r2, ip
 8001592:	4641      	mov	r1, r8
 8001594:	18b6      	adds	r6, r6, r2
 8001596:	4069      	eors	r1, r5
 8001598:	1c72      	adds	r2, r6, #1
 800159a:	9101      	str	r1, [sp, #4]
 800159c:	4694      	mov	ip, r2
 800159e:	4307      	orrs	r7, r0
 80015a0:	2f0f      	cmp	r7, #15
 80015a2:	d900      	bls.n	80015a6 <__aeabi_dmul+0x8e>
 80015a4:	e0b0      	b.n	8001708 <__aeabi_dmul+0x1f0>
 80015a6:	4a55      	ldr	r2, [pc, #340]	; (80016fc <__aeabi_dmul+0x1e4>)
 80015a8:	00bf      	lsls	r7, r7, #2
 80015aa:	59d2      	ldr	r2, [r2, r7]
 80015ac:	4697      	mov	pc, r2
 80015ae:	465b      	mov	r3, fp
 80015b0:	4303      	orrs	r3, r0
 80015b2:	4699      	mov	r9, r3
 80015b4:	d000      	beq.n	80015b8 <__aeabi_dmul+0xa0>
 80015b6:	e087      	b.n	80016c8 <__aeabi_dmul+0x1b0>
 80015b8:	2300      	movs	r3, #0
 80015ba:	469b      	mov	fp, r3
 80015bc:	3302      	adds	r3, #2
 80015be:	2708      	movs	r7, #8
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	e7ce      	b.n	8001562 <__aeabi_dmul+0x4a>
 80015c4:	4642      	mov	r2, r8
 80015c6:	9201      	str	r2, [sp, #4]
 80015c8:	2802      	cmp	r0, #2
 80015ca:	d067      	beq.n	800169c <__aeabi_dmul+0x184>
 80015cc:	2803      	cmp	r0, #3
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0xba>
 80015d0:	e20e      	b.n	80019f0 <__aeabi_dmul+0x4d8>
 80015d2:	2801      	cmp	r0, #1
 80015d4:	d000      	beq.n	80015d8 <__aeabi_dmul+0xc0>
 80015d6:	e162      	b.n	800189e <__aeabi_dmul+0x386>
 80015d8:	2300      	movs	r3, #0
 80015da:	2400      	movs	r4, #0
 80015dc:	2200      	movs	r2, #0
 80015de:	4699      	mov	r9, r3
 80015e0:	9901      	ldr	r1, [sp, #4]
 80015e2:	4001      	ands	r1, r0
 80015e4:	b2cd      	uxtb	r5, r1
 80015e6:	2100      	movs	r1, #0
 80015e8:	0312      	lsls	r2, r2, #12
 80015ea:	0d0b      	lsrs	r3, r1, #20
 80015ec:	0b12      	lsrs	r2, r2, #12
 80015ee:	051b      	lsls	r3, r3, #20
 80015f0:	4313      	orrs	r3, r2
 80015f2:	4a43      	ldr	r2, [pc, #268]	; (8001700 <__aeabi_dmul+0x1e8>)
 80015f4:	0524      	lsls	r4, r4, #20
 80015f6:	4013      	ands	r3, r2
 80015f8:	431c      	orrs	r4, r3
 80015fa:	0064      	lsls	r4, r4, #1
 80015fc:	07ed      	lsls	r5, r5, #31
 80015fe:	0864      	lsrs	r4, r4, #1
 8001600:	432c      	orrs	r4, r5
 8001602:	4648      	mov	r0, r9
 8001604:	0021      	movs	r1, r4
 8001606:	b007      	add	sp, #28
 8001608:	bc3c      	pop	{r2, r3, r4, r5}
 800160a:	4690      	mov	r8, r2
 800160c:	4699      	mov	r9, r3
 800160e:	46a2      	mov	sl, r4
 8001610:	46ab      	mov	fp, r5
 8001612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001614:	4303      	orrs	r3, r0
 8001616:	4699      	mov	r9, r3
 8001618:	d04f      	beq.n	80016ba <__aeabi_dmul+0x1a2>
 800161a:	465b      	mov	r3, fp
 800161c:	2b00      	cmp	r3, #0
 800161e:	d100      	bne.n	8001622 <__aeabi_dmul+0x10a>
 8001620:	e189      	b.n	8001936 <__aeabi_dmul+0x41e>
 8001622:	4658      	mov	r0, fp
 8001624:	f000 fddc 	bl	80021e0 <__clzsi2>
 8001628:	0003      	movs	r3, r0
 800162a:	3b0b      	subs	r3, #11
 800162c:	2b1c      	cmp	r3, #28
 800162e:	dd00      	ble.n	8001632 <__aeabi_dmul+0x11a>
 8001630:	e17a      	b.n	8001928 <__aeabi_dmul+0x410>
 8001632:	221d      	movs	r2, #29
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	003a      	movs	r2, r7
 8001638:	0001      	movs	r1, r0
 800163a:	465c      	mov	r4, fp
 800163c:	40da      	lsrs	r2, r3
 800163e:	3908      	subs	r1, #8
 8001640:	408c      	lsls	r4, r1
 8001642:	0013      	movs	r3, r2
 8001644:	408f      	lsls	r7, r1
 8001646:	4323      	orrs	r3, r4
 8001648:	469b      	mov	fp, r3
 800164a:	46b9      	mov	r9, r7
 800164c:	2300      	movs	r3, #0
 800164e:	4e2d      	ldr	r6, [pc, #180]	; (8001704 <__aeabi_dmul+0x1ec>)
 8001650:	2700      	movs	r7, #0
 8001652:	1a36      	subs	r6, r6, r0
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	e784      	b.n	8001562 <__aeabi_dmul+0x4a>
 8001658:	4653      	mov	r3, sl
 800165a:	4323      	orrs	r3, r4
 800165c:	d12a      	bne.n	80016b4 <__aeabi_dmul+0x19c>
 800165e:	2400      	movs	r4, #0
 8001660:	2002      	movs	r0, #2
 8001662:	e796      	b.n	8001592 <__aeabi_dmul+0x7a>
 8001664:	4653      	mov	r3, sl
 8001666:	4323      	orrs	r3, r4
 8001668:	d020      	beq.n	80016ac <__aeabi_dmul+0x194>
 800166a:	2c00      	cmp	r4, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dmul+0x158>
 800166e:	e157      	b.n	8001920 <__aeabi_dmul+0x408>
 8001670:	0020      	movs	r0, r4
 8001672:	f000 fdb5 	bl	80021e0 <__clzsi2>
 8001676:	0003      	movs	r3, r0
 8001678:	3b0b      	subs	r3, #11
 800167a:	2b1c      	cmp	r3, #28
 800167c:	dd00      	ble.n	8001680 <__aeabi_dmul+0x168>
 800167e:	e149      	b.n	8001914 <__aeabi_dmul+0x3fc>
 8001680:	211d      	movs	r1, #29
 8001682:	1acb      	subs	r3, r1, r3
 8001684:	4651      	mov	r1, sl
 8001686:	0002      	movs	r2, r0
 8001688:	40d9      	lsrs	r1, r3
 800168a:	4653      	mov	r3, sl
 800168c:	3a08      	subs	r2, #8
 800168e:	4094      	lsls	r4, r2
 8001690:	4093      	lsls	r3, r2
 8001692:	430c      	orrs	r4, r1
 8001694:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <__aeabi_dmul+0x1ec>)
 8001696:	1a12      	subs	r2, r2, r0
 8001698:	2000      	movs	r0, #0
 800169a:	e77a      	b.n	8001592 <__aeabi_dmul+0x7a>
 800169c:	2501      	movs	r5, #1
 800169e:	9b01      	ldr	r3, [sp, #4]
 80016a0:	4c14      	ldr	r4, [pc, #80]	; (80016f4 <__aeabi_dmul+0x1dc>)
 80016a2:	401d      	ands	r5, r3
 80016a4:	2300      	movs	r3, #0
 80016a6:	2200      	movs	r2, #0
 80016a8:	4699      	mov	r9, r3
 80016aa:	e79c      	b.n	80015e6 <__aeabi_dmul+0xce>
 80016ac:	2400      	movs	r4, #0
 80016ae:	2200      	movs	r2, #0
 80016b0:	2001      	movs	r0, #1
 80016b2:	e76e      	b.n	8001592 <__aeabi_dmul+0x7a>
 80016b4:	4653      	mov	r3, sl
 80016b6:	2003      	movs	r0, #3
 80016b8:	e76b      	b.n	8001592 <__aeabi_dmul+0x7a>
 80016ba:	2300      	movs	r3, #0
 80016bc:	469b      	mov	fp, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	2704      	movs	r7, #4
 80016c2:	2600      	movs	r6, #0
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	e74c      	b.n	8001562 <__aeabi_dmul+0x4a>
 80016c8:	2303      	movs	r3, #3
 80016ca:	4681      	mov	r9, r0
 80016cc:	270c      	movs	r7, #12
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	e747      	b.n	8001562 <__aeabi_dmul+0x4a>
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	2300      	movs	r3, #0
 80016d6:	2500      	movs	r5, #0
 80016d8:	0312      	lsls	r2, r2, #12
 80016da:	4699      	mov	r9, r3
 80016dc:	4c05      	ldr	r4, [pc, #20]	; (80016f4 <__aeabi_dmul+0x1dc>)
 80016de:	e782      	b.n	80015e6 <__aeabi_dmul+0xce>
 80016e0:	465c      	mov	r4, fp
 80016e2:	464b      	mov	r3, r9
 80016e4:	9802      	ldr	r0, [sp, #8]
 80016e6:	e76f      	b.n	80015c8 <__aeabi_dmul+0xb0>
 80016e8:	465c      	mov	r4, fp
 80016ea:	464b      	mov	r3, r9
 80016ec:	9501      	str	r5, [sp, #4]
 80016ee:	9802      	ldr	r0, [sp, #8]
 80016f0:	e76a      	b.n	80015c8 <__aeabi_dmul+0xb0>
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	000007ff 	.word	0x000007ff
 80016f8:	fffffc01 	.word	0xfffffc01
 80016fc:	0800a528 	.word	0x0800a528
 8001700:	800fffff 	.word	0x800fffff
 8001704:	fffffc0d 	.word	0xfffffc0d
 8001708:	464a      	mov	r2, r9
 800170a:	4649      	mov	r1, r9
 800170c:	0c17      	lsrs	r7, r2, #16
 800170e:	0c1a      	lsrs	r2, r3, #16
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	0c1b      	lsrs	r3, r3, #16
 8001714:	0408      	lsls	r0, r1, #16
 8001716:	0019      	movs	r1, r3
 8001718:	0c00      	lsrs	r0, r0, #16
 800171a:	4341      	muls	r1, r0
 800171c:	0015      	movs	r5, r2
 800171e:	4688      	mov	r8, r1
 8001720:	0019      	movs	r1, r3
 8001722:	437d      	muls	r5, r7
 8001724:	4379      	muls	r1, r7
 8001726:	9503      	str	r5, [sp, #12]
 8001728:	4689      	mov	r9, r1
 800172a:	0029      	movs	r1, r5
 800172c:	0015      	movs	r5, r2
 800172e:	4345      	muls	r5, r0
 8001730:	444d      	add	r5, r9
 8001732:	9502      	str	r5, [sp, #8]
 8001734:	4645      	mov	r5, r8
 8001736:	0c2d      	lsrs	r5, r5, #16
 8001738:	46aa      	mov	sl, r5
 800173a:	9d02      	ldr	r5, [sp, #8]
 800173c:	4455      	add	r5, sl
 800173e:	45a9      	cmp	r9, r5
 8001740:	d906      	bls.n	8001750 <__aeabi_dmul+0x238>
 8001742:	468a      	mov	sl, r1
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	0249      	lsls	r1, r1, #9
 8001748:	4689      	mov	r9, r1
 800174a:	44ca      	add	sl, r9
 800174c:	4651      	mov	r1, sl
 800174e:	9103      	str	r1, [sp, #12]
 8001750:	0c29      	lsrs	r1, r5, #16
 8001752:	9104      	str	r1, [sp, #16]
 8001754:	4641      	mov	r1, r8
 8001756:	0409      	lsls	r1, r1, #16
 8001758:	042d      	lsls	r5, r5, #16
 800175a:	0c09      	lsrs	r1, r1, #16
 800175c:	4688      	mov	r8, r1
 800175e:	0029      	movs	r1, r5
 8001760:	0c25      	lsrs	r5, r4, #16
 8001762:	0424      	lsls	r4, r4, #16
 8001764:	4441      	add	r1, r8
 8001766:	0c24      	lsrs	r4, r4, #16
 8001768:	9105      	str	r1, [sp, #20]
 800176a:	0021      	movs	r1, r4
 800176c:	4341      	muls	r1, r0
 800176e:	4688      	mov	r8, r1
 8001770:	0021      	movs	r1, r4
 8001772:	4379      	muls	r1, r7
 8001774:	468a      	mov	sl, r1
 8001776:	4368      	muls	r0, r5
 8001778:	4641      	mov	r1, r8
 800177a:	4450      	add	r0, sl
 800177c:	4681      	mov	r9, r0
 800177e:	0c08      	lsrs	r0, r1, #16
 8001780:	4448      	add	r0, r9
 8001782:	436f      	muls	r7, r5
 8001784:	4582      	cmp	sl, r0
 8001786:	d903      	bls.n	8001790 <__aeabi_dmul+0x278>
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0249      	lsls	r1, r1, #9
 800178c:	4689      	mov	r9, r1
 800178e:	444f      	add	r7, r9
 8001790:	0c01      	lsrs	r1, r0, #16
 8001792:	4689      	mov	r9, r1
 8001794:	0039      	movs	r1, r7
 8001796:	4449      	add	r1, r9
 8001798:	9102      	str	r1, [sp, #8]
 800179a:	4641      	mov	r1, r8
 800179c:	040f      	lsls	r7, r1, #16
 800179e:	9904      	ldr	r1, [sp, #16]
 80017a0:	0c3f      	lsrs	r7, r7, #16
 80017a2:	4688      	mov	r8, r1
 80017a4:	0400      	lsls	r0, r0, #16
 80017a6:	19c0      	adds	r0, r0, r7
 80017a8:	4480      	add	r8, r0
 80017aa:	4641      	mov	r1, r8
 80017ac:	9104      	str	r1, [sp, #16]
 80017ae:	4659      	mov	r1, fp
 80017b0:	0c0f      	lsrs	r7, r1, #16
 80017b2:	0409      	lsls	r1, r1, #16
 80017b4:	0c09      	lsrs	r1, r1, #16
 80017b6:	4688      	mov	r8, r1
 80017b8:	4359      	muls	r1, r3
 80017ba:	468a      	mov	sl, r1
 80017bc:	0039      	movs	r1, r7
 80017be:	4351      	muls	r1, r2
 80017c0:	4689      	mov	r9, r1
 80017c2:	4641      	mov	r1, r8
 80017c4:	434a      	muls	r2, r1
 80017c6:	4651      	mov	r1, sl
 80017c8:	0c09      	lsrs	r1, r1, #16
 80017ca:	468b      	mov	fp, r1
 80017cc:	437b      	muls	r3, r7
 80017ce:	18d2      	adds	r2, r2, r3
 80017d0:	445a      	add	r2, fp
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d903      	bls.n	80017de <__aeabi_dmul+0x2c6>
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	469b      	mov	fp, r3
 80017dc:	44d9      	add	r9, fp
 80017de:	4651      	mov	r1, sl
 80017e0:	0409      	lsls	r1, r1, #16
 80017e2:	0c09      	lsrs	r1, r1, #16
 80017e4:	468a      	mov	sl, r1
 80017e6:	4641      	mov	r1, r8
 80017e8:	4361      	muls	r1, r4
 80017ea:	437c      	muls	r4, r7
 80017ec:	0c13      	lsrs	r3, r2, #16
 80017ee:	0412      	lsls	r2, r2, #16
 80017f0:	444b      	add	r3, r9
 80017f2:	4452      	add	r2, sl
 80017f4:	46a1      	mov	r9, r4
 80017f6:	468a      	mov	sl, r1
 80017f8:	003c      	movs	r4, r7
 80017fa:	4641      	mov	r1, r8
 80017fc:	436c      	muls	r4, r5
 80017fe:	434d      	muls	r5, r1
 8001800:	4651      	mov	r1, sl
 8001802:	444d      	add	r5, r9
 8001804:	0c0f      	lsrs	r7, r1, #16
 8001806:	197d      	adds	r5, r7, r5
 8001808:	45a9      	cmp	r9, r5
 800180a:	d903      	bls.n	8001814 <__aeabi_dmul+0x2fc>
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	0249      	lsls	r1, r1, #9
 8001810:	4688      	mov	r8, r1
 8001812:	4444      	add	r4, r8
 8001814:	9f04      	ldr	r7, [sp, #16]
 8001816:	9903      	ldr	r1, [sp, #12]
 8001818:	46b8      	mov	r8, r7
 800181a:	4441      	add	r1, r8
 800181c:	468b      	mov	fp, r1
 800181e:	4583      	cmp	fp, r0
 8001820:	4180      	sbcs	r0, r0
 8001822:	4241      	negs	r1, r0
 8001824:	4688      	mov	r8, r1
 8001826:	4651      	mov	r1, sl
 8001828:	0408      	lsls	r0, r1, #16
 800182a:	042f      	lsls	r7, r5, #16
 800182c:	0c00      	lsrs	r0, r0, #16
 800182e:	183f      	adds	r7, r7, r0
 8001830:	4658      	mov	r0, fp
 8001832:	9902      	ldr	r1, [sp, #8]
 8001834:	1810      	adds	r0, r2, r0
 8001836:	4689      	mov	r9, r1
 8001838:	4290      	cmp	r0, r2
 800183a:	4192      	sbcs	r2, r2
 800183c:	444f      	add	r7, r9
 800183e:	46ba      	mov	sl, r7
 8001840:	4252      	negs	r2, r2
 8001842:	4699      	mov	r9, r3
 8001844:	4693      	mov	fp, r2
 8001846:	44c2      	add	sl, r8
 8001848:	44d1      	add	r9, sl
 800184a:	44cb      	add	fp, r9
 800184c:	428f      	cmp	r7, r1
 800184e:	41bf      	sbcs	r7, r7
 8001850:	45c2      	cmp	sl, r8
 8001852:	4189      	sbcs	r1, r1
 8001854:	4599      	cmp	r9, r3
 8001856:	419b      	sbcs	r3, r3
 8001858:	4593      	cmp	fp, r2
 800185a:	4192      	sbcs	r2, r2
 800185c:	427f      	negs	r7, r7
 800185e:	4249      	negs	r1, r1
 8001860:	0c2d      	lsrs	r5, r5, #16
 8001862:	4252      	negs	r2, r2
 8001864:	430f      	orrs	r7, r1
 8001866:	425b      	negs	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	197f      	adds	r7, r7, r5
 800186c:	18ff      	adds	r7, r7, r3
 800186e:	465b      	mov	r3, fp
 8001870:	193c      	adds	r4, r7, r4
 8001872:	0ddb      	lsrs	r3, r3, #23
 8001874:	9a05      	ldr	r2, [sp, #20]
 8001876:	0264      	lsls	r4, r4, #9
 8001878:	431c      	orrs	r4, r3
 800187a:	0243      	lsls	r3, r0, #9
 800187c:	4313      	orrs	r3, r2
 800187e:	1e5d      	subs	r5, r3, #1
 8001880:	41ab      	sbcs	r3, r5
 8001882:	465a      	mov	r2, fp
 8001884:	0dc0      	lsrs	r0, r0, #23
 8001886:	4303      	orrs	r3, r0
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	4313      	orrs	r3, r2
 800188c:	01e2      	lsls	r2, r4, #7
 800188e:	d556      	bpl.n	800193e <__aeabi_dmul+0x426>
 8001890:	2001      	movs	r0, #1
 8001892:	085a      	lsrs	r2, r3, #1
 8001894:	4003      	ands	r3, r0
 8001896:	4313      	orrs	r3, r2
 8001898:	07e2      	lsls	r2, r4, #31
 800189a:	4313      	orrs	r3, r2
 800189c:	0864      	lsrs	r4, r4, #1
 800189e:	485a      	ldr	r0, [pc, #360]	; (8001a08 <__aeabi_dmul+0x4f0>)
 80018a0:	4460      	add	r0, ip
 80018a2:	2800      	cmp	r0, #0
 80018a4:	dd4d      	ble.n	8001942 <__aeabi_dmul+0x42a>
 80018a6:	075a      	lsls	r2, r3, #29
 80018a8:	d009      	beq.n	80018be <__aeabi_dmul+0x3a6>
 80018aa:	220f      	movs	r2, #15
 80018ac:	401a      	ands	r2, r3
 80018ae:	2a04      	cmp	r2, #4
 80018b0:	d005      	beq.n	80018be <__aeabi_dmul+0x3a6>
 80018b2:	1d1a      	adds	r2, r3, #4
 80018b4:	429a      	cmp	r2, r3
 80018b6:	419b      	sbcs	r3, r3
 80018b8:	425b      	negs	r3, r3
 80018ba:	18e4      	adds	r4, r4, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	01e2      	lsls	r2, r4, #7
 80018c0:	d504      	bpl.n	80018cc <__aeabi_dmul+0x3b4>
 80018c2:	2080      	movs	r0, #128	; 0x80
 80018c4:	4a51      	ldr	r2, [pc, #324]	; (8001a0c <__aeabi_dmul+0x4f4>)
 80018c6:	00c0      	lsls	r0, r0, #3
 80018c8:	4014      	ands	r4, r2
 80018ca:	4460      	add	r0, ip
 80018cc:	4a50      	ldr	r2, [pc, #320]	; (8001a10 <__aeabi_dmul+0x4f8>)
 80018ce:	4290      	cmp	r0, r2
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dmul+0x3bc>
 80018d2:	e6e3      	b.n	800169c <__aeabi_dmul+0x184>
 80018d4:	2501      	movs	r5, #1
 80018d6:	08db      	lsrs	r3, r3, #3
 80018d8:	0762      	lsls	r2, r4, #29
 80018da:	431a      	orrs	r2, r3
 80018dc:	0264      	lsls	r4, r4, #9
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	4691      	mov	r9, r2
 80018e2:	0b22      	lsrs	r2, r4, #12
 80018e4:	0544      	lsls	r4, r0, #21
 80018e6:	0d64      	lsrs	r4, r4, #21
 80018e8:	401d      	ands	r5, r3
 80018ea:	e67c      	b.n	80015e6 <__aeabi_dmul+0xce>
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	4659      	mov	r1, fp
 80018f0:	0312      	lsls	r2, r2, #12
 80018f2:	4211      	tst	r1, r2
 80018f4:	d008      	beq.n	8001908 <__aeabi_dmul+0x3f0>
 80018f6:	4214      	tst	r4, r2
 80018f8:	d106      	bne.n	8001908 <__aeabi_dmul+0x3f0>
 80018fa:	4322      	orrs	r2, r4
 80018fc:	0312      	lsls	r2, r2, #12
 80018fe:	0b12      	lsrs	r2, r2, #12
 8001900:	4645      	mov	r5, r8
 8001902:	4699      	mov	r9, r3
 8001904:	4c43      	ldr	r4, [pc, #268]	; (8001a14 <__aeabi_dmul+0x4fc>)
 8001906:	e66e      	b.n	80015e6 <__aeabi_dmul+0xce>
 8001908:	465b      	mov	r3, fp
 800190a:	431a      	orrs	r2, r3
 800190c:	0312      	lsls	r2, r2, #12
 800190e:	0b12      	lsrs	r2, r2, #12
 8001910:	4c40      	ldr	r4, [pc, #256]	; (8001a14 <__aeabi_dmul+0x4fc>)
 8001912:	e668      	b.n	80015e6 <__aeabi_dmul+0xce>
 8001914:	0003      	movs	r3, r0
 8001916:	4654      	mov	r4, sl
 8001918:	3b28      	subs	r3, #40	; 0x28
 800191a:	409c      	lsls	r4, r3
 800191c:	2300      	movs	r3, #0
 800191e:	e6b9      	b.n	8001694 <__aeabi_dmul+0x17c>
 8001920:	f000 fc5e 	bl	80021e0 <__clzsi2>
 8001924:	3020      	adds	r0, #32
 8001926:	e6a6      	b.n	8001676 <__aeabi_dmul+0x15e>
 8001928:	0003      	movs	r3, r0
 800192a:	3b28      	subs	r3, #40	; 0x28
 800192c:	409f      	lsls	r7, r3
 800192e:	2300      	movs	r3, #0
 8001930:	46bb      	mov	fp, r7
 8001932:	4699      	mov	r9, r3
 8001934:	e68a      	b.n	800164c <__aeabi_dmul+0x134>
 8001936:	f000 fc53 	bl	80021e0 <__clzsi2>
 800193a:	3020      	adds	r0, #32
 800193c:	e674      	b.n	8001628 <__aeabi_dmul+0x110>
 800193e:	46b4      	mov	ip, r6
 8001940:	e7ad      	b.n	800189e <__aeabi_dmul+0x386>
 8001942:	2501      	movs	r5, #1
 8001944:	1a2a      	subs	r2, r5, r0
 8001946:	2a38      	cmp	r2, #56	; 0x38
 8001948:	dd06      	ble.n	8001958 <__aeabi_dmul+0x440>
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	2400      	movs	r4, #0
 800194e:	401d      	ands	r5, r3
 8001950:	2300      	movs	r3, #0
 8001952:	2200      	movs	r2, #0
 8001954:	4699      	mov	r9, r3
 8001956:	e646      	b.n	80015e6 <__aeabi_dmul+0xce>
 8001958:	2a1f      	cmp	r2, #31
 800195a:	dc21      	bgt.n	80019a0 <__aeabi_dmul+0x488>
 800195c:	2520      	movs	r5, #32
 800195e:	0020      	movs	r0, r4
 8001960:	1aad      	subs	r5, r5, r2
 8001962:	001e      	movs	r6, r3
 8001964:	40ab      	lsls	r3, r5
 8001966:	40a8      	lsls	r0, r5
 8001968:	40d6      	lsrs	r6, r2
 800196a:	1e5d      	subs	r5, r3, #1
 800196c:	41ab      	sbcs	r3, r5
 800196e:	4330      	orrs	r0, r6
 8001970:	4318      	orrs	r0, r3
 8001972:	40d4      	lsrs	r4, r2
 8001974:	0743      	lsls	r3, r0, #29
 8001976:	d009      	beq.n	800198c <__aeabi_dmul+0x474>
 8001978:	230f      	movs	r3, #15
 800197a:	4003      	ands	r3, r0
 800197c:	2b04      	cmp	r3, #4
 800197e:	d005      	beq.n	800198c <__aeabi_dmul+0x474>
 8001980:	0003      	movs	r3, r0
 8001982:	1d18      	adds	r0, r3, #4
 8001984:	4298      	cmp	r0, r3
 8001986:	419b      	sbcs	r3, r3
 8001988:	425b      	negs	r3, r3
 800198a:	18e4      	adds	r4, r4, r3
 800198c:	0223      	lsls	r3, r4, #8
 800198e:	d521      	bpl.n	80019d4 <__aeabi_dmul+0x4bc>
 8001990:	2501      	movs	r5, #1
 8001992:	9b01      	ldr	r3, [sp, #4]
 8001994:	2401      	movs	r4, #1
 8001996:	401d      	ands	r5, r3
 8001998:	2300      	movs	r3, #0
 800199a:	2200      	movs	r2, #0
 800199c:	4699      	mov	r9, r3
 800199e:	e622      	b.n	80015e6 <__aeabi_dmul+0xce>
 80019a0:	251f      	movs	r5, #31
 80019a2:	0021      	movs	r1, r4
 80019a4:	426d      	negs	r5, r5
 80019a6:	1a28      	subs	r0, r5, r0
 80019a8:	40c1      	lsrs	r1, r0
 80019aa:	0008      	movs	r0, r1
 80019ac:	2a20      	cmp	r2, #32
 80019ae:	d01d      	beq.n	80019ec <__aeabi_dmul+0x4d4>
 80019b0:	355f      	adds	r5, #95	; 0x5f
 80019b2:	1aaa      	subs	r2, r5, r2
 80019b4:	4094      	lsls	r4, r2
 80019b6:	4323      	orrs	r3, r4
 80019b8:	1e5c      	subs	r4, r3, #1
 80019ba:	41a3      	sbcs	r3, r4
 80019bc:	2507      	movs	r5, #7
 80019be:	4303      	orrs	r3, r0
 80019c0:	401d      	ands	r5, r3
 80019c2:	2200      	movs	r2, #0
 80019c4:	2d00      	cmp	r5, #0
 80019c6:	d009      	beq.n	80019dc <__aeabi_dmul+0x4c4>
 80019c8:	220f      	movs	r2, #15
 80019ca:	2400      	movs	r4, #0
 80019cc:	401a      	ands	r2, r3
 80019ce:	0018      	movs	r0, r3
 80019d0:	2a04      	cmp	r2, #4
 80019d2:	d1d6      	bne.n	8001982 <__aeabi_dmul+0x46a>
 80019d4:	0003      	movs	r3, r0
 80019d6:	0765      	lsls	r5, r4, #29
 80019d8:	0264      	lsls	r4, r4, #9
 80019da:	0b22      	lsrs	r2, r4, #12
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	432b      	orrs	r3, r5
 80019e0:	2501      	movs	r5, #1
 80019e2:	4699      	mov	r9, r3
 80019e4:	9b01      	ldr	r3, [sp, #4]
 80019e6:	2400      	movs	r4, #0
 80019e8:	401d      	ands	r5, r3
 80019ea:	e5fc      	b.n	80015e6 <__aeabi_dmul+0xce>
 80019ec:	2400      	movs	r4, #0
 80019ee:	e7e2      	b.n	80019b6 <__aeabi_dmul+0x49e>
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	2501      	movs	r5, #1
 80019f4:	0312      	lsls	r2, r2, #12
 80019f6:	4322      	orrs	r2, r4
 80019f8:	9901      	ldr	r1, [sp, #4]
 80019fa:	0312      	lsls	r2, r2, #12
 80019fc:	0b12      	lsrs	r2, r2, #12
 80019fe:	400d      	ands	r5, r1
 8001a00:	4699      	mov	r9, r3
 8001a02:	4c04      	ldr	r4, [pc, #16]	; (8001a14 <__aeabi_dmul+0x4fc>)
 8001a04:	e5ef      	b.n	80015e6 <__aeabi_dmul+0xce>
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	000003ff 	.word	0x000003ff
 8001a0c:	feffffff 	.word	0xfeffffff
 8001a10:	000007fe 	.word	0x000007fe
 8001a14:	000007ff 	.word	0x000007ff

08001a18 <__aeabi_dsub>:
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	4646      	mov	r6, r8
 8001a1c:	46d6      	mov	lr, sl
 8001a1e:	464f      	mov	r7, r9
 8001a20:	030c      	lsls	r4, r1, #12
 8001a22:	b5c0      	push	{r6, r7, lr}
 8001a24:	0fcd      	lsrs	r5, r1, #31
 8001a26:	004e      	lsls	r6, r1, #1
 8001a28:	0a61      	lsrs	r1, r4, #9
 8001a2a:	0f44      	lsrs	r4, r0, #29
 8001a2c:	430c      	orrs	r4, r1
 8001a2e:	00c1      	lsls	r1, r0, #3
 8001a30:	0058      	lsls	r0, r3, #1
 8001a32:	0d40      	lsrs	r0, r0, #21
 8001a34:	4684      	mov	ip, r0
 8001a36:	468a      	mov	sl, r1
 8001a38:	000f      	movs	r7, r1
 8001a3a:	0319      	lsls	r1, r3, #12
 8001a3c:	0f50      	lsrs	r0, r2, #29
 8001a3e:	0a49      	lsrs	r1, r1, #9
 8001a40:	4301      	orrs	r1, r0
 8001a42:	48c6      	ldr	r0, [pc, #792]	; (8001d5c <__aeabi_dsub+0x344>)
 8001a44:	0d76      	lsrs	r6, r6, #21
 8001a46:	46a8      	mov	r8, r5
 8001a48:	0fdb      	lsrs	r3, r3, #31
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	4584      	cmp	ip, r0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dsub+0x3a>
 8001a50:	e0d8      	b.n	8001c04 <__aeabi_dsub+0x1ec>
 8001a52:	2001      	movs	r0, #1
 8001a54:	4043      	eors	r3, r0
 8001a56:	42ab      	cmp	r3, r5
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0x44>
 8001a5a:	e0a6      	b.n	8001baa <__aeabi_dsub+0x192>
 8001a5c:	4660      	mov	r0, ip
 8001a5e:	1a35      	subs	r5, r6, r0
 8001a60:	2d00      	cmp	r5, #0
 8001a62:	dc00      	bgt.n	8001a66 <__aeabi_dsub+0x4e>
 8001a64:	e105      	b.n	8001c72 <__aeabi_dsub+0x25a>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d110      	bne.n	8001a8c <__aeabi_dsub+0x74>
 8001a6a:	000b      	movs	r3, r1
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x5a>
 8001a70:	e0d7      	b.n	8001c22 <__aeabi_dsub+0x20a>
 8001a72:	1e6b      	subs	r3, r5, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x62>
 8001a78:	e14b      	b.n	8001d12 <__aeabi_dsub+0x2fa>
 8001a7a:	4653      	mov	r3, sl
 8001a7c:	1a9f      	subs	r7, r3, r2
 8001a7e:	45ba      	cmp	sl, r7
 8001a80:	4180      	sbcs	r0, r0
 8001a82:	1a64      	subs	r4, r4, r1
 8001a84:	4240      	negs	r0, r0
 8001a86:	1a24      	subs	r4, r4, r0
 8001a88:	2601      	movs	r6, #1
 8001a8a:	e01e      	b.n	8001aca <__aeabi_dsub+0xb2>
 8001a8c:	4bb3      	ldr	r3, [pc, #716]	; (8001d5c <__aeabi_dsub+0x344>)
 8001a8e:	429e      	cmp	r6, r3
 8001a90:	d048      	beq.n	8001b24 <__aeabi_dsub+0x10c>
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	041b      	lsls	r3, r3, #16
 8001a96:	4319      	orrs	r1, r3
 8001a98:	2d38      	cmp	r5, #56	; 0x38
 8001a9a:	dd00      	ble.n	8001a9e <__aeabi_dsub+0x86>
 8001a9c:	e119      	b.n	8001cd2 <__aeabi_dsub+0x2ba>
 8001a9e:	2d1f      	cmp	r5, #31
 8001aa0:	dd00      	ble.n	8001aa4 <__aeabi_dsub+0x8c>
 8001aa2:	e14c      	b.n	8001d3e <__aeabi_dsub+0x326>
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	000f      	movs	r7, r1
 8001aa8:	1b5b      	subs	r3, r3, r5
 8001aaa:	0010      	movs	r0, r2
 8001aac:	409a      	lsls	r2, r3
 8001aae:	409f      	lsls	r7, r3
 8001ab0:	40e8      	lsrs	r0, r5
 8001ab2:	1e53      	subs	r3, r2, #1
 8001ab4:	419a      	sbcs	r2, r3
 8001ab6:	40e9      	lsrs	r1, r5
 8001ab8:	4307      	orrs	r7, r0
 8001aba:	4317      	orrs	r7, r2
 8001abc:	4653      	mov	r3, sl
 8001abe:	1bdf      	subs	r7, r3, r7
 8001ac0:	1a61      	subs	r1, r4, r1
 8001ac2:	45ba      	cmp	sl, r7
 8001ac4:	41a4      	sbcs	r4, r4
 8001ac6:	4264      	negs	r4, r4
 8001ac8:	1b0c      	subs	r4, r1, r4
 8001aca:	0223      	lsls	r3, r4, #8
 8001acc:	d400      	bmi.n	8001ad0 <__aeabi_dsub+0xb8>
 8001ace:	e0c5      	b.n	8001c5c <__aeabi_dsub+0x244>
 8001ad0:	0264      	lsls	r4, r4, #9
 8001ad2:	0a65      	lsrs	r5, r4, #9
 8001ad4:	2d00      	cmp	r5, #0
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dsub+0xc2>
 8001ad8:	e0f6      	b.n	8001cc8 <__aeabi_dsub+0x2b0>
 8001ada:	0028      	movs	r0, r5
 8001adc:	f000 fb80 	bl	80021e0 <__clzsi2>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	3b08      	subs	r3, #8
 8001ae4:	2b1f      	cmp	r3, #31
 8001ae6:	dd00      	ble.n	8001aea <__aeabi_dsub+0xd2>
 8001ae8:	e0e9      	b.n	8001cbe <__aeabi_dsub+0x2a6>
 8001aea:	2220      	movs	r2, #32
 8001aec:	003c      	movs	r4, r7
 8001aee:	1ad2      	subs	r2, r2, r3
 8001af0:	409d      	lsls	r5, r3
 8001af2:	40d4      	lsrs	r4, r2
 8001af4:	409f      	lsls	r7, r3
 8001af6:	4325      	orrs	r5, r4
 8001af8:	429e      	cmp	r6, r3
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dsub+0xe6>
 8001afc:	e0db      	b.n	8001cb6 <__aeabi_dsub+0x29e>
 8001afe:	1b9e      	subs	r6, r3, r6
 8001b00:	1c73      	adds	r3, r6, #1
 8001b02:	2b1f      	cmp	r3, #31
 8001b04:	dd00      	ble.n	8001b08 <__aeabi_dsub+0xf0>
 8001b06:	e10a      	b.n	8001d1e <__aeabi_dsub+0x306>
 8001b08:	2220      	movs	r2, #32
 8001b0a:	0038      	movs	r0, r7
 8001b0c:	1ad2      	subs	r2, r2, r3
 8001b0e:	0029      	movs	r1, r5
 8001b10:	4097      	lsls	r7, r2
 8001b12:	002c      	movs	r4, r5
 8001b14:	4091      	lsls	r1, r2
 8001b16:	40d8      	lsrs	r0, r3
 8001b18:	1e7a      	subs	r2, r7, #1
 8001b1a:	4197      	sbcs	r7, r2
 8001b1c:	40dc      	lsrs	r4, r3
 8001b1e:	2600      	movs	r6, #0
 8001b20:	4301      	orrs	r1, r0
 8001b22:	430f      	orrs	r7, r1
 8001b24:	077b      	lsls	r3, r7, #29
 8001b26:	d009      	beq.n	8001b3c <__aeabi_dsub+0x124>
 8001b28:	230f      	movs	r3, #15
 8001b2a:	403b      	ands	r3, r7
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d005      	beq.n	8001b3c <__aeabi_dsub+0x124>
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	42bb      	cmp	r3, r7
 8001b34:	41bf      	sbcs	r7, r7
 8001b36:	427f      	negs	r7, r7
 8001b38:	19e4      	adds	r4, r4, r7
 8001b3a:	001f      	movs	r7, r3
 8001b3c:	0223      	lsls	r3, r4, #8
 8001b3e:	d525      	bpl.n	8001b8c <__aeabi_dsub+0x174>
 8001b40:	4b86      	ldr	r3, [pc, #536]	; (8001d5c <__aeabi_dsub+0x344>)
 8001b42:	3601      	adds	r6, #1
 8001b44:	429e      	cmp	r6, r3
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dsub+0x132>
 8001b48:	e0af      	b.n	8001caa <__aeabi_dsub+0x292>
 8001b4a:	4b85      	ldr	r3, [pc, #532]	; (8001d60 <__aeabi_dsub+0x348>)
 8001b4c:	2501      	movs	r5, #1
 8001b4e:	401c      	ands	r4, r3
 8001b50:	4643      	mov	r3, r8
 8001b52:	0762      	lsls	r2, r4, #29
 8001b54:	08ff      	lsrs	r7, r7, #3
 8001b56:	0264      	lsls	r4, r4, #9
 8001b58:	0576      	lsls	r6, r6, #21
 8001b5a:	4317      	orrs	r7, r2
 8001b5c:	0b24      	lsrs	r4, r4, #12
 8001b5e:	0d76      	lsrs	r6, r6, #21
 8001b60:	401d      	ands	r5, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	0324      	lsls	r4, r4, #12
 8001b66:	0b23      	lsrs	r3, r4, #12
 8001b68:	0d0c      	lsrs	r4, r1, #20
 8001b6a:	4a7e      	ldr	r2, [pc, #504]	; (8001d64 <__aeabi_dsub+0x34c>)
 8001b6c:	0524      	lsls	r4, r4, #20
 8001b6e:	431c      	orrs	r4, r3
 8001b70:	4014      	ands	r4, r2
 8001b72:	0533      	lsls	r3, r6, #20
 8001b74:	4323      	orrs	r3, r4
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	432b      	orrs	r3, r5
 8001b7e:	0038      	movs	r0, r7
 8001b80:	0019      	movs	r1, r3
 8001b82:	bc1c      	pop	{r2, r3, r4}
 8001b84:	4690      	mov	r8, r2
 8001b86:	4699      	mov	r9, r3
 8001b88:	46a2      	mov	sl, r4
 8001b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8c:	2501      	movs	r5, #1
 8001b8e:	4643      	mov	r3, r8
 8001b90:	0762      	lsls	r2, r4, #29
 8001b92:	08ff      	lsrs	r7, r7, #3
 8001b94:	4317      	orrs	r7, r2
 8001b96:	08e4      	lsrs	r4, r4, #3
 8001b98:	401d      	ands	r5, r3
 8001b9a:	4b70      	ldr	r3, [pc, #448]	; (8001d5c <__aeabi_dsub+0x344>)
 8001b9c:	429e      	cmp	r6, r3
 8001b9e:	d036      	beq.n	8001c0e <__aeabi_dsub+0x1f6>
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	0576      	lsls	r6, r6, #21
 8001ba4:	0b24      	lsrs	r4, r4, #12
 8001ba6:	0d76      	lsrs	r6, r6, #21
 8001ba8:	e7db      	b.n	8001b62 <__aeabi_dsub+0x14a>
 8001baa:	4663      	mov	r3, ip
 8001bac:	1af3      	subs	r3, r6, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x19c>
 8001bb2:	e094      	b.n	8001cde <__aeabi_dsub+0x2c6>
 8001bb4:	4660      	mov	r0, ip
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d035      	beq.n	8001c26 <__aeabi_dsub+0x20e>
 8001bba:	4868      	ldr	r0, [pc, #416]	; (8001d5c <__aeabi_dsub+0x344>)
 8001bbc:	4286      	cmp	r6, r0
 8001bbe:	d0b1      	beq.n	8001b24 <__aeabi_dsub+0x10c>
 8001bc0:	2780      	movs	r7, #128	; 0x80
 8001bc2:	043f      	lsls	r7, r7, #16
 8001bc4:	4339      	orrs	r1, r7
 8001bc6:	2b38      	cmp	r3, #56	; 0x38
 8001bc8:	dc00      	bgt.n	8001bcc <__aeabi_dsub+0x1b4>
 8001bca:	e0fd      	b.n	8001dc8 <__aeabi_dsub+0x3b0>
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	0017      	movs	r7, r2
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	1e7a      	subs	r2, r7, #1
 8001bd4:	4197      	sbcs	r7, r2
 8001bd6:	4457      	add	r7, sl
 8001bd8:	4557      	cmp	r7, sl
 8001bda:	4180      	sbcs	r0, r0
 8001bdc:	1909      	adds	r1, r1, r4
 8001bde:	4244      	negs	r4, r0
 8001be0:	190c      	adds	r4, r1, r4
 8001be2:	0223      	lsls	r3, r4, #8
 8001be4:	d53a      	bpl.n	8001c5c <__aeabi_dsub+0x244>
 8001be6:	4b5d      	ldr	r3, [pc, #372]	; (8001d5c <__aeabi_dsub+0x344>)
 8001be8:	3601      	adds	r6, #1
 8001bea:	429e      	cmp	r6, r3
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dsub+0x1d8>
 8001bee:	e14b      	b.n	8001e88 <__aeabi_dsub+0x470>
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <__aeabi_dsub+0x348>)
 8001bf4:	401c      	ands	r4, r3
 8001bf6:	087b      	lsrs	r3, r7, #1
 8001bf8:	4017      	ands	r7, r2
 8001bfa:	431f      	orrs	r7, r3
 8001bfc:	07e2      	lsls	r2, r4, #31
 8001bfe:	4317      	orrs	r7, r2
 8001c00:	0864      	lsrs	r4, r4, #1
 8001c02:	e78f      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001c04:	0008      	movs	r0, r1
 8001c06:	4310      	orrs	r0, r2
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dsub+0x1f4>
 8001c0a:	e724      	b.n	8001a56 <__aeabi_dsub+0x3e>
 8001c0c:	e721      	b.n	8001a52 <__aeabi_dsub+0x3a>
 8001c0e:	0023      	movs	r3, r4
 8001c10:	433b      	orrs	r3, r7
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x1fe>
 8001c14:	e1b9      	b.n	8001f8a <__aeabi_dsub+0x572>
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	0312      	lsls	r2, r2, #12
 8001c1a:	4314      	orrs	r4, r2
 8001c1c:	0324      	lsls	r4, r4, #12
 8001c1e:	0b24      	lsrs	r4, r4, #12
 8001c20:	e79f      	b.n	8001b62 <__aeabi_dsub+0x14a>
 8001c22:	002e      	movs	r6, r5
 8001c24:	e77e      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001c26:	0008      	movs	r0, r1
 8001c28:	4310      	orrs	r0, r2
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x216>
 8001c2c:	e0ca      	b.n	8001dc4 <__aeabi_dsub+0x3ac>
 8001c2e:	1e58      	subs	r0, r3, #1
 8001c30:	4684      	mov	ip, r0
 8001c32:	2800      	cmp	r0, #0
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x220>
 8001c36:	e0e7      	b.n	8001e08 <__aeabi_dsub+0x3f0>
 8001c38:	4452      	add	r2, sl
 8001c3a:	4552      	cmp	r2, sl
 8001c3c:	4180      	sbcs	r0, r0
 8001c3e:	1864      	adds	r4, r4, r1
 8001c40:	4240      	negs	r0, r0
 8001c42:	1824      	adds	r4, r4, r0
 8001c44:	0017      	movs	r7, r2
 8001c46:	2601      	movs	r6, #1
 8001c48:	0223      	lsls	r3, r4, #8
 8001c4a:	d507      	bpl.n	8001c5c <__aeabi_dsub+0x244>
 8001c4c:	2602      	movs	r6, #2
 8001c4e:	e7cf      	b.n	8001bf0 <__aeabi_dsub+0x1d8>
 8001c50:	4664      	mov	r4, ip
 8001c52:	432c      	orrs	r4, r5
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x240>
 8001c56:	e1b3      	b.n	8001fc0 <__aeabi_dsub+0x5a8>
 8001c58:	002c      	movs	r4, r5
 8001c5a:	4667      	mov	r7, ip
 8001c5c:	077b      	lsls	r3, r7, #29
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x24a>
 8001c60:	e762      	b.n	8001b28 <__aeabi_dsub+0x110>
 8001c62:	0763      	lsls	r3, r4, #29
 8001c64:	08ff      	lsrs	r7, r7, #3
 8001c66:	431f      	orrs	r7, r3
 8001c68:	2501      	movs	r5, #1
 8001c6a:	4643      	mov	r3, r8
 8001c6c:	08e4      	lsrs	r4, r4, #3
 8001c6e:	401d      	ands	r5, r3
 8001c70:	e793      	b.n	8001b9a <__aeabi_dsub+0x182>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d178      	bne.n	8001d68 <__aeabi_dsub+0x350>
 8001c76:	1c75      	adds	r5, r6, #1
 8001c78:	056d      	lsls	r5, r5, #21
 8001c7a:	0d6d      	lsrs	r5, r5, #21
 8001c7c:	2d01      	cmp	r5, #1
 8001c7e:	dc00      	bgt.n	8001c82 <__aeabi_dsub+0x26a>
 8001c80:	e0f2      	b.n	8001e68 <__aeabi_dsub+0x450>
 8001c82:	4650      	mov	r0, sl
 8001c84:	1a80      	subs	r0, r0, r2
 8001c86:	4582      	cmp	sl, r0
 8001c88:	41bf      	sbcs	r7, r7
 8001c8a:	1a65      	subs	r5, r4, r1
 8001c8c:	427f      	negs	r7, r7
 8001c8e:	1bed      	subs	r5, r5, r7
 8001c90:	4684      	mov	ip, r0
 8001c92:	0228      	lsls	r0, r5, #8
 8001c94:	d400      	bmi.n	8001c98 <__aeabi_dsub+0x280>
 8001c96:	e08c      	b.n	8001db2 <__aeabi_dsub+0x39a>
 8001c98:	4650      	mov	r0, sl
 8001c9a:	1a17      	subs	r7, r2, r0
 8001c9c:	42ba      	cmp	r2, r7
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	1b0c      	subs	r4, r1, r4
 8001ca2:	4255      	negs	r5, r2
 8001ca4:	1b65      	subs	r5, r4, r5
 8001ca6:	4698      	mov	r8, r3
 8001ca8:	e714      	b.n	8001ad4 <__aeabi_dsub+0xbc>
 8001caa:	2501      	movs	r5, #1
 8001cac:	4643      	mov	r3, r8
 8001cae:	2400      	movs	r4, #0
 8001cb0:	401d      	ands	r5, r3
 8001cb2:	2700      	movs	r7, #0
 8001cb4:	e755      	b.n	8001b62 <__aeabi_dsub+0x14a>
 8001cb6:	4c2a      	ldr	r4, [pc, #168]	; (8001d60 <__aeabi_dsub+0x348>)
 8001cb8:	1af6      	subs	r6, r6, r3
 8001cba:	402c      	ands	r4, r5
 8001cbc:	e732      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001cbe:	003d      	movs	r5, r7
 8001cc0:	3828      	subs	r0, #40	; 0x28
 8001cc2:	4085      	lsls	r5, r0
 8001cc4:	2700      	movs	r7, #0
 8001cc6:	e717      	b.n	8001af8 <__aeabi_dsub+0xe0>
 8001cc8:	0038      	movs	r0, r7
 8001cca:	f000 fa89 	bl	80021e0 <__clzsi2>
 8001cce:	3020      	adds	r0, #32
 8001cd0:	e706      	b.n	8001ae0 <__aeabi_dsub+0xc8>
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	0017      	movs	r7, r2
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	1e7a      	subs	r2, r7, #1
 8001cda:	4197      	sbcs	r7, r2
 8001cdc:	e6ee      	b.n	8001abc <__aeabi_dsub+0xa4>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d000      	beq.n	8001ce4 <__aeabi_dsub+0x2cc>
 8001ce2:	e0e5      	b.n	8001eb0 <__aeabi_dsub+0x498>
 8001ce4:	1c73      	adds	r3, r6, #1
 8001ce6:	469c      	mov	ip, r3
 8001ce8:	055b      	lsls	r3, r3, #21
 8001cea:	0d5b      	lsrs	r3, r3, #21
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	dc00      	bgt.n	8001cf2 <__aeabi_dsub+0x2da>
 8001cf0:	e09f      	b.n	8001e32 <__aeabi_dsub+0x41a>
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <__aeabi_dsub+0x344>)
 8001cf4:	459c      	cmp	ip, r3
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dsub+0x2e2>
 8001cf8:	e0c5      	b.n	8001e86 <__aeabi_dsub+0x46e>
 8001cfa:	4452      	add	r2, sl
 8001cfc:	4552      	cmp	r2, sl
 8001cfe:	4180      	sbcs	r0, r0
 8001d00:	1864      	adds	r4, r4, r1
 8001d02:	4240      	negs	r0, r0
 8001d04:	1824      	adds	r4, r4, r0
 8001d06:	07e7      	lsls	r7, r4, #31
 8001d08:	0852      	lsrs	r2, r2, #1
 8001d0a:	4317      	orrs	r7, r2
 8001d0c:	0864      	lsrs	r4, r4, #1
 8001d0e:	4666      	mov	r6, ip
 8001d10:	e708      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001d12:	4812      	ldr	r0, [pc, #72]	; (8001d5c <__aeabi_dsub+0x344>)
 8001d14:	4285      	cmp	r5, r0
 8001d16:	d100      	bne.n	8001d1a <__aeabi_dsub+0x302>
 8001d18:	e085      	b.n	8001e26 <__aeabi_dsub+0x40e>
 8001d1a:	001d      	movs	r5, r3
 8001d1c:	e6bc      	b.n	8001a98 <__aeabi_dsub+0x80>
 8001d1e:	0029      	movs	r1, r5
 8001d20:	3e1f      	subs	r6, #31
 8001d22:	40f1      	lsrs	r1, r6
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d100      	bne.n	8001d2a <__aeabi_dsub+0x312>
 8001d28:	e07f      	b.n	8001e2a <__aeabi_dsub+0x412>
 8001d2a:	2240      	movs	r2, #64	; 0x40
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	409d      	lsls	r5, r3
 8001d30:	432f      	orrs	r7, r5
 8001d32:	1e7d      	subs	r5, r7, #1
 8001d34:	41af      	sbcs	r7, r5
 8001d36:	2400      	movs	r4, #0
 8001d38:	430f      	orrs	r7, r1
 8001d3a:	2600      	movs	r6, #0
 8001d3c:	e78e      	b.n	8001c5c <__aeabi_dsub+0x244>
 8001d3e:	002b      	movs	r3, r5
 8001d40:	000f      	movs	r7, r1
 8001d42:	3b20      	subs	r3, #32
 8001d44:	40df      	lsrs	r7, r3
 8001d46:	2d20      	cmp	r5, #32
 8001d48:	d071      	beq.n	8001e2e <__aeabi_dsub+0x416>
 8001d4a:	2340      	movs	r3, #64	; 0x40
 8001d4c:	1b5d      	subs	r5, r3, r5
 8001d4e:	40a9      	lsls	r1, r5
 8001d50:	430a      	orrs	r2, r1
 8001d52:	1e51      	subs	r1, r2, #1
 8001d54:	418a      	sbcs	r2, r1
 8001d56:	2100      	movs	r1, #0
 8001d58:	4317      	orrs	r7, r2
 8001d5a:	e6af      	b.n	8001abc <__aeabi_dsub+0xa4>
 8001d5c:	000007ff 	.word	0x000007ff
 8001d60:	ff7fffff 	.word	0xff7fffff
 8001d64:	800fffff 	.word	0x800fffff
 8001d68:	2e00      	cmp	r6, #0
 8001d6a:	d03e      	beq.n	8001dea <__aeabi_dsub+0x3d2>
 8001d6c:	4eb3      	ldr	r6, [pc, #716]	; (800203c <__aeabi_dsub+0x624>)
 8001d6e:	45b4      	cmp	ip, r6
 8001d70:	d045      	beq.n	8001dfe <__aeabi_dsub+0x3e6>
 8001d72:	2680      	movs	r6, #128	; 0x80
 8001d74:	0436      	lsls	r6, r6, #16
 8001d76:	426d      	negs	r5, r5
 8001d78:	4334      	orrs	r4, r6
 8001d7a:	2d38      	cmp	r5, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x368>
 8001d7e:	e0a8      	b.n	8001ed2 <__aeabi_dsub+0x4ba>
 8001d80:	2d1f      	cmp	r5, #31
 8001d82:	dd00      	ble.n	8001d86 <__aeabi_dsub+0x36e>
 8001d84:	e11f      	b.n	8001fc6 <__aeabi_dsub+0x5ae>
 8001d86:	2620      	movs	r6, #32
 8001d88:	0027      	movs	r7, r4
 8001d8a:	4650      	mov	r0, sl
 8001d8c:	1b76      	subs	r6, r6, r5
 8001d8e:	40b7      	lsls	r7, r6
 8001d90:	40e8      	lsrs	r0, r5
 8001d92:	4307      	orrs	r7, r0
 8001d94:	4650      	mov	r0, sl
 8001d96:	40b0      	lsls	r0, r6
 8001d98:	1e46      	subs	r6, r0, #1
 8001d9a:	41b0      	sbcs	r0, r6
 8001d9c:	40ec      	lsrs	r4, r5
 8001d9e:	4338      	orrs	r0, r7
 8001da0:	1a17      	subs	r7, r2, r0
 8001da2:	42ba      	cmp	r2, r7
 8001da4:	4192      	sbcs	r2, r2
 8001da6:	1b0c      	subs	r4, r1, r4
 8001da8:	4252      	negs	r2, r2
 8001daa:	1aa4      	subs	r4, r4, r2
 8001dac:	4666      	mov	r6, ip
 8001dae:	4698      	mov	r8, r3
 8001db0:	e68b      	b.n	8001aca <__aeabi_dsub+0xb2>
 8001db2:	4664      	mov	r4, ip
 8001db4:	4667      	mov	r7, ip
 8001db6:	432c      	orrs	r4, r5
 8001db8:	d000      	beq.n	8001dbc <__aeabi_dsub+0x3a4>
 8001dba:	e68b      	b.n	8001ad4 <__aeabi_dsub+0xbc>
 8001dbc:	2500      	movs	r5, #0
 8001dbe:	2600      	movs	r6, #0
 8001dc0:	2700      	movs	r7, #0
 8001dc2:	e6ea      	b.n	8001b9a <__aeabi_dsub+0x182>
 8001dc4:	001e      	movs	r6, r3
 8001dc6:	e6ad      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001dc8:	2b1f      	cmp	r3, #31
 8001dca:	dc60      	bgt.n	8001e8e <__aeabi_dsub+0x476>
 8001dcc:	2720      	movs	r7, #32
 8001dce:	1af8      	subs	r0, r7, r3
 8001dd0:	000f      	movs	r7, r1
 8001dd2:	4684      	mov	ip, r0
 8001dd4:	4087      	lsls	r7, r0
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	40d8      	lsrs	r0, r3
 8001dda:	4307      	orrs	r7, r0
 8001ddc:	4660      	mov	r0, ip
 8001dde:	4082      	lsls	r2, r0
 8001de0:	1e50      	subs	r0, r2, #1
 8001de2:	4182      	sbcs	r2, r0
 8001de4:	40d9      	lsrs	r1, r3
 8001de6:	4317      	orrs	r7, r2
 8001de8:	e6f5      	b.n	8001bd6 <__aeabi_dsub+0x1be>
 8001dea:	0026      	movs	r6, r4
 8001dec:	4650      	mov	r0, sl
 8001dee:	4306      	orrs	r6, r0
 8001df0:	d005      	beq.n	8001dfe <__aeabi_dsub+0x3e6>
 8001df2:	43ed      	mvns	r5, r5
 8001df4:	2d00      	cmp	r5, #0
 8001df6:	d0d3      	beq.n	8001da0 <__aeabi_dsub+0x388>
 8001df8:	4e90      	ldr	r6, [pc, #576]	; (800203c <__aeabi_dsub+0x624>)
 8001dfa:	45b4      	cmp	ip, r6
 8001dfc:	d1bd      	bne.n	8001d7a <__aeabi_dsub+0x362>
 8001dfe:	000c      	movs	r4, r1
 8001e00:	0017      	movs	r7, r2
 8001e02:	4666      	mov	r6, ip
 8001e04:	4698      	mov	r8, r3
 8001e06:	e68d      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001e08:	488c      	ldr	r0, [pc, #560]	; (800203c <__aeabi_dsub+0x624>)
 8001e0a:	4283      	cmp	r3, r0
 8001e0c:	d00b      	beq.n	8001e26 <__aeabi_dsub+0x40e>
 8001e0e:	4663      	mov	r3, ip
 8001e10:	e6d9      	b.n	8001bc6 <__aeabi_dsub+0x1ae>
 8001e12:	2d00      	cmp	r5, #0
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x400>
 8001e16:	e096      	b.n	8001f46 <__aeabi_dsub+0x52e>
 8001e18:	0008      	movs	r0, r1
 8001e1a:	4310      	orrs	r0, r2
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x408>
 8001e1e:	e0e2      	b.n	8001fe6 <__aeabi_dsub+0x5ce>
 8001e20:	000c      	movs	r4, r1
 8001e22:	0017      	movs	r7, r2
 8001e24:	4698      	mov	r8, r3
 8001e26:	4e85      	ldr	r6, [pc, #532]	; (800203c <__aeabi_dsub+0x624>)
 8001e28:	e67c      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001e2a:	2500      	movs	r5, #0
 8001e2c:	e780      	b.n	8001d30 <__aeabi_dsub+0x318>
 8001e2e:	2100      	movs	r1, #0
 8001e30:	e78e      	b.n	8001d50 <__aeabi_dsub+0x338>
 8001e32:	0023      	movs	r3, r4
 8001e34:	4650      	mov	r0, sl
 8001e36:	4303      	orrs	r3, r0
 8001e38:	2e00      	cmp	r6, #0
 8001e3a:	d000      	beq.n	8001e3e <__aeabi_dsub+0x426>
 8001e3c:	e0a8      	b.n	8001f90 <__aeabi_dsub+0x578>
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x42c>
 8001e42:	e0de      	b.n	8002002 <__aeabi_dsub+0x5ea>
 8001e44:	000b      	movs	r3, r1
 8001e46:	4313      	orrs	r3, r2
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x434>
 8001e4a:	e66b      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001e4c:	4452      	add	r2, sl
 8001e4e:	4552      	cmp	r2, sl
 8001e50:	4180      	sbcs	r0, r0
 8001e52:	1864      	adds	r4, r4, r1
 8001e54:	4240      	negs	r0, r0
 8001e56:	1824      	adds	r4, r4, r0
 8001e58:	0017      	movs	r7, r2
 8001e5a:	0223      	lsls	r3, r4, #8
 8001e5c:	d400      	bmi.n	8001e60 <__aeabi_dsub+0x448>
 8001e5e:	e6fd      	b.n	8001c5c <__aeabi_dsub+0x244>
 8001e60:	4b77      	ldr	r3, [pc, #476]	; (8002040 <__aeabi_dsub+0x628>)
 8001e62:	4666      	mov	r6, ip
 8001e64:	401c      	ands	r4, r3
 8001e66:	e65d      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001e68:	0025      	movs	r5, r4
 8001e6a:	4650      	mov	r0, sl
 8001e6c:	4305      	orrs	r5, r0
 8001e6e:	2e00      	cmp	r6, #0
 8001e70:	d1cf      	bne.n	8001e12 <__aeabi_dsub+0x3fa>
 8001e72:	2d00      	cmp	r5, #0
 8001e74:	d14f      	bne.n	8001f16 <__aeabi_dsub+0x4fe>
 8001e76:	000c      	movs	r4, r1
 8001e78:	4314      	orrs	r4, r2
 8001e7a:	d100      	bne.n	8001e7e <__aeabi_dsub+0x466>
 8001e7c:	e0a0      	b.n	8001fc0 <__aeabi_dsub+0x5a8>
 8001e7e:	000c      	movs	r4, r1
 8001e80:	0017      	movs	r7, r2
 8001e82:	4698      	mov	r8, r3
 8001e84:	e64e      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001e86:	4666      	mov	r6, ip
 8001e88:	2400      	movs	r4, #0
 8001e8a:	2700      	movs	r7, #0
 8001e8c:	e685      	b.n	8001b9a <__aeabi_dsub+0x182>
 8001e8e:	001f      	movs	r7, r3
 8001e90:	0008      	movs	r0, r1
 8001e92:	3f20      	subs	r7, #32
 8001e94:	40f8      	lsrs	r0, r7
 8001e96:	0007      	movs	r7, r0
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_dsub+0x486>
 8001e9c:	e08e      	b.n	8001fbc <__aeabi_dsub+0x5a4>
 8001e9e:	2040      	movs	r0, #64	; 0x40
 8001ea0:	1ac3      	subs	r3, r0, r3
 8001ea2:	4099      	lsls	r1, r3
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	1e51      	subs	r1, r2, #1
 8001ea8:	418a      	sbcs	r2, r1
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4317      	orrs	r7, r2
 8001eae:	e692      	b.n	8001bd6 <__aeabi_dsub+0x1be>
 8001eb0:	2e00      	cmp	r6, #0
 8001eb2:	d114      	bne.n	8001ede <__aeabi_dsub+0x4c6>
 8001eb4:	0026      	movs	r6, r4
 8001eb6:	4650      	mov	r0, sl
 8001eb8:	4306      	orrs	r6, r0
 8001eba:	d062      	beq.n	8001f82 <__aeabi_dsub+0x56a>
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d15c      	bne.n	8001f7c <__aeabi_dsub+0x564>
 8001ec2:	1887      	adds	r7, r0, r2
 8001ec4:	4297      	cmp	r7, r2
 8001ec6:	4192      	sbcs	r2, r2
 8001ec8:	1864      	adds	r4, r4, r1
 8001eca:	4252      	negs	r2, r2
 8001ecc:	18a4      	adds	r4, r4, r2
 8001ece:	4666      	mov	r6, ip
 8001ed0:	e687      	b.n	8001be2 <__aeabi_dsub+0x1ca>
 8001ed2:	4650      	mov	r0, sl
 8001ed4:	4320      	orrs	r0, r4
 8001ed6:	1e44      	subs	r4, r0, #1
 8001ed8:	41a0      	sbcs	r0, r4
 8001eda:	2400      	movs	r4, #0
 8001edc:	e760      	b.n	8001da0 <__aeabi_dsub+0x388>
 8001ede:	4e57      	ldr	r6, [pc, #348]	; (800203c <__aeabi_dsub+0x624>)
 8001ee0:	45b4      	cmp	ip, r6
 8001ee2:	d04e      	beq.n	8001f82 <__aeabi_dsub+0x56a>
 8001ee4:	2680      	movs	r6, #128	; 0x80
 8001ee6:	0436      	lsls	r6, r6, #16
 8001ee8:	425b      	negs	r3, r3
 8001eea:	4334      	orrs	r4, r6
 8001eec:	2b38      	cmp	r3, #56	; 0x38
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dsub+0x4da>
 8001ef0:	e07f      	b.n	8001ff2 <__aeabi_dsub+0x5da>
 8001ef2:	2b1f      	cmp	r3, #31
 8001ef4:	dd00      	ble.n	8001ef8 <__aeabi_dsub+0x4e0>
 8001ef6:	e08b      	b.n	8002010 <__aeabi_dsub+0x5f8>
 8001ef8:	2620      	movs	r6, #32
 8001efa:	0027      	movs	r7, r4
 8001efc:	4650      	mov	r0, sl
 8001efe:	1af6      	subs	r6, r6, r3
 8001f00:	40b7      	lsls	r7, r6
 8001f02:	40d8      	lsrs	r0, r3
 8001f04:	4307      	orrs	r7, r0
 8001f06:	4650      	mov	r0, sl
 8001f08:	40b0      	lsls	r0, r6
 8001f0a:	1e46      	subs	r6, r0, #1
 8001f0c:	41b0      	sbcs	r0, r6
 8001f0e:	4307      	orrs	r7, r0
 8001f10:	40dc      	lsrs	r4, r3
 8001f12:	18bf      	adds	r7, r7, r2
 8001f14:	e7d6      	b.n	8001ec4 <__aeabi_dsub+0x4ac>
 8001f16:	000d      	movs	r5, r1
 8001f18:	4315      	orrs	r5, r2
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dsub+0x506>
 8001f1c:	e602      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001f1e:	4650      	mov	r0, sl
 8001f20:	1a80      	subs	r0, r0, r2
 8001f22:	4582      	cmp	sl, r0
 8001f24:	41bf      	sbcs	r7, r7
 8001f26:	1a65      	subs	r5, r4, r1
 8001f28:	427f      	negs	r7, r7
 8001f2a:	1bed      	subs	r5, r5, r7
 8001f2c:	4684      	mov	ip, r0
 8001f2e:	0228      	lsls	r0, r5, #8
 8001f30:	d400      	bmi.n	8001f34 <__aeabi_dsub+0x51c>
 8001f32:	e68d      	b.n	8001c50 <__aeabi_dsub+0x238>
 8001f34:	4650      	mov	r0, sl
 8001f36:	1a17      	subs	r7, r2, r0
 8001f38:	42ba      	cmp	r2, r7
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	1b0c      	subs	r4, r1, r4
 8001f3e:	4252      	negs	r2, r2
 8001f40:	1aa4      	subs	r4, r4, r2
 8001f42:	4698      	mov	r8, r3
 8001f44:	e5ee      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001f46:	000d      	movs	r5, r1
 8001f48:	4315      	orrs	r5, r2
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dsub+0x536>
 8001f4c:	e76b      	b.n	8001e26 <__aeabi_dsub+0x40e>
 8001f4e:	4650      	mov	r0, sl
 8001f50:	0767      	lsls	r7, r4, #29
 8001f52:	08c0      	lsrs	r0, r0, #3
 8001f54:	4307      	orrs	r7, r0
 8001f56:	2080      	movs	r0, #128	; 0x80
 8001f58:	08e4      	lsrs	r4, r4, #3
 8001f5a:	0300      	lsls	r0, r0, #12
 8001f5c:	4204      	tst	r4, r0
 8001f5e:	d007      	beq.n	8001f70 <__aeabi_dsub+0x558>
 8001f60:	08cd      	lsrs	r5, r1, #3
 8001f62:	4205      	tst	r5, r0
 8001f64:	d104      	bne.n	8001f70 <__aeabi_dsub+0x558>
 8001f66:	002c      	movs	r4, r5
 8001f68:	4698      	mov	r8, r3
 8001f6a:	08d7      	lsrs	r7, r2, #3
 8001f6c:	0749      	lsls	r1, r1, #29
 8001f6e:	430f      	orrs	r7, r1
 8001f70:	0f7b      	lsrs	r3, r7, #29
 8001f72:	00e4      	lsls	r4, r4, #3
 8001f74:	431c      	orrs	r4, r3
 8001f76:	00ff      	lsls	r7, r7, #3
 8001f78:	4e30      	ldr	r6, [pc, #192]	; (800203c <__aeabi_dsub+0x624>)
 8001f7a:	e5d3      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001f7c:	4e2f      	ldr	r6, [pc, #188]	; (800203c <__aeabi_dsub+0x624>)
 8001f7e:	45b4      	cmp	ip, r6
 8001f80:	d1b4      	bne.n	8001eec <__aeabi_dsub+0x4d4>
 8001f82:	000c      	movs	r4, r1
 8001f84:	0017      	movs	r7, r2
 8001f86:	4666      	mov	r6, ip
 8001f88:	e5cc      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8001f8a:	2700      	movs	r7, #0
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	e5e8      	b.n	8001b62 <__aeabi_dsub+0x14a>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d039      	beq.n	8002008 <__aeabi_dsub+0x5f0>
 8001f94:	000b      	movs	r3, r1
 8001f96:	4313      	orrs	r3, r2
 8001f98:	d100      	bne.n	8001f9c <__aeabi_dsub+0x584>
 8001f9a:	e744      	b.n	8001e26 <__aeabi_dsub+0x40e>
 8001f9c:	08c0      	lsrs	r0, r0, #3
 8001f9e:	0767      	lsls	r7, r4, #29
 8001fa0:	4307      	orrs	r7, r0
 8001fa2:	2080      	movs	r0, #128	; 0x80
 8001fa4:	08e4      	lsrs	r4, r4, #3
 8001fa6:	0300      	lsls	r0, r0, #12
 8001fa8:	4204      	tst	r4, r0
 8001faa:	d0e1      	beq.n	8001f70 <__aeabi_dsub+0x558>
 8001fac:	08cb      	lsrs	r3, r1, #3
 8001fae:	4203      	tst	r3, r0
 8001fb0:	d1de      	bne.n	8001f70 <__aeabi_dsub+0x558>
 8001fb2:	08d7      	lsrs	r7, r2, #3
 8001fb4:	0749      	lsls	r1, r1, #29
 8001fb6:	430f      	orrs	r7, r1
 8001fb8:	001c      	movs	r4, r3
 8001fba:	e7d9      	b.n	8001f70 <__aeabi_dsub+0x558>
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	e771      	b.n	8001ea4 <__aeabi_dsub+0x48c>
 8001fc0:	2500      	movs	r5, #0
 8001fc2:	2700      	movs	r7, #0
 8001fc4:	e5e9      	b.n	8001b9a <__aeabi_dsub+0x182>
 8001fc6:	002e      	movs	r6, r5
 8001fc8:	0027      	movs	r7, r4
 8001fca:	3e20      	subs	r6, #32
 8001fcc:	40f7      	lsrs	r7, r6
 8001fce:	2d20      	cmp	r5, #32
 8001fd0:	d02f      	beq.n	8002032 <__aeabi_dsub+0x61a>
 8001fd2:	2640      	movs	r6, #64	; 0x40
 8001fd4:	1b75      	subs	r5, r6, r5
 8001fd6:	40ac      	lsls	r4, r5
 8001fd8:	4650      	mov	r0, sl
 8001fda:	4320      	orrs	r0, r4
 8001fdc:	1e44      	subs	r4, r0, #1
 8001fde:	41a0      	sbcs	r0, r4
 8001fe0:	2400      	movs	r4, #0
 8001fe2:	4338      	orrs	r0, r7
 8001fe4:	e6dc      	b.n	8001da0 <__aeabi_dsub+0x388>
 8001fe6:	2480      	movs	r4, #128	; 0x80
 8001fe8:	2500      	movs	r5, #0
 8001fea:	0324      	lsls	r4, r4, #12
 8001fec:	4e13      	ldr	r6, [pc, #76]	; (800203c <__aeabi_dsub+0x624>)
 8001fee:	2700      	movs	r7, #0
 8001ff0:	e5d3      	b.n	8001b9a <__aeabi_dsub+0x182>
 8001ff2:	4650      	mov	r0, sl
 8001ff4:	4320      	orrs	r0, r4
 8001ff6:	0007      	movs	r7, r0
 8001ff8:	1e78      	subs	r0, r7, #1
 8001ffa:	4187      	sbcs	r7, r0
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	18bf      	adds	r7, r7, r2
 8002000:	e760      	b.n	8001ec4 <__aeabi_dsub+0x4ac>
 8002002:	000c      	movs	r4, r1
 8002004:	0017      	movs	r7, r2
 8002006:	e58d      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8002008:	000c      	movs	r4, r1
 800200a:	0017      	movs	r7, r2
 800200c:	4e0b      	ldr	r6, [pc, #44]	; (800203c <__aeabi_dsub+0x624>)
 800200e:	e589      	b.n	8001b24 <__aeabi_dsub+0x10c>
 8002010:	001e      	movs	r6, r3
 8002012:	0027      	movs	r7, r4
 8002014:	3e20      	subs	r6, #32
 8002016:	40f7      	lsrs	r7, r6
 8002018:	2b20      	cmp	r3, #32
 800201a:	d00c      	beq.n	8002036 <__aeabi_dsub+0x61e>
 800201c:	2640      	movs	r6, #64	; 0x40
 800201e:	1af3      	subs	r3, r6, r3
 8002020:	409c      	lsls	r4, r3
 8002022:	4650      	mov	r0, sl
 8002024:	4320      	orrs	r0, r4
 8002026:	1e44      	subs	r4, r0, #1
 8002028:	41a0      	sbcs	r0, r4
 800202a:	4307      	orrs	r7, r0
 800202c:	2400      	movs	r4, #0
 800202e:	18bf      	adds	r7, r7, r2
 8002030:	e748      	b.n	8001ec4 <__aeabi_dsub+0x4ac>
 8002032:	2400      	movs	r4, #0
 8002034:	e7d0      	b.n	8001fd8 <__aeabi_dsub+0x5c0>
 8002036:	2400      	movs	r4, #0
 8002038:	e7f3      	b.n	8002022 <__aeabi_dsub+0x60a>
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	000007ff 	.word	0x000007ff
 8002040:	ff7fffff 	.word	0xff7fffff

08002044 <__aeabi_dcmpun>:
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	4e0e      	ldr	r6, [pc, #56]	; (8002080 <__aeabi_dcmpun+0x3c>)
 8002048:	030d      	lsls	r5, r1, #12
 800204a:	031c      	lsls	r4, r3, #12
 800204c:	0049      	lsls	r1, r1, #1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	0b2d      	lsrs	r5, r5, #12
 8002052:	0d49      	lsrs	r1, r1, #21
 8002054:	0b24      	lsrs	r4, r4, #12
 8002056:	0d5b      	lsrs	r3, r3, #21
 8002058:	42b1      	cmp	r1, r6
 800205a:	d004      	beq.n	8002066 <__aeabi_dcmpun+0x22>
 800205c:	4908      	ldr	r1, [pc, #32]	; (8002080 <__aeabi_dcmpun+0x3c>)
 800205e:	2000      	movs	r0, #0
 8002060:	428b      	cmp	r3, r1
 8002062:	d008      	beq.n	8002076 <__aeabi_dcmpun+0x32>
 8002064:	bd70      	pop	{r4, r5, r6, pc}
 8002066:	4305      	orrs	r5, r0
 8002068:	2001      	movs	r0, #1
 800206a:	2d00      	cmp	r5, #0
 800206c:	d1fa      	bne.n	8002064 <__aeabi_dcmpun+0x20>
 800206e:	4904      	ldr	r1, [pc, #16]	; (8002080 <__aeabi_dcmpun+0x3c>)
 8002070:	2000      	movs	r0, #0
 8002072:	428b      	cmp	r3, r1
 8002074:	d1f6      	bne.n	8002064 <__aeabi_dcmpun+0x20>
 8002076:	4314      	orrs	r4, r2
 8002078:	0020      	movs	r0, r4
 800207a:	1e44      	subs	r4, r0, #1
 800207c:	41a0      	sbcs	r0, r4
 800207e:	e7f1      	b.n	8002064 <__aeabi_dcmpun+0x20>
 8002080:	000007ff 	.word	0x000007ff

08002084 <__aeabi_d2iz>:
 8002084:	b530      	push	{r4, r5, lr}
 8002086:	4d13      	ldr	r5, [pc, #76]	; (80020d4 <__aeabi_d2iz+0x50>)
 8002088:	030a      	lsls	r2, r1, #12
 800208a:	004b      	lsls	r3, r1, #1
 800208c:	0b12      	lsrs	r2, r2, #12
 800208e:	0d5b      	lsrs	r3, r3, #21
 8002090:	0fc9      	lsrs	r1, r1, #31
 8002092:	2400      	movs	r4, #0
 8002094:	42ab      	cmp	r3, r5
 8002096:	dd10      	ble.n	80020ba <__aeabi_d2iz+0x36>
 8002098:	4c0f      	ldr	r4, [pc, #60]	; (80020d8 <__aeabi_d2iz+0x54>)
 800209a:	42a3      	cmp	r3, r4
 800209c:	dc0f      	bgt.n	80020be <__aeabi_d2iz+0x3a>
 800209e:	2480      	movs	r4, #128	; 0x80
 80020a0:	4d0e      	ldr	r5, [pc, #56]	; (80020dc <__aeabi_d2iz+0x58>)
 80020a2:	0364      	lsls	r4, r4, #13
 80020a4:	4322      	orrs	r2, r4
 80020a6:	1aed      	subs	r5, r5, r3
 80020a8:	2d1f      	cmp	r5, #31
 80020aa:	dd0b      	ble.n	80020c4 <__aeabi_d2iz+0x40>
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <__aeabi_d2iz+0x5c>)
 80020ae:	1ac3      	subs	r3, r0, r3
 80020b0:	40da      	lsrs	r2, r3
 80020b2:	4254      	negs	r4, r2
 80020b4:	2900      	cmp	r1, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_d2iz+0x36>
 80020b8:	0014      	movs	r4, r2
 80020ba:	0020      	movs	r0, r4
 80020bc:	bd30      	pop	{r4, r5, pc}
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <__aeabi_d2iz+0x60>)
 80020c0:	18cc      	adds	r4, r1, r3
 80020c2:	e7fa      	b.n	80020ba <__aeabi_d2iz+0x36>
 80020c4:	4c08      	ldr	r4, [pc, #32]	; (80020e8 <__aeabi_d2iz+0x64>)
 80020c6:	40e8      	lsrs	r0, r5
 80020c8:	46a4      	mov	ip, r4
 80020ca:	4463      	add	r3, ip
 80020cc:	409a      	lsls	r2, r3
 80020ce:	4302      	orrs	r2, r0
 80020d0:	e7ef      	b.n	80020b2 <__aeabi_d2iz+0x2e>
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	000003fe 	.word	0x000003fe
 80020d8:	0000041d 	.word	0x0000041d
 80020dc:	00000433 	.word	0x00000433
 80020e0:	00000413 	.word	0x00000413
 80020e4:	7fffffff 	.word	0x7fffffff
 80020e8:	fffffbed 	.word	0xfffffbed

080020ec <__aeabi_i2d>:
 80020ec:	b570      	push	{r4, r5, r6, lr}
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d030      	beq.n	8002154 <__aeabi_i2d+0x68>
 80020f2:	17c3      	asrs	r3, r0, #31
 80020f4:	18c4      	adds	r4, r0, r3
 80020f6:	405c      	eors	r4, r3
 80020f8:	0fc5      	lsrs	r5, r0, #31
 80020fa:	0020      	movs	r0, r4
 80020fc:	f000 f870 	bl	80021e0 <__clzsi2>
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <__aeabi_i2d+0x74>)
 8002102:	4a18      	ldr	r2, [pc, #96]	; (8002164 <__aeabi_i2d+0x78>)
 8002104:	1a1b      	subs	r3, r3, r0
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	2a1f      	cmp	r2, #31
 800210a:	dd18      	ble.n	800213e <__aeabi_i2d+0x52>
 800210c:	4a16      	ldr	r2, [pc, #88]	; (8002168 <__aeabi_i2d+0x7c>)
 800210e:	1ad2      	subs	r2, r2, r3
 8002110:	4094      	lsls	r4, r2
 8002112:	2200      	movs	r2, #0
 8002114:	0324      	lsls	r4, r4, #12
 8002116:	055b      	lsls	r3, r3, #21
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d5b      	lsrs	r3, r3, #21
 800211c:	2100      	movs	r1, #0
 800211e:	0010      	movs	r0, r2
 8002120:	0324      	lsls	r4, r4, #12
 8002122:	0d0a      	lsrs	r2, r1, #20
 8002124:	0b24      	lsrs	r4, r4, #12
 8002126:	0512      	lsls	r2, r2, #20
 8002128:	4322      	orrs	r2, r4
 800212a:	4c10      	ldr	r4, [pc, #64]	; (800216c <__aeabi_i2d+0x80>)
 800212c:	051b      	lsls	r3, r3, #20
 800212e:	4022      	ands	r2, r4
 8002130:	4313      	orrs	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	07ed      	lsls	r5, r5, #31
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	432b      	orrs	r3, r5
 800213a:	0019      	movs	r1, r3
 800213c:	bd70      	pop	{r4, r5, r6, pc}
 800213e:	0021      	movs	r1, r4
 8002140:	4091      	lsls	r1, r2
 8002142:	000a      	movs	r2, r1
 8002144:	210b      	movs	r1, #11
 8002146:	1a08      	subs	r0, r1, r0
 8002148:	40c4      	lsrs	r4, r0
 800214a:	055b      	lsls	r3, r3, #21
 800214c:	0324      	lsls	r4, r4, #12
 800214e:	0b24      	lsrs	r4, r4, #12
 8002150:	0d5b      	lsrs	r3, r3, #21
 8002152:	e7e3      	b.n	800211c <__aeabi_i2d+0x30>
 8002154:	2500      	movs	r5, #0
 8002156:	2300      	movs	r3, #0
 8002158:	2400      	movs	r4, #0
 800215a:	2200      	movs	r2, #0
 800215c:	e7de      	b.n	800211c <__aeabi_i2d+0x30>
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	0000041e 	.word	0x0000041e
 8002164:	00000433 	.word	0x00000433
 8002168:	00000413 	.word	0x00000413
 800216c:	800fffff 	.word	0x800fffff

08002170 <__aeabi_ui2d>:
 8002170:	b510      	push	{r4, lr}
 8002172:	1e04      	subs	r4, r0, #0
 8002174:	d028      	beq.n	80021c8 <__aeabi_ui2d+0x58>
 8002176:	f000 f833 	bl	80021e0 <__clzsi2>
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <__aeabi_ui2d+0x60>)
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <__aeabi_ui2d+0x64>)
 800217e:	1a1b      	subs	r3, r3, r0
 8002180:	1ad2      	subs	r2, r2, r3
 8002182:	2a1f      	cmp	r2, #31
 8002184:	dd15      	ble.n	80021b2 <__aeabi_ui2d+0x42>
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <__aeabi_ui2d+0x68>)
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	4094      	lsls	r4, r2
 800218c:	2200      	movs	r2, #0
 800218e:	0324      	lsls	r4, r4, #12
 8002190:	055b      	lsls	r3, r3, #21
 8002192:	0b24      	lsrs	r4, r4, #12
 8002194:	0d5b      	lsrs	r3, r3, #21
 8002196:	2100      	movs	r1, #0
 8002198:	0010      	movs	r0, r2
 800219a:	0324      	lsls	r4, r4, #12
 800219c:	0d0a      	lsrs	r2, r1, #20
 800219e:	0b24      	lsrs	r4, r4, #12
 80021a0:	0512      	lsls	r2, r2, #20
 80021a2:	4322      	orrs	r2, r4
 80021a4:	4c0d      	ldr	r4, [pc, #52]	; (80021dc <__aeabi_ui2d+0x6c>)
 80021a6:	051b      	lsls	r3, r3, #20
 80021a8:	4022      	ands	r2, r4
 80021aa:	4313      	orrs	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	0859      	lsrs	r1, r3, #1
 80021b0:	bd10      	pop	{r4, pc}
 80021b2:	0021      	movs	r1, r4
 80021b4:	4091      	lsls	r1, r2
 80021b6:	000a      	movs	r2, r1
 80021b8:	210b      	movs	r1, #11
 80021ba:	1a08      	subs	r0, r1, r0
 80021bc:	40c4      	lsrs	r4, r0
 80021be:	055b      	lsls	r3, r3, #21
 80021c0:	0324      	lsls	r4, r4, #12
 80021c2:	0b24      	lsrs	r4, r4, #12
 80021c4:	0d5b      	lsrs	r3, r3, #21
 80021c6:	e7e6      	b.n	8002196 <__aeabi_ui2d+0x26>
 80021c8:	2300      	movs	r3, #0
 80021ca:	2400      	movs	r4, #0
 80021cc:	2200      	movs	r2, #0
 80021ce:	e7e2      	b.n	8002196 <__aeabi_ui2d+0x26>
 80021d0:	0000041e 	.word	0x0000041e
 80021d4:	00000433 	.word	0x00000433
 80021d8:	00000413 	.word	0x00000413
 80021dc:	800fffff 	.word	0x800fffff

080021e0 <__clzsi2>:
 80021e0:	211c      	movs	r1, #28
 80021e2:	2301      	movs	r3, #1
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	4298      	cmp	r0, r3
 80021e8:	d301      	bcc.n	80021ee <__clzsi2+0xe>
 80021ea:	0c00      	lsrs	r0, r0, #16
 80021ec:	3910      	subs	r1, #16
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	4298      	cmp	r0, r3
 80021f2:	d301      	bcc.n	80021f8 <__clzsi2+0x18>
 80021f4:	0a00      	lsrs	r0, r0, #8
 80021f6:	3908      	subs	r1, #8
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	4298      	cmp	r0, r3
 80021fc:	d301      	bcc.n	8002202 <__clzsi2+0x22>
 80021fe:	0900      	lsrs	r0, r0, #4
 8002200:	3904      	subs	r1, #4
 8002202:	a202      	add	r2, pc, #8	; (adr r2, 800220c <__clzsi2+0x2c>)
 8002204:	5c10      	ldrb	r0, [r2, r0]
 8002206:	1840      	adds	r0, r0, r1
 8002208:	4770      	bx	lr
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	02020304 	.word	0x02020304
 8002210:	01010101 	.word	0x01010101
	...

0800221c <__clzdi2>:
 800221c:	b510      	push	{r4, lr}
 800221e:	2900      	cmp	r1, #0
 8002220:	d103      	bne.n	800222a <__clzdi2+0xe>
 8002222:	f7ff ffdd 	bl	80021e0 <__clzsi2>
 8002226:	3020      	adds	r0, #32
 8002228:	e002      	b.n	8002230 <__clzdi2+0x14>
 800222a:	1c08      	adds	r0, r1, #0
 800222c:	f7ff ffd8 	bl	80021e0 <__clzsi2>
 8002230:	bd10      	pop	{r4, pc}
 8002232:	46c0      	nop			; (mov r8, r8)

08002234 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002234:	b500      	push	{lr}
 8002236:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 8002238:	2801      	cmp	r0, #1
 800223a:	d021      	beq.n	8002280 <BSP_LED_Init+0x4c>
 800223c:	2800      	cmp	r0, #0
 800223e:	d015      	beq.n	800226c <BSP_LED_Init+0x38>
 8002240:	2802      	cmp	r0, #2
 8002242:	d027      	beq.n	8002294 <BSP_LED_Init+0x60>
 8002244:	2803      	cmp	r0, #3
 8002246:	d02f      	beq.n	80022a8 <BSP_LED_Init+0x74>

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002248:	0042      	lsls	r2, r0, #1
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <BSP_LED_Init+0x88>)
 800224c:	5ad3      	ldrh	r3, [r2, r3]
 800224e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002250:	2301      	movs	r3, #1
 8002252:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	3303      	adds	r3, #3
 800225a:	9308      	str	r3, [sp, #32]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800225c:	0080      	lsls	r0, r0, #2
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <BSP_LED_Init+0x8c>)
 8002260:	58c0      	ldr	r0, [r0, r3]
 8002262:	a905      	add	r1, sp, #20
 8002264:	f002 f828 	bl	80042b8 <HAL_GPIO_Init>
}
 8002268:	b00b      	add	sp, #44	; 0x2c
 800226a:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE( Led );
 800226c:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <BSP_LED_Init+0x90>)
 800226e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002270:	2302      	movs	r3, #2
 8002272:	4319      	orrs	r1, r3
 8002274:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002276:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002278:	4013      	ands	r3, r2
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	9b01      	ldr	r3, [sp, #4]
 800227e:	e7e3      	b.n	8002248 <BSP_LED_Init+0x14>
 8002280:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <BSP_LED_Init+0x90>)
 8002282:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002284:	2301      	movs	r3, #1
 8002286:	4319      	orrs	r1, r3
 8002288:	62d1      	str	r1, [r2, #44]	; 0x2c
 800228a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800228c:	4013      	ands	r3, r2
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	9b02      	ldr	r3, [sp, #8]
 8002292:	e7d9      	b.n	8002248 <BSP_LED_Init+0x14>
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <BSP_LED_Init+0x90>)
 8002296:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002298:	2302      	movs	r3, #2
 800229a:	4319      	orrs	r1, r3
 800229c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800229e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022a0:	4013      	ands	r3, r2
 80022a2:	9303      	str	r3, [sp, #12]
 80022a4:	9b03      	ldr	r3, [sp, #12]
 80022a6:	e7cf      	b.n	8002248 <BSP_LED_Init+0x14>
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <BSP_LED_Init+0x90>)
 80022aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022ac:	2302      	movs	r3, #2
 80022ae:	4319      	orrs	r1, r3
 80022b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022b4:	4013      	ands	r3, r2
 80022b6:	9304      	str	r3, [sp, #16]
 80022b8:	9b04      	ldr	r3, [sp, #16]
 80022ba:	e7c5      	b.n	8002248 <BSP_LED_Init+0x14>
 80022bc:	0800a2c8 	.word	0x0800a2c8
 80022c0:	20000000 	.word	0x20000000
 80022c4:	40021000 	.word	0x40021000

080022c8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80022c8:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80022ca:	0042      	lsls	r2, r0, #1
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <BSP_LED_On+0x18>)
 80022ce:	5ad1      	ldrh	r1, [r2, r3]
 80022d0:	0080      	lsls	r0, r0, #2
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <BSP_LED_On+0x1c>)
 80022d4:	58c0      	ldr	r0, [r0, r3]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f002 f8c0 	bl	800445c <HAL_GPIO_WritePin>
}
 80022dc:	bd10      	pop	{r4, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	0800a2c8 	.word	0x0800a2c8
 80022e4:	20000000 	.word	0x20000000

080022e8 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80022e8:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80022ea:	0042      	lsls	r2, r0, #1
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <BSP_LED_Off+0x18>)
 80022ee:	5ad1      	ldrh	r1, [r2, r3]
 80022f0:	0080      	lsls	r0, r0, #2
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <BSP_LED_Off+0x1c>)
 80022f4:	58c0      	ldr	r0, [r0, r3]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f002 f8b0 	bl	800445c <HAL_GPIO_WritePin>
}
 80022fc:	bd10      	pop	{r4, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	0800a2c8 	.word	0x0800a2c8
 8002304:	20000000 	.word	0x20000000

08002308 <GetFskBandwidthRegValue>:
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
#ifdef INCLUDE_MODEM_FSK_MODE
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8002308:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800230a:	2300      	movs	r3, #0
 800230c:	e001      	b.n	8002312 <GetFskBandwidthRegValue+0xa>
 800230e:	3301      	adds	r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b14      	cmp	r3, #20
 8002314:	d80e      	bhi.n	8002334 <GetFskBandwidthRegValue+0x2c>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8002316:	00da      	lsls	r2, r3, #3
 8002318:	4c07      	ldr	r4, [pc, #28]	; (8002338 <GetFskBandwidthRegValue+0x30>)
 800231a:	5912      	ldr	r2, [r2, r4]
 800231c:	4282      	cmp	r2, r0
 800231e:	d8f6      	bhi.n	800230e <GetFskBandwidthRegValue+0x6>
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	00d2      	lsls	r2, r2, #3
 8002324:	5912      	ldr	r2, [r2, r4]
 8002326:	4290      	cmp	r0, r2
 8002328:	d2f1      	bcs.n	800230e <GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 800232a:	00d9      	lsls	r1, r3, #3
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <GetFskBandwidthRegValue+0x30>)
 800232e:	1859      	adds	r1, r3, r1
 8002330:	7908      	ldrb	r0, [r1, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8002332:	bd10      	pop	{r4, pc}
 8002334:	e7fe      	b.n	8002334 <GetFskBandwidthRegValue+0x2c>
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	0800a32c 	.word	0x0800a32c

0800233c <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <SX1276OnDio4Irq+0x1c>)
 800233e:	795b      	ldrb	r3, [r3, #5]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <SX1276OnDio4Irq+0x18>
    {
#ifdef INCLUDE_MODEM_FSK_MODE
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8002344:	3330      	adds	r3, #48	; 0x30
 8002346:	4a04      	ldr	r2, [pc, #16]	; (8002358 <SX1276OnDio4Irq+0x1c>)
 8002348:	5cd3      	ldrb	r3, [r2, r3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800234e:	2101      	movs	r1, #1
 8002350:	3330      	adds	r3, #48	; 0x30
 8002352:	54d1      	strb	r1, [r2, r3]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8002354:	4770      	bx	lr
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	20000704 	.word	0x20000704

0800235c <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 800235c:	4b01      	ldr	r3, [pc, #4]	; (8002364 <SX1276BoardInit+0x8>)
 800235e:	6018      	str	r0, [r3, #0]
}
 8002360:	4770      	bx	lr
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	20000244 	.word	0x20000244

08002368 <SX1276GetStatus>:
    return SX1276.Settings.State;
 8002368:	4b01      	ldr	r3, [pc, #4]	; (8002370 <SX1276GetStatus+0x8>)
 800236a:	7918      	ldrb	r0, [r3, #4]
}
 800236c:	4770      	bx	lr
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	20000704 	.word	0x20000704

08002374 <SX1276Reset>:
{
 8002374:	b510      	push	{r4, lr}
 8002376:	b086      	sub	sp, #24
    GPIO_InitTypeDef initStruct = { 0 };
 8002378:	2214      	movs	r2, #20
 800237a:	2100      	movs	r1, #0
 800237c:	a801      	add	r0, sp, #4
 800237e:	f005 fda0 	bl	8007ec2 <memset>
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002382:	2301      	movs	r3, #1
 8002384:	9302      	str	r3, [sp, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8002386:	3302      	adds	r3, #2
 8002388:	9304      	str	r3, [sp, #16]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800238a:	4c0d      	ldr	r4, [pc, #52]	; (80023c0 <SX1276Reset+0x4c>)
 800238c:	aa01      	add	r2, sp, #4
 800238e:	2101      	movs	r1, #1
 8002390:	0020      	movs	r0, r4
 8002392:	f004 fbc1 	bl	8006b18 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8002396:	2200      	movs	r2, #0
 8002398:	2101      	movs	r1, #1
 800239a:	0020      	movs	r0, r4
 800239c:	f004 fc38 	bl	8006c10 <HW_GPIO_Write>
    DelayMs( 1 );
 80023a0:	2001      	movs	r0, #1
 80023a2:	f004 f931 	bl	8006608 <DelayMs>
    initStruct.Mode = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80023aa:	aa01      	add	r2, sp, #4
 80023ac:	2101      	movs	r1, #1
 80023ae:	0020      	movs	r0, r4
 80023b0:	f004 fbb2 	bl	8006b18 <HW_GPIO_Init>
    DelayMs( 6 );
 80023b4:	2006      	movs	r0, #6
 80023b6:	f004 f927 	bl	8006608 <DelayMs>
}
 80023ba:	b006      	add	sp, #24
 80023bc:	bd10      	pop	{r4, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	50000800 	.word	0x50000800

080023c4 <SX1276WriteBuffer>:
{
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	0004      	movs	r4, r0
 80023c8:	000e      	movs	r6, r1
 80023ca:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80023cc:	2200      	movs	r2, #0
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	0209      	lsls	r1, r1, #8
 80023d2:	20a0      	movs	r0, #160	; 0xa0
 80023d4:	05c0      	lsls	r0, r0, #23
 80023d6:	f004 fc1b 	bl	8006c10 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 80023da:	2080      	movs	r0, #128	; 0x80
 80023dc:	4240      	negs	r0, r0
 80023de:	4320      	orrs	r0, r4
 80023e0:	b2c0      	uxtb	r0, r0
 80023e2:	f004 ff1f 	bl	8007224 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 80023e6:	2400      	movs	r4, #0
 80023e8:	e004      	b.n	80023f4 <SX1276WriteBuffer+0x30>
        HW_SPI_InOut( buffer[i] );
 80023ea:	5d30      	ldrb	r0, [r6, r4]
 80023ec:	f004 ff1a 	bl	8007224 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 80023f0:	3401      	adds	r4, #1
 80023f2:	b2e4      	uxtb	r4, r4
 80023f4:	42ac      	cmp	r4, r5
 80023f6:	d3f8      	bcc.n	80023ea <SX1276WriteBuffer+0x26>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80023f8:	2201      	movs	r2, #1
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	0209      	lsls	r1, r1, #8
 80023fe:	20a0      	movs	r0, #160	; 0xa0
 8002400:	05c0      	lsls	r0, r0, #23
 8002402:	f004 fc05 	bl	8006c10 <HW_GPIO_Write>
}
 8002406:	bd70      	pop	{r4, r5, r6, pc}

08002408 <SX1276Write>:
{
 8002408:	b500      	push	{lr}
 800240a:	b083      	sub	sp, #12
 800240c:	466b      	mov	r3, sp
 800240e:	71d9      	strb	r1, [r3, #7]
 8002410:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8002412:	2201      	movs	r2, #1
 8002414:	0019      	movs	r1, r3
 8002416:	f7ff ffd5 	bl	80023c4 <SX1276WriteBuffer>
}
 800241a:	b003      	add	sp, #12
 800241c:	bd00      	pop	{pc}
	...

08002420 <SX1276SetChannel>:
{
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	0005      	movs	r5, r0
    SX1276.Settings.Channel = freq;
 8002424:	4b10      	ldr	r3, [pc, #64]	; (8002468 <SX1276SetChannel+0x48>)
 8002426:	6098      	str	r0, [r3, #8]
    SX_FREQ_TO_CHANNEL( channel, freq );
 8002428:	4910      	ldr	r1, [pc, #64]	; (800246c <SX1276SetChannel+0x4c>)
 800242a:	f7fd fe7f 	bl	800012c <__udivsi3>
 800242e:	0204      	lsls	r4, r0, #8
 8002430:	490e      	ldr	r1, [pc, #56]	; (800246c <SX1276SetChannel+0x4c>)
 8002432:	0028      	movs	r0, r5
 8002434:	f7fd ff00 	bl	8000238 <__aeabi_uidivmod>
 8002438:	0208      	lsls	r0, r1, #8
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <SX1276SetChannel+0x50>)
 800243c:	469c      	mov	ip, r3
 800243e:	4460      	add	r0, ip
 8002440:	490a      	ldr	r1, [pc, #40]	; (800246c <SX1276SetChannel+0x4c>)
 8002442:	f7fd fe73 	bl	800012c <__udivsi3>
 8002446:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002448:	0c21      	lsrs	r1, r4, #16
 800244a:	b2c9      	uxtb	r1, r1
 800244c:	2006      	movs	r0, #6
 800244e:	f7ff ffdb 	bl	8002408 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8002452:	0a21      	lsrs	r1, r4, #8
 8002454:	b2c9      	uxtb	r1, r1
 8002456:	2007      	movs	r0, #7
 8002458:	f7ff ffd6 	bl	8002408 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 800245c:	b2e1      	uxtb	r1, r4
 800245e:	2008      	movs	r0, #8
 8002460:	f7ff ffd2 	bl	8002408 <SX1276Write>
}
 8002464:	bd70      	pop	{r4, r5, r6, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	20000704 	.word	0x20000704
 800246c:	00003d09 	.word	0x00003d09
 8002470:	00001e84 	.word	0x00001e84

08002474 <SX1276ReadBuffer>:
{
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	0004      	movs	r4, r0
 8002478:	000f      	movs	r7, r1
 800247a:	0016      	movs	r6, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800247c:	2200      	movs	r2, #0
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	0209      	lsls	r1, r1, #8
 8002482:	20a0      	movs	r0, #160	; 0xa0
 8002484:	05c0      	lsls	r0, r0, #23
 8002486:	f004 fbc3 	bl	8006c10 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 800248a:	207f      	movs	r0, #127	; 0x7f
 800248c:	4020      	ands	r0, r4
 800248e:	f004 fec9 	bl	8007224 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8002492:	2400      	movs	r4, #0
 8002494:	e006      	b.n	80024a4 <SX1276ReadBuffer+0x30>
        buffer[i] = HW_SPI_InOut( 0 );
 8002496:	193d      	adds	r5, r7, r4
 8002498:	2000      	movs	r0, #0
 800249a:	f004 fec3 	bl	8007224 <HW_SPI_InOut>
 800249e:	7028      	strb	r0, [r5, #0]
    for( i = 0; i < size; i++ )
 80024a0:	3401      	adds	r4, #1
 80024a2:	b2e4      	uxtb	r4, r4
 80024a4:	42b4      	cmp	r4, r6
 80024a6:	d3f6      	bcc.n	8002496 <SX1276ReadBuffer+0x22>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80024a8:	2201      	movs	r2, #1
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	0209      	lsls	r1, r1, #8
 80024ae:	20a0      	movs	r0, #160	; 0xa0
 80024b0:	05c0      	lsls	r0, r0, #23
 80024b2:	f004 fbad 	bl	8006c10 <HW_GPIO_Write>
}
 80024b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024b8 <SX1276Read>:
{
 80024b8:	b510      	push	{r4, lr}
 80024ba:	b082      	sub	sp, #8
    SX1276ReadBuffer( addr, &data, 1 );
 80024bc:	466b      	mov	r3, sp
 80024be:	1ddc      	adds	r4, r3, #7
 80024c0:	2201      	movs	r2, #1
 80024c2:	0021      	movs	r1, r4
 80024c4:	f7ff ffd6 	bl	8002474 <SX1276ReadBuffer>
    return data;
 80024c8:	7820      	ldrb	r0, [r4, #0]
}
 80024ca:	b002      	add	sp, #8
 80024cc:	bd10      	pop	{r4, pc}
	...

080024d0 <RxChainCalibration>:
{
 80024d0:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80024d2:	2009      	movs	r0, #9
 80024d4:	f7ff fff0 	bl	80024b8 <SX1276Read>
 80024d8:	0004      	movs	r4, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80024da:	2006      	movs	r0, #6
 80024dc:	f7ff ffec 	bl	80024b8 <SX1276Read>
 80024e0:	0405      	lsls	r5, r0, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80024e2:	2007      	movs	r0, #7
 80024e4:	f7ff ffe8 	bl	80024b8 <SX1276Read>
 80024e8:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80024ea:	4305      	orrs	r5, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80024ec:	2008      	movs	r0, #8
 80024ee:	f7ff ffe3 	bl	80024b8 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80024f2:	4328      	orrs	r0, r5
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80024f4:	0a05      	lsrs	r5, r0, #8
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <RxChainCalibration+0x8c>)
 80024f8:	435d      	muls	r5, r3
 80024fa:	22ff      	movs	r2, #255	; 0xff
 80024fc:	4010      	ands	r0, r2
 80024fe:	4343      	muls	r3, r0
 8002500:	3380      	adds	r3, #128	; 0x80
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	18ed      	adds	r5, r5, r3
    SX1276Write( REG_PACONFIG, 0x00 );
 8002506:	2100      	movs	r1, #0
 8002508:	2009      	movs	r0, #9
 800250a:	f7ff ff7d 	bl	8002408 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800250e:	203b      	movs	r0, #59	; 0x3b
 8002510:	f7ff ffd2 	bl	80024b8 <SX1276Read>
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	4301      	orrs	r1, r0
 8002518:	b2c9      	uxtb	r1, r1
 800251a:	203b      	movs	r0, #59	; 0x3b
 800251c:	f7ff ff74 	bl	8002408 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002520:	203b      	movs	r0, #59	; 0x3b
 8002522:	f7ff ffc9 	bl	80024b8 <SX1276Read>
 8002526:	0683      	lsls	r3, r0, #26
 8002528:	d4fa      	bmi.n	8002520 <RxChainCalibration+0x50>
    SX1276SetChannel( 868000000 );
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <RxChainCalibration+0x90>)
 800252c:	f7ff ff78 	bl	8002420 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002530:	203b      	movs	r0, #59	; 0x3b
 8002532:	f7ff ffc1 	bl	80024b8 <SX1276Read>
 8002536:	2140      	movs	r1, #64	; 0x40
 8002538:	4301      	orrs	r1, r0
 800253a:	b2c9      	uxtb	r1, r1
 800253c:	203b      	movs	r0, #59	; 0x3b
 800253e:	f7ff ff63 	bl	8002408 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002542:	203b      	movs	r0, #59	; 0x3b
 8002544:	f7ff ffb8 	bl	80024b8 <SX1276Read>
 8002548:	0683      	lsls	r3, r0, #26
 800254a:	d4fa      	bmi.n	8002542 <RxChainCalibration+0x72>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800254c:	0021      	movs	r1, r4
 800254e:	2009      	movs	r0, #9
 8002550:	f7ff ff5a 	bl	8002408 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8002554:	0028      	movs	r0, r5
 8002556:	f7ff ff63 	bl	8002420 <SX1276SetChannel>
}
 800255a:	bd70      	pop	{r4, r5, r6, pc}
 800255c:	00003d09 	.word	0x00003d09
 8002560:	33bca100 	.word	0x33bca100

08002564 <SX1276GetTimeOnAir>:
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	b085      	sub	sp, #20
 8002568:	000c      	movs	r4, r1
    switch( modem )
 800256a:	2800      	cmp	r0, #0
 800256c:	d003      	beq.n	8002576 <SX1276GetTimeOnAir+0x12>
 800256e:	2801      	cmp	r0, #1
 8002570:	d05c      	beq.n	800262c <SX1276GetTimeOnAir+0xc8>
    uint32_t airTime = 0;
 8002572:	2000      	movs	r0, #0
    return airTime;
 8002574:	e04e      	b.n	8002614 <SX1276GetTimeOnAir+0xb0>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002576:	4e7d      	ldr	r6, [pc, #500]	; (800276c <SX1276GetTimeOnAir+0x208>)
 8002578:	8c35      	ldrh	r5, [r6, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800257a:	2027      	movs	r0, #39	; 0x27
 800257c:	f7ff ff9c 	bl	80024b8 <SX1276Read>
 8002580:	23f8      	movs	r3, #248	; 0xf8
 8002582:	4398      	bics	r0, r3
 8002584:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002586:	1828      	adds	r0, r5, r0
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002588:	f7ff fdb0 	bl	80020ec <__aeabi_i2d>
 800258c:	0002      	movs	r2, r0
 800258e:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002590:	2122      	movs	r1, #34	; 0x22
 8002592:	5c71      	ldrb	r1, [r6, r1]
 8002594:	2900      	cmp	r1, #0
 8002596:	d03f      	beq.n	8002618 <SX1276GetTimeOnAir+0xb4>
 8002598:	2000      	movs	r0, #0
 800259a:	2100      	movs	r1, #0
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800259c:	f7fe f878 	bl	8000690 <__aeabi_dadd>
 80025a0:	0006      	movs	r6, r0
 80025a2:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80025a4:	2030      	movs	r0, #48	; 0x30
 80025a6:	f7ff ff87 	bl	80024b8 <SX1276Read>
 80025aa:	23f9      	movs	r3, #249	; 0xf9
 80025ac:	4398      	bics	r0, r3
 80025ae:	d036      	beq.n	800261e <SX1276GetTimeOnAir+0xba>
 80025b0:	2000      	movs	r0, #0
 80025b2:	496f      	ldr	r1, [pc, #444]	; (8002770 <SX1276GetTimeOnAir+0x20c>)
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80025b4:	0032      	movs	r2, r6
 80025b6:	003b      	movs	r3, r7
 80025b8:	f7fe f86a 	bl	8000690 <__aeabi_dadd>
 80025bc:	0006      	movs	r6, r0
 80025be:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80025c0:	0020      	movs	r0, r4
 80025c2:	f7ff fd93 	bl	80020ec <__aeabi_i2d>
 80025c6:	0032      	movs	r2, r6
 80025c8:	003b      	movs	r3, r7
 80025ca:	f7fe f861 	bl	8000690 <__aeabi_dadd>
 80025ce:	0002      	movs	r2, r0
 80025d0:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80025d2:	2124      	movs	r1, #36	; 0x24
 80025d4:	4865      	ldr	r0, [pc, #404]	; (800276c <SX1276GetTimeOnAir+0x208>)
 80025d6:	5c41      	ldrb	r1, [r0, r1]
 80025d8:	2900      	cmp	r1, #0
 80025da:	d123      	bne.n	8002624 <SX1276GetTimeOnAir+0xc0>
 80025dc:	2000      	movs	r0, #0
 80025de:	2100      	movs	r1, #0
                                     pktLen +
 80025e0:	f7fe f856 	bl	8000690 <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80025e4:	2200      	movs	r2, #0
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <SX1276GetTimeOnAir+0x210>)
 80025e8:	f7fe ff96 	bl	8001518 <__aeabi_dmul>
 80025ec:	0004      	movs	r4, r0
 80025ee:	000d      	movs	r5, r1
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 80025f0:	4b5e      	ldr	r3, [pc, #376]	; (800276c <SX1276GetTimeOnAir+0x208>)
 80025f2:	69d8      	ldr	r0, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80025f4:	f7ff fdbc 	bl	8002170 <__aeabi_ui2d>
 80025f8:	0002      	movs	r2, r0
 80025fa:	000b      	movs	r3, r1
 80025fc:	0020      	movs	r0, r4
 80025fe:	0029      	movs	r1, r5
 8002600:	f7fe fb56 	bl	8000cb0 <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002604:	2200      	movs	r2, #0
 8002606:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <SX1276GetTimeOnAir+0x214>)
 8002608:	f7fe ff86 	bl	8001518 <__aeabi_dmul>
 800260c:	f007 fdf8 	bl	800a200 <round>
 8002610:	f7fd ff60 	bl	80004d4 <__aeabi_d2uiz>
}
 8002614:	b005      	add	sp, #20
 8002616:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002618:	2000      	movs	r0, #0
 800261a:	4955      	ldr	r1, [pc, #340]	; (8002770 <SX1276GetTimeOnAir+0x20c>)
 800261c:	e7be      	b.n	800259c <SX1276GetTimeOnAir+0x38>
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800261e:	2000      	movs	r0, #0
 8002620:	2100      	movs	r1, #0
 8002622:	e7c7      	b.n	80025b4 <SX1276GetTimeOnAir+0x50>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002624:	2000      	movs	r0, #0
 8002626:	2180      	movs	r1, #128	; 0x80
 8002628:	05c9      	lsls	r1, r1, #23
 800262a:	e7d9      	b.n	80025e0 <SX1276GetTimeOnAir+0x7c>
            switch( SX1276.Settings.LoRa.Bandwidth )
 800262c:	4b4f      	ldr	r3, [pc, #316]	; (800276c <SX1276GetTimeOnAir+0x208>)
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	2b08      	cmp	r3, #8
 8002632:	d100      	bne.n	8002636 <SX1276GetTimeOnAir+0xd2>
 8002634:	e084      	b.n	8002740 <SX1276GetTimeOnAir+0x1dc>
 8002636:	2b09      	cmp	r3, #9
 8002638:	d100      	bne.n	800263c <SX1276GetTimeOnAir+0xd8>
 800263a:	e086      	b.n	800274a <SX1276GetTimeOnAir+0x1e6>
 800263c:	2b07      	cmp	r3, #7
 800263e:	d100      	bne.n	8002642 <SX1276GetTimeOnAir+0xde>
 8002640:	e088      	b.n	8002754 <SX1276GetTimeOnAir+0x1f0>
            double bw = 0.0;
 8002642:	2200      	movs	r2, #0
 8002644:	2300      	movs	r3, #0
 8002646:	9200      	str	r2, [sp, #0]
 8002648:	9301      	str	r3, [sp, #4]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800264a:	4d48      	ldr	r5, [pc, #288]	; (800276c <SX1276GetTimeOnAir+0x208>)
 800264c:	6cae      	ldr	r6, [r5, #72]	; 0x48
 800264e:	2001      	movs	r0, #1
 8002650:	40b0      	lsls	r0, r6
 8002652:	f7ff fd4b 	bl	80020ec <__aeabi_i2d>
 8002656:	0002      	movs	r2, r0
 8002658:	000b      	movs	r3, r1
 800265a:	9800      	ldr	r0, [sp, #0]
 800265c:	9901      	ldr	r1, [sp, #4]
 800265e:	f7fe fb27 	bl	8000cb0 <__aeabi_ddiv>
 8002662:	0002      	movs	r2, r0
 8002664:	000b      	movs	r3, r1
            double ts = 1 / rs;
 8002666:	2000      	movs	r0, #0
 8002668:	4941      	ldr	r1, [pc, #260]	; (8002770 <SX1276GetTimeOnAir+0x20c>)
 800266a:	f7fe fb21 	bl	8000cb0 <__aeabi_ddiv>
 800266e:	9000      	str	r0, [sp, #0]
 8002670:	9101      	str	r1, [sp, #4]
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002672:	234e      	movs	r3, #78	; 0x4e
 8002674:	5ae8      	ldrh	r0, [r5, r3]
 8002676:	f7ff fd39 	bl	80020ec <__aeabi_i2d>
 800267a:	2200      	movs	r2, #0
 800267c:	4b3f      	ldr	r3, [pc, #252]	; (800277c <SX1276GetTimeOnAir+0x218>)
 800267e:	f7fe f807 	bl	8000690 <__aeabi_dadd>
 8002682:	0002      	movs	r2, r0
 8002684:	000b      	movs	r3, r1
 8002686:	9800      	ldr	r0, [sp, #0]
 8002688:	9901      	ldr	r1, [sp, #4]
 800268a:	f7fe ff45 	bl	8001518 <__aeabi_dmul>
 800268e:	9002      	str	r0, [sp, #8]
 8002690:	9103      	str	r1, [sp, #12]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002692:	00e4      	lsls	r4, r4, #3
 8002694:	00b0      	lsls	r0, r6, #2
 8002696:	1a24      	subs	r4, r4, r0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002698:	2352      	movs	r3, #82	; 0x52
 800269a:	5ce8      	ldrb	r0, [r5, r3]
 800269c:	0100      	lsls	r0, r0, #4
 800269e:	1900      	adds	r0, r0, r4
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80026a0:	3b02      	subs	r3, #2
 80026a2:	5ceb      	ldrb	r3, [r5, r3]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d05a      	beq.n	800275e <SX1276GetTimeOnAir+0x1fa>
 80026a8:	2414      	movs	r4, #20
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80026aa:	1b00      	subs	r0, r0, r4
 80026ac:	301c      	adds	r0, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80026ae:	f7ff fd5f 	bl	8002170 <__aeabi_ui2d>
 80026b2:	0004      	movs	r4, r0
 80026b4:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80026b6:	234c      	movs	r3, #76	; 0x4c
 80026b8:	4a2c      	ldr	r2, [pc, #176]	; (800276c <SX1276GetTimeOnAir+0x208>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	dd50      	ble.n	8002762 <SX1276GetTimeOnAir+0x1fe>
 80026c0:	2002      	movs	r0, #2
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80026c2:	1a30      	subs	r0, r6, r0
 80026c4:	0080      	lsls	r0, r0, #2
 80026c6:	f7ff fd53 	bl	8002170 <__aeabi_ui2d>
 80026ca:	0002      	movs	r2, r0
 80026cc:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80026ce:	0020      	movs	r0, r4
 80026d0:	0029      	movs	r1, r5
 80026d2:	f7fe faed 	bl	8000cb0 <__aeabi_ddiv>
 80026d6:	f007 fc8f 	bl	8009ff8 <ceil>
 80026da:	0004      	movs	r4, r0
 80026dc:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 80026de:	234d      	movs	r3, #77	; 0x4d
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <SX1276GetTimeOnAir+0x208>)
 80026e2:	5cd0      	ldrb	r0, [r2, r3]
 80026e4:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80026e6:	f7ff fd01 	bl	80020ec <__aeabi_i2d>
 80026ea:	0002      	movs	r2, r0
 80026ec:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80026ee:	0020      	movs	r0, r4
 80026f0:	0029      	movs	r1, r5
 80026f2:	f7fe ff11 	bl	8001518 <__aeabi_dmul>
 80026f6:	0004      	movs	r4, r0
 80026f8:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80026fa:	2200      	movs	r2, #0
 80026fc:	2300      	movs	r3, #0
 80026fe:	f7fd feb5 	bl	800046c <__aeabi_dcmpgt>
 8002702:	2800      	cmp	r0, #0
 8002704:	d02f      	beq.n	8002766 <SX1276GetTimeOnAir+0x202>
 8002706:	2200      	movs	r2, #0
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <SX1276GetTimeOnAir+0x210>)
 800270a:	0020      	movs	r0, r4
 800270c:	0029      	movs	r1, r5
 800270e:	f7fd ffbf 	bl	8000690 <__aeabi_dadd>
            double tPayload = nPayload * ts;
 8002712:	9a00      	ldr	r2, [sp, #0]
 8002714:	9b01      	ldr	r3, [sp, #4]
 8002716:	f7fe feff 	bl	8001518 <__aeabi_dmul>
 800271a:	0002      	movs	r2, r0
 800271c:	000b      	movs	r3, r1
            double tOnAir = tPreamble + tPayload;
 800271e:	9802      	ldr	r0, [sp, #8]
 8002720:	9903      	ldr	r1, [sp, #12]
 8002722:	f7fd ffb5 	bl	8000690 <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8002726:	2200      	movs	r2, #0
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <SX1276GetTimeOnAir+0x214>)
 800272a:	f7fe fef5 	bl	8001518 <__aeabi_dmul>
 800272e:	4a14      	ldr	r2, [pc, #80]	; (8002780 <SX1276GetTimeOnAir+0x21c>)
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <SX1276GetTimeOnAir+0x220>)
 8002732:	f7fd ffad 	bl	8000690 <__aeabi_dadd>
 8002736:	f007 fce1 	bl	800a0fc <floor>
 800273a:	f7fd fecb 	bl	80004d4 <__aeabi_d2uiz>
        break;
 800273e:	e769      	b.n	8002614 <SX1276GetTimeOnAir+0xb0>
                bw = 250000;
 8002740:	2200      	movs	r2, #0
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <SX1276GetTimeOnAir+0x224>)
 8002744:	9200      	str	r2, [sp, #0]
 8002746:	9301      	str	r3, [sp, #4]
                break;
 8002748:	e77f      	b.n	800264a <SX1276GetTimeOnAir+0xe6>
                bw = 500000;
 800274a:	2200      	movs	r2, #0
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <SX1276GetTimeOnAir+0x228>)
 800274e:	9200      	str	r2, [sp, #0]
 8002750:	9301      	str	r3, [sp, #4]
                break;
 8002752:	e77a      	b.n	800264a <SX1276GetTimeOnAir+0xe6>
                bw = 125000;
 8002754:	2200      	movs	r2, #0
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <SX1276GetTimeOnAir+0x22c>)
 8002758:	9200      	str	r2, [sp, #0]
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	e775      	b.n	800264a <SX1276GetTimeOnAir+0xe6>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800275e:	2400      	movs	r4, #0
 8002760:	e7a3      	b.n	80026aa <SX1276GetTimeOnAir+0x146>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002762:	2000      	movs	r0, #0
 8002764:	e7ad      	b.n	80026c2 <SX1276GetTimeOnAir+0x15e>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002766:	2000      	movs	r0, #0
 8002768:	4902      	ldr	r1, [pc, #8]	; (8002774 <SX1276GetTimeOnAir+0x210>)
 800276a:	e7d2      	b.n	8002712 <SX1276GetTimeOnAir+0x1ae>
 800276c:	20000704 	.word	0x20000704
 8002770:	3ff00000 	.word	0x3ff00000
 8002774:	40200000 	.word	0x40200000
 8002778:	408f4000 	.word	0x408f4000
 800277c:	40110000 	.word	0x40110000
 8002780:	d916872b 	.word	0xd916872b
 8002784:	3feff7ce 	.word	0x3feff7ce
 8002788:	410e8480 	.word	0x410e8480
 800278c:	411e8480 	.word	0x411e8480
 8002790:	40fe8480 	.word	0x40fe8480

08002794 <SX1276ReadRssi>:
{
 8002794:	b510      	push	{r4, lr}
    switch( modem )
 8002796:	2800      	cmp	r0, #0
 8002798:	d004      	beq.n	80027a4 <SX1276ReadRssi+0x10>
 800279a:	2801      	cmp	r0, #1
 800279c:	d00a      	beq.n	80027b4 <SX1276ReadRssi+0x20>
        rssi = -1;
 800279e:	2001      	movs	r0, #1
 80027a0:	4240      	negs	r0, r0
 80027a2:	e006      	b.n	80027b2 <SX1276ReadRssi+0x1e>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80027a4:	2011      	movs	r0, #17
 80027a6:	f7ff fe87 	bl	80024b8 <SX1276Read>
 80027aa:	0840      	lsrs	r0, r0, #1
 80027ac:	b2c0      	uxtb	r0, r0
 80027ae:	4240      	negs	r0, r0
 80027b0:	b200      	sxth	r0, r0
}
 80027b2:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <SX1276ReadRssi+0x48>)
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <SX1276ReadRssi+0x4c>)
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d806      	bhi.n	80027cc <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80027be:	201b      	movs	r0, #27
 80027c0:	f7ff fe7a 	bl	80024b8 <SX1276Read>
 80027c4:	b280      	uxth	r0, r0
 80027c6:	38a4      	subs	r0, #164	; 0xa4
 80027c8:	b200      	sxth	r0, r0
 80027ca:	e7f2      	b.n	80027b2 <SX1276ReadRssi+0x1e>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80027cc:	201b      	movs	r0, #27
 80027ce:	f7ff fe73 	bl	80024b8 <SX1276Read>
 80027d2:	b280      	uxth	r0, r0
 80027d4:	389d      	subs	r0, #157	; 0x9d
 80027d6:	b200      	sxth	r0, r0
 80027d8:	e7eb      	b.n	80027b2 <SX1276ReadRssi+0x1e>
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	20000704 	.word	0x20000704
 80027e0:	1f4add40 	.word	0x1f4add40

080027e4 <SX1276SetOpMode>:
{
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 80027e8:	d018      	beq.n	800281c <SX1276SetOpMode+0x38>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80027ea:	4d17      	ldr	r5, [pc, #92]	; (8002848 <SX1276SetOpMode+0x64>)
 80027ec:	682b      	ldr	r3, [r5, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2001      	movs	r0, #1
 80027f2:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 80027f4:	682b      	ldr	r3, [r5, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2000      	movs	r0, #0
 80027fa:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 80027fc:	682b      	ldr	r3, [r5, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	0020      	movs	r0, r4
 8002802:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8002804:	2001      	movs	r0, #1
 8002806:	f7ff fe57 	bl	80024b8 <SX1276Read>
 800280a:	b241      	sxtb	r1, r0
 800280c:	2307      	movs	r3, #7
 800280e:	4399      	bics	r1, r3
 8002810:	4321      	orrs	r1, r4
 8002812:	b2c9      	uxtb	r1, r1
 8002814:	2001      	movs	r0, #1
 8002816:	f7ff fdf7 	bl	8002408 <SX1276Write>
}
 800281a:	bd70      	pop	{r4, r5, r6, pc}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800281c:	2001      	movs	r0, #1
 800281e:	f7ff fe4b 	bl	80024b8 <SX1276Read>
 8002822:	b241      	sxtb	r1, r0
 8002824:	2307      	movs	r3, #7
 8002826:	4399      	bics	r1, r3
 8002828:	4321      	orrs	r1, r4
 800282a:	b2c9      	uxtb	r1, r1
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff fdeb 	bl	8002408 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8002832:	4c05      	ldr	r4, [pc, #20]	; (8002848 <SX1276SetOpMode+0x64>)
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2001      	movs	r0, #1
 800283a:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2000      	movs	r0, #0
 8002842:	4798      	blx	r3
 8002844:	e7e9      	b.n	800281a <SX1276SetOpMode+0x36>
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	20000244 	.word	0x20000244

0800284c <SX1276SetSleep>:
{
 800284c:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800284e:	4806      	ldr	r0, [pc, #24]	; (8002868 <SX1276SetSleep+0x1c>)
 8002850:	f004 f808 	bl	8006864 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8002854:	4805      	ldr	r0, [pc, #20]	; (800286c <SX1276SetSleep+0x20>)
 8002856:	f004 f805 	bl	8006864 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff ffc2 	bl	80027e4 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8002860:	2200      	movs	r2, #0
 8002862:	4b03      	ldr	r3, [pc, #12]	; (8002870 <SX1276SetSleep+0x24>)
 8002864:	711a      	strb	r2, [r3, #4]
}
 8002866:	bd10      	pop	{r4, pc}
 8002868:	2000076c 	.word	0x2000076c
 800286c:	200006dc 	.word	0x200006dc
 8002870:	20000704 	.word	0x20000704

08002874 <SX1276SetStby>:
{
 8002874:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8002876:	4806      	ldr	r0, [pc, #24]	; (8002890 <SX1276SetStby+0x1c>)
 8002878:	f003 fff4 	bl	8006864 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800287c:	4805      	ldr	r0, [pc, #20]	; (8002894 <SX1276SetStby+0x20>)
 800287e:	f003 fff1 	bl	8006864 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8002882:	2001      	movs	r0, #1
 8002884:	f7ff ffae 	bl	80027e4 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8002888:	2200      	movs	r2, #0
 800288a:	4b03      	ldr	r3, [pc, #12]	; (8002898 <SX1276SetStby+0x24>)
 800288c:	711a      	strb	r2, [r3, #4]
}
 800288e:	bd10      	pop	{r4, pc}
 8002890:	2000076c 	.word	0x2000076c
 8002894:	200006dc 	.word	0x200006dc
 8002898:	20000704 	.word	0x20000704

0800289c <SX1276SetRx>:
{
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	0005      	movs	r5, r0
    switch( SX1276.Settings.Modem )
 80028a0:	4b97      	ldr	r3, [pc, #604]	; (8002b00 <SX1276SetRx+0x264>)
 80028a2:	795b      	ldrb	r3, [r3, #5]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <SX1276SetRx+0x14>
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d046      	beq.n	800293a <SX1276SetRx+0x9e>
    bool rxContinuous = false;
 80028ac:	2600      	movs	r6, #0
 80028ae:	e02b      	b.n	8002908 <SX1276SetRx+0x6c>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80028b0:	4c93      	ldr	r4, [pc, #588]	; (8002b00 <SX1276SetRx+0x264>)
 80028b2:	2326      	movs	r3, #38	; 0x26
 80028b4:	5ce6      	ldrb	r6, [r4, r3]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80028b6:	2040      	movs	r0, #64	; 0x40
 80028b8:	f7ff fdfe 	bl	80024b8 <SX1276Read>
 80028bc:	b240      	sxtb	r0, r0
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80028be:	2103      	movs	r1, #3
 80028c0:	4001      	ands	r1, r0
                                                                            RF_DIOMAPPING1_DIO1_00 |
 80028c2:	200c      	movs	r0, #12
 80028c4:	4301      	orrs	r1, r0
 80028c6:	b249      	sxtb	r1, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80028c8:	b2c9      	uxtb	r1, r1
 80028ca:	2040      	movs	r0, #64	; 0x40
 80028cc:	f7ff fd9c 	bl	8002408 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80028d0:	2041      	movs	r0, #65	; 0x41
 80028d2:	f7ff fdf1 	bl	80024b8 <SX1276Read>
 80028d6:	213f      	movs	r1, #63	; 0x3f
 80028d8:	4249      	negs	r1, r1
 80028da:	4301      	orrs	r1, r0
 80028dc:	b2c9      	uxtb	r1, r1
 80028de:	2041      	movs	r0, #65	; 0x41
 80028e0:	f7ff fd92 	bl	8002408 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80028e4:	2035      	movs	r0, #53	; 0x35
 80028e6:	f7ff fde7 	bl	80024b8 <SX1276Read>
 80028ea:	233f      	movs	r3, #63	; 0x3f
 80028ec:	4018      	ands	r0, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	54e0      	strb	r0, [r4, r3]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80028f2:	211e      	movs	r1, #30
 80028f4:	200d      	movs	r0, #13
 80028f6:	f7ff fd87 	bl	8002408 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80028fa:	2300      	movs	r3, #0
 80028fc:	2230      	movs	r2, #48	; 0x30
 80028fe:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8002900:	3201      	adds	r2, #1
 8002902:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8002904:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8002906:	8763      	strh	r3, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8002908:	2280      	movs	r2, #128	; 0x80
 800290a:	0052      	lsls	r2, r2, #1
 800290c:	2100      	movs	r1, #0
 800290e:	487d      	ldr	r0, [pc, #500]	; (8002b04 <SX1276SetRx+0x268>)
 8002910:	3004      	adds	r0, #4
 8002912:	f005 fad6 	bl	8007ec2 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8002916:	2201      	movs	r2, #1
 8002918:	4b79      	ldr	r3, [pc, #484]	; (8002b00 <SX1276SetRx+0x264>)
 800291a:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 800291c:	2d00      	cmp	r5, #0
 800291e:	d000      	beq.n	8002922 <SX1276SetRx+0x86>
 8002920:	e0d0      	b.n	8002ac4 <SX1276SetRx+0x228>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8002922:	4b77      	ldr	r3, [pc, #476]	; (8002b00 <SX1276SetRx+0x264>)
 8002924:	795b      	ldrb	r3, [r3, #5]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d100      	bne.n	800292c <SX1276SetRx+0x90>
 800292a:	e0d4      	b.n	8002ad6 <SX1276SetRx+0x23a>
        if( rxContinuous == true )
 800292c:	2e00      	cmp	r6, #0
 800292e:	d000      	beq.n	8002932 <SX1276SetRx+0x96>
 8002930:	e0e1      	b.n	8002af6 <SX1276SetRx+0x25a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8002932:	2006      	movs	r0, #6
 8002934:	f7ff ff56 	bl	80027e4 <SX1276SetOpMode>
}
 8002938:	bd70      	pop	{r4, r5, r6, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
 800293a:	2355      	movs	r3, #85	; 0x55
 800293c:	4a70      	ldr	r2, [pc, #448]	; (8002b00 <SX1276SetRx+0x264>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d024      	beq.n	800298e <SX1276SetRx+0xf2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8002944:	2033      	movs	r0, #51	; 0x33
 8002946:	f7ff fdb7 	bl	80024b8 <SX1276Read>
 800294a:	2141      	movs	r1, #65	; 0x41
 800294c:	4301      	orrs	r1, r0
 800294e:	b2c9      	uxtb	r1, r1
 8002950:	2033      	movs	r0, #51	; 0x33
 8002952:	f7ff fd59 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8002956:	2119      	movs	r1, #25
 8002958:	203b      	movs	r0, #59	; 0x3b
 800295a:	f7ff fd55 	bl	8002408 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800295e:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <SX1276SetRx+0x264>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	2b08      	cmp	r3, #8
 8002964:	d87b      	bhi.n	8002a5e <SX1276SetRx+0x1c2>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8002966:	2031      	movs	r0, #49	; 0x31
 8002968:	f7ff fda6 	bl	80024b8 <SX1276Read>
 800296c:	217f      	movs	r1, #127	; 0x7f
 800296e:	4001      	ands	r1, r0
 8002970:	2031      	movs	r0, #49	; 0x31
 8002972:	f7ff fd49 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 8002976:	2100      	movs	r1, #0
 8002978:	2030      	movs	r0, #48	; 0x30
 800297a:	f7ff fd45 	bl	8002408 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800297e:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <SX1276SetRx+0x264>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	2b08      	cmp	r3, #8
 8002984:	d875      	bhi.n	8002a72 <SX1276SetRx+0x1d6>
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4a5f      	ldr	r2, [pc, #380]	; (8002b08 <SX1276SetRx+0x26c>)
 800298a:	58d3      	ldr	r3, [r2, r3]
 800298c:	469f      	mov	pc, r3
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800298e:	2033      	movs	r0, #51	; 0x33
 8002990:	f7ff fd92 	bl	80024b8 <SX1276Read>
 8002994:	b241      	sxtb	r1, r0
 8002996:	2341      	movs	r3, #65	; 0x41
 8002998:	4399      	bics	r1, r3
 800299a:	2001      	movs	r0, #1
 800299c:	4301      	orrs	r1, r0
 800299e:	b2c9      	uxtb	r1, r1
 80029a0:	2033      	movs	r0, #51	; 0x33
 80029a2:	f7ff fd31 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80029a6:	211d      	movs	r1, #29
 80029a8:	203b      	movs	r0, #59	; 0x3b
 80029aa:	f7ff fd2d 	bl	8002408 <SX1276Write>
 80029ae:	e7d6      	b.n	800295e <SX1276SetRx+0xc2>
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 80029b0:	2148      	movs	r1, #72	; 0x48
 80029b2:	202f      	movs	r0, #47	; 0x2f
 80029b4:	f7ff fd28 	bl	8002408 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80029b8:	4b51      	ldr	r3, [pc, #324]	; (8002b00 <SX1276SetRx+0x264>)
 80029ba:	6898      	ldr	r0, [r3, #8]
 80029bc:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <SX1276SetRx+0x270>)
 80029be:	469c      	mov	ip, r3
 80029c0:	4460      	add	r0, ip
 80029c2:	f7ff fd2d 	bl	8002420 <SX1276SetChannel>
                    break;
 80029c6:	e054      	b.n	8002a72 <SX1276SetRx+0x1d6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80029c8:	2144      	movs	r1, #68	; 0x44
 80029ca:	202f      	movs	r0, #47	; 0x2f
 80029cc:	f7ff fd1c 	bl	8002408 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80029d0:	4b4b      	ldr	r3, [pc, #300]	; (8002b00 <SX1276SetRx+0x264>)
 80029d2:	6898      	ldr	r0, [r3, #8]
 80029d4:	4b4e      	ldr	r3, [pc, #312]	; (8002b10 <SX1276SetRx+0x274>)
 80029d6:	469c      	mov	ip, r3
 80029d8:	4460      	add	r0, ip
 80029da:	f7ff fd21 	bl	8002420 <SX1276SetChannel>
                    break;
 80029de:	e048      	b.n	8002a72 <SX1276SetRx+0x1d6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80029e0:	2144      	movs	r1, #68	; 0x44
 80029e2:	202f      	movs	r0, #47	; 0x2f
 80029e4:	f7ff fd10 	bl	8002408 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80029e8:	4b45      	ldr	r3, [pc, #276]	; (8002b00 <SX1276SetRx+0x264>)
 80029ea:	6898      	ldr	r0, [r3, #8]
 80029ec:	4b49      	ldr	r3, [pc, #292]	; (8002b14 <SX1276SetRx+0x278>)
 80029ee:	469c      	mov	ip, r3
 80029f0:	4460      	add	r0, ip
 80029f2:	f7ff fd15 	bl	8002420 <SX1276SetChannel>
                    break;
 80029f6:	e03c      	b.n	8002a72 <SX1276SetRx+0x1d6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80029f8:	2144      	movs	r1, #68	; 0x44
 80029fa:	202f      	movs	r0, #47	; 0x2f
 80029fc:	f7ff fd04 	bl	8002408 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8002a00:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <SX1276SetRx+0x264>)
 8002a02:	6898      	ldr	r0, [r3, #8]
 8002a04:	4b44      	ldr	r3, [pc, #272]	; (8002b18 <SX1276SetRx+0x27c>)
 8002a06:	469c      	mov	ip, r3
 8002a08:	4460      	add	r0, ip
 8002a0a:	f7ff fd09 	bl	8002420 <SX1276SetChannel>
                    break;
 8002a0e:	e030      	b.n	8002a72 <SX1276SetRx+0x1d6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8002a10:	2144      	movs	r1, #68	; 0x44
 8002a12:	202f      	movs	r0, #47	; 0x2f
 8002a14:	f7ff fcf8 	bl	8002408 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8002a18:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <SX1276SetRx+0x264>)
 8002a1a:	6898      	ldr	r0, [r3, #8]
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <SX1276SetRx+0x280>)
 8002a1e:	469c      	mov	ip, r3
 8002a20:	4460      	add	r0, ip
 8002a22:	f7ff fcfd 	bl	8002420 <SX1276SetChannel>
                    break;
 8002a26:	e024      	b.n	8002a72 <SX1276SetRx+0x1d6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8002a28:	2144      	movs	r1, #68	; 0x44
 8002a2a:	202f      	movs	r0, #47	; 0x2f
 8002a2c:	f7ff fcec 	bl	8002408 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8002a30:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <SX1276SetRx+0x264>)
 8002a32:	6898      	ldr	r0, [r3, #8]
 8002a34:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <SX1276SetRx+0x284>)
 8002a36:	469c      	mov	ip, r3
 8002a38:	4460      	add	r0, ip
 8002a3a:	f7ff fcf1 	bl	8002420 <SX1276SetChannel>
                    break;
 8002a3e:	e018      	b.n	8002a72 <SX1276SetRx+0x1d6>
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8002a40:	2140      	movs	r1, #64	; 0x40
 8002a42:	202f      	movs	r0, #47	; 0x2f
 8002a44:	f7ff fce0 	bl	8002408 <SX1276Write>
                    break;
 8002a48:	e013      	b.n	8002a72 <SX1276SetRx+0x1d6>
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	202f      	movs	r0, #47	; 0x2f
 8002a4e:	f7ff fcdb 	bl	8002408 <SX1276Write>
                    break;
 8002a52:	e00e      	b.n	8002a72 <SX1276SetRx+0x1d6>
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8002a54:	2140      	movs	r1, #64	; 0x40
 8002a56:	202f      	movs	r0, #47	; 0x2f
 8002a58:	f7ff fcd6 	bl	8002408 <SX1276Write>
                    break;
 8002a5c:	e009      	b.n	8002a72 <SX1276SetRx+0x1d6>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8002a5e:	2031      	movs	r0, #49	; 0x31
 8002a60:	f7ff fd2a 	bl	80024b8 <SX1276Read>
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	4249      	negs	r1, r1
 8002a68:	4301      	orrs	r1, r0
 8002a6a:	b2c9      	uxtb	r1, r1
 8002a6c:	2031      	movs	r0, #49	; 0x31
 8002a6e:	f7ff fccb 	bl	8002408 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <SX1276SetRx+0x264>)
 8002a74:	2256      	movs	r2, #86	; 0x56
 8002a76:	5c9e      	ldrb	r6, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002a78:	3a03      	subs	r2, #3
 8002a7a:	5c9b      	ldrb	r3, [r3, r2]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d014      	beq.n	8002aaa <SX1276SetRx+0x20e>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8002a80:	211d      	movs	r1, #29
 8002a82:	2011      	movs	r0, #17
 8002a84:	f7ff fcc0 	bl	8002408 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8002a88:	2040      	movs	r0, #64	; 0x40
 8002a8a:	f7ff fd15 	bl	80024b8 <SX1276Read>
 8002a8e:	2133      	movs	r1, #51	; 0x33
 8002a90:	4001      	ands	r1, r0
 8002a92:	2040      	movs	r0, #64	; 0x40
 8002a94:	f7ff fcb8 	bl	8002408 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8002a98:	2100      	movs	r1, #0
 8002a9a:	200f      	movs	r0, #15
 8002a9c:	f7ff fcb4 	bl	8002408 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	200d      	movs	r0, #13
 8002aa4:	f7ff fcb0 	bl	8002408 <SX1276Write>
        break;
 8002aa8:	e72e      	b.n	8002908 <SX1276SetRx+0x6c>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8002aaa:	211f      	movs	r1, #31
 8002aac:	2011      	movs	r0, #17
 8002aae:	f7ff fcab 	bl	8002408 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8002ab2:	2040      	movs	r0, #64	; 0x40
 8002ab4:	f7ff fd00 	bl	80024b8 <SX1276Read>
 8002ab8:	213f      	movs	r1, #63	; 0x3f
 8002aba:	4001      	ands	r1, r0
 8002abc:	2040      	movs	r0, #64	; 0x40
 8002abe:	f7ff fca3 	bl	8002408 <SX1276Write>
 8002ac2:	e7e9      	b.n	8002a98 <SX1276SetRx+0x1fc>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8002ac4:	4c17      	ldr	r4, [pc, #92]	; (8002b24 <SX1276SetRx+0x288>)
 8002ac6:	0029      	movs	r1, r5
 8002ac8:	0020      	movs	r0, r4
 8002aca:	f003 ff0b 	bl	80068e4 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8002ace:	0020      	movs	r0, r4
 8002ad0:	f003 fe52 	bl	8006778 <TimerStart>
 8002ad4:	e725      	b.n	8002922 <SX1276SetRx+0x86>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002ad6:	2005      	movs	r0, #5
 8002ad8:	f7ff fe84 	bl	80027e4 <SX1276SetOpMode>
        if( rxContinuous == false )
 8002adc:	2e00      	cmp	r6, #0
 8002ade:	d000      	beq.n	8002ae2 <SX1276SetRx+0x246>
 8002ae0:	e72a      	b.n	8002938 <SX1276SetRx+0x9c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <SX1276SetRx+0x264>)
 8002ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae6:	4c10      	ldr	r4, [pc, #64]	; (8002b28 <SX1276SetRx+0x28c>)
 8002ae8:	0020      	movs	r0, r4
 8002aea:	f003 fefb 	bl	80068e4 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8002aee:	0020      	movs	r0, r4
 8002af0:	f003 fe42 	bl	8006778 <TimerStart>
 8002af4:	e720      	b.n	8002938 <SX1276SetRx+0x9c>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8002af6:	2005      	movs	r0, #5
 8002af8:	f7ff fe74 	bl	80027e4 <SX1276SetOpMode>
 8002afc:	e71c      	b.n	8002938 <SX1276SetRx+0x9c>
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	20000704 	.word	0x20000704
 8002b04:	20000244 	.word	0x20000244
 8002b08:	0800a2d8 	.word	0x0800a2d8
 8002b0c:	00001e82 	.word	0x00001e82
 8002b10:	000028b4 	.word	0x000028b4
 8002b14:	00003d04 	.word	0x00003d04
 8002b18:	0000515e 	.word	0x0000515e
 8002b1c:	00007a12 	.word	0x00007a12
 8002b20:	0000a2c6 	.word	0x0000a2c6
 8002b24:	2000076c 	.word	0x2000076c
 8002b28:	200006f0 	.word	0x200006f0

08002b2c <SX1276SetTx>:
{
 8002b2c:	b510      	push	{r4, lr}
 8002b2e:	0001      	movs	r1, r0
    TimerSetValue( &TxTimeoutTimer, timeout );
 8002b30:	482c      	ldr	r0, [pc, #176]	; (8002be4 <SX1276SetTx+0xb8>)
 8002b32:	f003 fed7 	bl	80068e4 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <SX1276SetTx+0xbc>)
 8002b38:	795b      	ldrb	r3, [r3, #5]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <SX1276SetTx+0x2a>
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d027      	beq.n	8002b92 <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 8002b42:	2202      	movs	r2, #2
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <SX1276SetTx+0xbc>)
 8002b46:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8002b48:	4826      	ldr	r0, [pc, #152]	; (8002be4 <SX1276SetTx+0xb8>)
 8002b4a:	f003 fe15 	bl	8006778 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8002b4e:	2003      	movs	r0, #3
 8002b50:	f7ff fe48 	bl	80027e4 <SX1276SetOpMode>
}
 8002b54:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002b56:	2040      	movs	r0, #64	; 0x40
 8002b58:	f7ff fcae 	bl	80024b8 <SX1276Read>
 8002b5c:	b240      	sxtb	r0, r0
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8002b5e:	2103      	movs	r1, #3
 8002b60:	4001      	ands	r1, r0
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8002b62:	2010      	movs	r0, #16
 8002b64:	4301      	orrs	r1, r0
 8002b66:	b249      	sxtb	r1, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002b68:	b2c9      	uxtb	r1, r1
 8002b6a:	2040      	movs	r0, #64	; 0x40
 8002b6c:	f7ff fc4c 	bl	8002408 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8002b70:	2041      	movs	r0, #65	; 0x41
 8002b72:	f7ff fca1 	bl	80024b8 <SX1276Read>
 8002b76:	213e      	movs	r1, #62	; 0x3e
 8002b78:	4001      	ands	r1, r0
 8002b7a:	2041      	movs	r0, #65	; 0x41
 8002b7c:	f7ff fc44 	bl	8002408 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8002b80:	2035      	movs	r0, #53	; 0x35
 8002b82:	f7ff fc99 	bl	80024b8 <SX1276Read>
 8002b86:	233f      	movs	r3, #63	; 0x3f
 8002b88:	4018      	ands	r0, r3
 8002b8a:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <SX1276SetTx+0xbc>)
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	54d0      	strb	r0, [r2, r3]
        break;
 8002b90:	e7d7      	b.n	8002b42 <SX1276SetTx+0x16>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002b92:	2353      	movs	r3, #83	; 0x53
 8002b94:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <SX1276SetTx+0xbc>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d111      	bne.n	8002bc0 <SX1276SetTx+0x94>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002b9c:	21f7      	movs	r1, #247	; 0xf7
 8002b9e:	2011      	movs	r0, #17
 8002ba0:	f7ff fc32 	bl	8002408 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8002ba4:	2040      	movs	r0, #64	; 0x40
 8002ba6:	f7ff fc87 	bl	80024b8 <SX1276Read>
 8002baa:	b240      	sxtb	r0, r0
 8002bac:	213f      	movs	r1, #63	; 0x3f
 8002bae:	4001      	ands	r1, r0
 8002bb0:	2040      	movs	r0, #64	; 0x40
 8002bb2:	4301      	orrs	r1, r0
 8002bb4:	b249      	sxtb	r1, r1
 8002bb6:	b2c9      	uxtb	r1, r1
 8002bb8:	2040      	movs	r0, #64	; 0x40
 8002bba:	f7ff fc25 	bl	8002408 <SX1276Write>
 8002bbe:	e7c0      	b.n	8002b42 <SX1276SetTx+0x16>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002bc0:	21f5      	movs	r1, #245	; 0xf5
 8002bc2:	2011      	movs	r0, #17
 8002bc4:	f7ff fc20 	bl	8002408 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8002bc8:	2040      	movs	r0, #64	; 0x40
 8002bca:	f7ff fc75 	bl	80024b8 <SX1276Read>
 8002bce:	b240      	sxtb	r0, r0
 8002bd0:	2133      	movs	r1, #51	; 0x33
 8002bd2:	4001      	ands	r1, r0
 8002bd4:	2040      	movs	r0, #64	; 0x40
 8002bd6:	4301      	orrs	r1, r0
 8002bd8:	b249      	sxtb	r1, r1
 8002bda:	b2c9      	uxtb	r1, r1
 8002bdc:	2040      	movs	r0, #64	; 0x40
 8002bde:	f7ff fc13 	bl	8002408 <SX1276Write>
 8002be2:	e7ae      	b.n	8002b42 <SX1276SetTx+0x16>
 8002be4:	200006dc 	.word	0x200006dc
 8002be8:	20000704 	.word	0x20000704

08002bec <SX1276StartCad>:
{
 8002bec:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <SX1276StartCad+0x30>)
 8002bf0:	795b      	ldrb	r3, [r3, #5]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d111      	bne.n	8002c1a <SX1276StartCad+0x2e>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002bf6:	21fa      	movs	r1, #250	; 0xfa
 8002bf8:	2011      	movs	r0, #17
 8002bfa:	f7ff fc05 	bl	8002408 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8002bfe:	2040      	movs	r0, #64	; 0x40
 8002c00:	f7ff fc5a 	bl	80024b8 <SX1276Read>
 8002c04:	2403      	movs	r4, #3
 8002c06:	43a0      	bics	r0, r4
 8002c08:	b2c1      	uxtb	r1, r0
 8002c0a:	2040      	movs	r0, #64	; 0x40
 8002c0c:	f7ff fbfc 	bl	8002408 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8002c10:	4b02      	ldr	r3, [pc, #8]	; (8002c1c <SX1276StartCad+0x30>)
 8002c12:	711c      	strb	r4, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8002c14:	2007      	movs	r0, #7
 8002c16:	f7ff fde5 	bl	80027e4 <SX1276SetOpMode>
}
 8002c1a:	bd10      	pop	{r4, pc}
 8002c1c:	20000704 	.word	0x20000704

08002c20 <SX1276SetModem>:
{
 8002c20:	b510      	push	{r4, lr}
 8002c22:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7ff fc47 	bl	80024b8 <SX1276Read>
 8002c2a:	0603      	lsls	r3, r0, #24
 8002c2c:	d41f      	bmi.n	8002c6e <SX1276SetModem+0x4e>
        SX1276.Settings.Modem = MODEM_FSK;
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <SX1276SetModem+0x7c>)
 8002c32:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <SX1276SetModem+0x7c>)
 8002c36:	795b      	ldrb	r3, [r3, #5]
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d017      	beq.n	8002c6c <SX1276SetModem+0x4c>
    SX1276.Settings.Modem = modem;
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <SX1276SetModem+0x7c>)
 8002c3e:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8002c40:	2c01      	cmp	r4, #1
 8002c42:	d118      	bne.n	8002c76 <SX1276SetModem+0x56>
        SX1276SetSleep( );
 8002c44:	f7ff fe02 	bl	800284c <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f7ff fc35 	bl	80024b8 <SX1276Read>
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	4249      	negs	r1, r1
 8002c52:	4301      	orrs	r1, r0
 8002c54:	b2c9      	uxtb	r1, r1
 8002c56:	2001      	movs	r0, #1
 8002c58:	f7ff fbd6 	bl	8002408 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2040      	movs	r0, #64	; 0x40
 8002c60:	f7ff fbd2 	bl	8002408 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8002c64:	2100      	movs	r1, #0
 8002c66:	2041      	movs	r0, #65	; 0x41
 8002c68:	f7ff fbce 	bl	8002408 <SX1276Write>
}
 8002c6c:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <SX1276SetModem+0x7c>)
 8002c72:	715a      	strb	r2, [r3, #5]
 8002c74:	e7de      	b.n	8002c34 <SX1276SetModem+0x14>
        SX1276SetSleep( );
 8002c76:	f7ff fde9 	bl	800284c <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7ff fc1c 	bl	80024b8 <SX1276Read>
 8002c80:	217f      	movs	r1, #127	; 0x7f
 8002c82:	4001      	ands	r1, r0
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7ff fbbf 	bl	8002408 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2040      	movs	r0, #64	; 0x40
 8002c8e:	f7ff fbbb 	bl	8002408 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8002c92:	2130      	movs	r1, #48	; 0x30
 8002c94:	2041      	movs	r0, #65	; 0x41
 8002c96:	f7ff fbb7 	bl	8002408 <SX1276Write>
        break;
 8002c9a:	e7e7      	b.n	8002c6c <SX1276SetModem+0x4c>
 8002c9c:	20000704 	.word	0x20000704

08002ca0 <SX1276Init>:
{
 8002ca0:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <SX1276Init+0x7c>)
 8002ca4:	6058      	str	r0, [r3, #4]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8002ca6:	4c1e      	ldr	r4, [pc, #120]	; (8002d20 <SX1276Init+0x80>)
 8002ca8:	0021      	movs	r1, r4
 8002caa:	481e      	ldr	r0, [pc, #120]	; (8002d24 <SX1276Init+0x84>)
 8002cac:	f003 fd5c 	bl	8006768 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8002cb0:	0021      	movs	r1, r4
 8002cb2:	481d      	ldr	r0, [pc, #116]	; (8002d28 <SX1276Init+0x88>)
 8002cb4:	f003 fd58 	bl	8006768 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8002cb8:	0021      	movs	r1, r4
 8002cba:	481c      	ldr	r0, [pc, #112]	; (8002d2c <SX1276Init+0x8c>)
 8002cbc:	f003 fd54 	bl	8006768 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8002cc0:	4c1b      	ldr	r4, [pc, #108]	; (8002d30 <SX1276Init+0x90>)
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	4798      	blx	r3
    SX1276Reset( );
 8002cca:	f7ff fb53 	bl	8002374 <SX1276Reset>
    RxChainCalibration( );
 8002cce:	f7ff fbff 	bl	80024d0 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7ff fd86 	bl	80027e4 <SX1276SetOpMode>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4815      	ldr	r0, [pc, #84]	; (8002d34 <SX1276Init+0x94>)
 8002cde:	4798      	blx	r3
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	e00c      	b.n	8002cfe <SX1276Init+0x5e>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8002ce4:	4d14      	ldr	r5, [pc, #80]	; (8002d38 <SX1276Init+0x98>)
 8002ce6:	0066      	lsls	r6, r4, #1
 8002ce8:	1936      	adds	r6, r6, r4
 8002cea:	5d70      	ldrb	r0, [r6, r5]
 8002cec:	f7ff ff98 	bl	8002c20 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8002cf0:	19ad      	adds	r5, r5, r6
 8002cf2:	78a9      	ldrb	r1, [r5, #2]
 8002cf4:	7868      	ldrb	r0, [r5, #1]
 8002cf6:	f7ff fb87 	bl	8002408 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002cfa:	3401      	adds	r4, #1
 8002cfc:	b2e4      	uxtb	r4, r4
 8002cfe:	2c0f      	cmp	r4, #15
 8002d00:	d9f0      	bls.n	8002ce4 <SX1276Init+0x44>
    SX1276SetModem( MODEM_FSK );
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff ff8c 	bl	8002c20 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <SX1276Init+0x9c>)
 8002d0c:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <SX1276Init+0x90>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4798      	blx	r3
 8002d16:	3002      	adds	r0, #2
}
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	20000344 	.word	0x20000344
 8002d20:	08003aed 	.word	0x08003aed
 8002d24:	200006dc 	.word	0x200006dc
 8002d28:	2000076c 	.word	0x2000076c
 8002d2c:	200006f0 	.word	0x200006f0
 8002d30:	20000244 	.word	0x20000244
 8002d34:	20000014 	.word	0x20000014
 8002d38:	0800a2fc 	.word	0x0800a2fc
 8002d3c:	20000704 	.word	0x20000704

08002d40 <SX1276IsChannelFree>:
{
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	0004      	movs	r4, r0
 8002d44:	000d      	movs	r5, r1
 8002d46:	0017      	movs	r7, r2
 8002d48:	001e      	movs	r6, r3
    SX1276SetModem( modem );
 8002d4a:	f7ff ff69 	bl	8002c20 <SX1276SetModem>
    SX1276SetChannel( freq );
 8002d4e:	0028      	movs	r0, r5
 8002d50:	f7ff fb66 	bl	8002420 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002d54:	2005      	movs	r0, #5
 8002d56:	f7ff fd45 	bl	80027e4 <SX1276SetOpMode>
    DelayMs( 1 );
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f003 fc54 	bl	8006608 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8002d60:	f003 fde5 	bl	800692e <TimerGetCurrentTime>
 8002d64:	0005      	movs	r5, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8002d66:	0028      	movs	r0, r5
 8002d68:	f003 fded 	bl	8006946 <TimerGetElapsedTime>
 8002d6c:	42b0      	cmp	r0, r6
 8002d6e:	d206      	bcs.n	8002d7e <SX1276IsChannelFree+0x3e>
        rssi = SX1276ReadRssi( modem );
 8002d70:	0020      	movs	r0, r4
 8002d72:	f7ff fd0f 	bl	8002794 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8002d76:	42b8      	cmp	r0, r7
 8002d78:	ddf5      	ble.n	8002d66 <SX1276IsChannelFree+0x26>
            status = false;
 8002d7a:	2400      	movs	r4, #0
 8002d7c:	e000      	b.n	8002d80 <SX1276IsChannelFree+0x40>
    bool status = true;
 8002d7e:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8002d80:	f7ff fd64 	bl	800284c <SX1276SetSleep>
}
 8002d84:	0020      	movs	r0, r4
 8002d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d88 <SX1276Random>:
{
 8002d88:	b570      	push	{r4, r5, r6, lr}
    SX1276SetModem( MODEM_LORA );
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f7ff ff48 	bl	8002c20 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002d90:	21ff      	movs	r1, #255	; 0xff
 8002d92:	2011      	movs	r0, #17
 8002d94:	f7ff fb38 	bl	8002408 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002d98:	2005      	movs	r0, #5
 8002d9a:	f7ff fd23 	bl	80027e4 <SX1276SetOpMode>
    uint32_t rnd = 0;
 8002d9e:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 8002da0:	2400      	movs	r4, #0
 8002da2:	e00b      	b.n	8002dbc <SX1276Random+0x34>
        DelayMs( 1 );
 8002da4:	2001      	movs	r0, #1
 8002da6:	f003 fc2f 	bl	8006608 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8002daa:	202c      	movs	r0, #44	; 0x2c
 8002dac:	f7ff fb84 	bl	80024b8 <SX1276Read>
 8002db0:	2301      	movs	r3, #1
 8002db2:	4018      	ands	r0, r3
 8002db4:	40a0      	lsls	r0, r4
 8002db6:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8002db8:	3401      	adds	r4, #1
 8002dba:	b2e4      	uxtb	r4, r4
 8002dbc:	2c1f      	cmp	r4, #31
 8002dbe:	d9f1      	bls.n	8002da4 <SX1276Random+0x1c>
    SX1276SetSleep( );
 8002dc0:	f7ff fd44 	bl	800284c <SX1276SetSleep>
}
 8002dc4:	0028      	movs	r0, r5
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}

08002dc8 <SX1276SetRxConfig>:
{
 8002dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dca:	46de      	mov	lr, fp
 8002dcc:	4657      	mov	r7, sl
 8002dce:	464e      	mov	r6, r9
 8002dd0:	4645      	mov	r5, r8
 8002dd2:	b5e0      	push	{r5, r6, r7, lr}
 8002dd4:	b089      	sub	sp, #36	; 0x24
 8002dd6:	0005      	movs	r5, r0
 8002dd8:	9104      	str	r1, [sp, #16]
 8002dda:	0014      	movs	r4, r2
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	ab12      	add	r3, sp, #72	; 0x48
 8002de0:	cb04      	ldmia	r3!, {r2}
 8002de2:	9205      	str	r2, [sp, #20]
 8002de4:	881e      	ldrh	r6, [r3, #0]
 8002de6:	ab14      	add	r3, sp, #80	; 0x50
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	9306      	str	r3, [sp, #24]
 8002dec:	ab15      	add	r3, sp, #84	; 0x54
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4699      	mov	r9, r3
 8002df2:	ab16      	add	r3, sp, #88	; 0x58
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	ab17      	add	r3, sp, #92	; 0x5c
 8002dfa:	781f      	ldrb	r7, [r3, #0]
 8002dfc:	ab18      	add	r3, sp, #96	; 0x60
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	9307      	str	r3, [sp, #28]
 8002e02:	ab19      	add	r3, sp, #100	; 0x64
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4698      	mov	r8, r3
 8002e08:	ab1a      	add	r3, sp, #104	; 0x68
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	469a      	mov	sl, r3
 8002e0e:	ab1b      	add	r3, sp, #108	; 0x6c
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	469b      	mov	fp, r3
    SX1276SetModem( modem );
 8002e14:	f7ff ff04 	bl	8002c20 <SX1276SetModem>
    switch( modem )
 8002e18:	2d00      	cmp	r5, #0
 8002e1a:	d009      	beq.n	8002e30 <SX1276SetRxConfig+0x68>
 8002e1c:	2d01      	cmp	r5, #1
 8002e1e:	d100      	bne.n	8002e22 <SX1276SetRxConfig+0x5a>
 8002e20:	e08e      	b.n	8002f40 <SX1276SetRxConfig+0x178>
}
 8002e22:	b009      	add	sp, #36	; 0x24
 8002e24:	bc3c      	pop	{r2, r3, r4, r5}
 8002e26:	4690      	mov	r8, r2
 8002e28:	4699      	mov	r9, r3
 8002e2a:	46a2      	mov	sl, r4
 8002e2c:	46ab      	mov	fp, r5
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002e30:	4db2      	ldr	r5, [pc, #712]	; (80030fc <SX1276SetRxConfig+0x334>)
 8002e32:	9b04      	ldr	r3, [sp, #16]
 8002e34:	616b      	str	r3, [r5, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8002e36:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8002e38:	9a05      	ldr	r2, [sp, #20]
 8002e3a:	61aa      	str	r2, [r5, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002e3c:	2322      	movs	r3, #34	; 0x22
 8002e3e:	4649      	mov	r1, r9
 8002e40:	54e9      	strb	r1, [r5, r3]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8002e42:	3301      	adds	r3, #1
 8002e44:	9a00      	ldr	r2, [sp, #0]
 8002e46:	4690      	mov	r8, r2
 8002e48:	54ea      	strb	r2, [r5, r3]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	54ef      	strb	r7, [r5, r3]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8002e4e:	3301      	adds	r3, #1
 8002e50:	4652      	mov	r2, sl
 8002e52:	54ea      	strb	r2, [r5, r3]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8002e54:	3301      	adds	r3, #1
 8002e56:	465a      	mov	r2, fp
 8002e58:	54ea      	strb	r2, [r5, r3]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002e5a:	842e      	strh	r6, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8002e5c:	0020      	movs	r0, r4
 8002e5e:	f7ff f987 	bl	8002170 <__aeabi_ui2d>
 8002e62:	0003      	movs	r3, r0
 8002e64:	000c      	movs	r4, r1
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	9401      	str	r4, [sp, #4]
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	000b      	movs	r3, r1
 8002e6e:	2000      	movs	r0, #0
 8002e70:	49a3      	ldr	r1, [pc, #652]	; (8003100 <SX1276SetRxConfig+0x338>)
 8002e72:	f7fd ff1d 	bl	8000cb0 <__aeabi_ddiv>
 8002e76:	2200      	movs	r2, #0
 8002e78:	4ba2      	ldr	r3, [pc, #648]	; (8003104 <SX1276SetRxConfig+0x33c>)
 8002e7a:	f7fe fb4d 	bl	8001518 <__aeabi_dmul>
 8002e7e:	9002      	str	r0, [sp, #8]
 8002e80:	9103      	str	r1, [sp, #12]
 8002e82:	9806      	ldr	r0, [sp, #24]
 8002e84:	f7ff f932 	bl	80020ec <__aeabi_i2d>
 8002e88:	9a02      	ldr	r2, [sp, #8]
 8002e8a:	9b03      	ldr	r3, [sp, #12]
 8002e8c:	f7fe fb44 	bl	8001518 <__aeabi_dmul>
 8002e90:	2200      	movs	r2, #0
 8002e92:	4b9d      	ldr	r3, [pc, #628]	; (8003108 <SX1276SetRxConfig+0x340>)
 8002e94:	f7fe fb40 	bl	8001518 <__aeabi_dmul>
 8002e98:	f7fd fb1c 	bl	80004d4 <__aeabi_d2uiz>
 8002e9c:	62e8      	str	r0, [r5, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002e9e:	9a00      	ldr	r2, [sp, #0]
 8002ea0:	9b01      	ldr	r3, [sp, #4]
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	4999      	ldr	r1, [pc, #612]	; (800310c <SX1276SetRxConfig+0x344>)
 8002ea6:	f7fd ff03 	bl	8000cb0 <__aeabi_ddiv>
 8002eaa:	f7fd fb13 	bl	80004d4 <__aeabi_d2uiz>
 8002eae:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002eb0:	0a21      	lsrs	r1, r4, #8
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	f7ff faa8 	bl	8002408 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002eb8:	b2e1      	uxtb	r1, r4
 8002eba:	2003      	movs	r0, #3
 8002ebc:	f7ff faa4 	bl	8002408 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8002ec0:	9804      	ldr	r0, [sp, #16]
 8002ec2:	f7ff fa21 	bl	8002308 <GetFskBandwidthRegValue>
 8002ec6:	0001      	movs	r1, r0
 8002ec8:	2012      	movs	r0, #18
 8002eca:	f7ff fa9d 	bl	8002408 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8002ece:	9805      	ldr	r0, [sp, #20]
 8002ed0:	f7ff fa1a 	bl	8002308 <GetFskBandwidthRegValue>
 8002ed4:	0001      	movs	r1, r0
 8002ed6:	2013      	movs	r0, #19
 8002ed8:	f7ff fa96 	bl	8002408 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002edc:	0a31      	lsrs	r1, r6, #8
 8002ede:	2025      	movs	r0, #37	; 0x25
 8002ee0:	f7ff fa92 	bl	8002408 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002ee4:	b2f1      	uxtb	r1, r6
 8002ee6:	2026      	movs	r0, #38	; 0x26
 8002ee8:	f7ff fa8e 	bl	8002408 <SX1276Write>
            if( fixLen == 1 )
 8002eec:	464b      	mov	r3, r9
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01e      	beq.n	8002f30 <SX1276SetRxConfig+0x168>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	2032      	movs	r0, #50	; 0x32
 8002ef6:	f7ff fa87 	bl	8002408 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8002efa:	2030      	movs	r0, #48	; 0x30
 8002efc:	f7ff fadc 	bl	80024b8 <SX1276Read>
 8002f00:	b240      	sxtb	r0, r0
                           RF_PACKETCONFIG1_CRC_MASK &
 8002f02:	216f      	movs	r1, #111	; 0x6f
 8002f04:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002f06:	464b      	mov	r3, r9
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d016      	beq.n	8002f3a <SX1276SetRxConfig+0x172>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	4319      	orrs	r1, r3
                           ( crcOn << 4 ) );
 8002f10:	013f      	lsls	r7, r7, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002f12:	4339      	orrs	r1, r7
            SX1276Write( REG_PACKETCONFIG1,
 8002f14:	b2c9      	uxtb	r1, r1
 8002f16:	2030      	movs	r0, #48	; 0x30
 8002f18:	f7ff fa76 	bl	8002408 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002f1c:	2031      	movs	r0, #49	; 0x31
 8002f1e:	f7ff facb 	bl	80024b8 <SX1276Read>
 8002f22:	2140      	movs	r1, #64	; 0x40
 8002f24:	4301      	orrs	r1, r0
 8002f26:	b2c9      	uxtb	r1, r1
 8002f28:	2031      	movs	r0, #49	; 0x31
 8002f2a:	f7ff fa6d 	bl	8002408 <SX1276Write>
        break;
 8002f2e:	e778      	b.n	8002e22 <SX1276SetRxConfig+0x5a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8002f30:	21ff      	movs	r1, #255	; 0xff
 8002f32:	2032      	movs	r0, #50	; 0x32
 8002f34:	f7ff fa68 	bl	8002408 <SX1276Write>
 8002f38:	e7df      	b.n	8002efa <SX1276SetRxConfig+0x132>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	e7e6      	b.n	8002f0e <SX1276SetRxConfig+0x146>
            if( bandwidth > 2 )
 8002f40:	9b04      	ldr	r3, [sp, #16]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d900      	bls.n	8002f48 <SX1276SetRxConfig+0x180>
 8002f46:	e7fe      	b.n	8002f46 <SX1276SetRxConfig+0x17e>
            bandwidth += 7;
 8002f48:	9d04      	ldr	r5, [sp, #16]
 8002f4a:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002f4c:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <SX1276SetRxConfig+0x334>)
 8002f4e:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8002f50:	649c      	str	r4, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8002f52:	224d      	movs	r2, #77	; 0x4d
 8002f54:	4669      	mov	r1, sp
 8002f56:	7a09      	ldrb	r1, [r1, #8]
 8002f58:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	529e      	strh	r6, [r3, r2]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002f5e:	3202      	adds	r2, #2
 8002f60:	4649      	mov	r1, r9
 8002f62:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8002f64:	3201      	adds	r2, #1
 8002f66:	4669      	mov	r1, sp
 8002f68:	7809      	ldrb	r1, [r1, #0]
 8002f6a:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8002f6c:	3201      	adds	r2, #1
 8002f6e:	549f      	strb	r7, [r3, r2]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002f70:	3201      	adds	r2, #1
 8002f72:	4669      	mov	r1, sp
 8002f74:	7f09      	ldrb	r1, [r1, #28]
 8002f76:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8002f78:	3201      	adds	r2, #1
 8002f7a:	4641      	mov	r1, r8
 8002f7c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002f7e:	3201      	adds	r2, #1
 8002f80:	4651      	mov	r1, sl
 8002f82:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002f84:	3201      	adds	r2, #1
 8002f86:	4659      	mov	r1, fp
 8002f88:	5499      	strb	r1, [r3, r2]
            if( datarate > 12 )
 8002f8a:	2c0c      	cmp	r4, #12
 8002f8c:	d803      	bhi.n	8002f96 <SX1276SetRxConfig+0x1ce>
            else if( datarate < 6 )
 8002f8e:	2c05      	cmp	r4, #5
 8002f90:	d802      	bhi.n	8002f98 <SX1276SetRxConfig+0x1d0>
                datarate = 6;
 8002f92:	2406      	movs	r4, #6
 8002f94:	e000      	b.n	8002f98 <SX1276SetRxConfig+0x1d0>
                datarate = 12;
 8002f96:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002f98:	2d07      	cmp	r5, #7
 8002f9a:	d064      	beq.n	8003066 <SX1276SetRxConfig+0x29e>
 8002f9c:	2d08      	cmp	r5, #8
 8002f9e:	d06b      	beq.n	8003078 <SX1276SetRxConfig+0x2b0>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	234c      	movs	r3, #76	; 0x4c
 8002fa4:	4a55      	ldr	r2, [pc, #340]	; (80030fc <SX1276SetRxConfig+0x334>)
 8002fa6:	54d1      	strb	r1, [r2, r3]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002fa8:	201d      	movs	r0, #29
 8002faa:	f7ff fa85 	bl	80024b8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002fae:	0129      	lsls	r1, r5, #4
 8002fb0:	b2c9      	uxtb	r1, r1
 8002fb2:	9b02      	ldr	r3, [sp, #8]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	4319      	orrs	r1, r3
 8002fba:	464b      	mov	r3, r9
 8002fbc:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002fbe:	201d      	movs	r0, #29
 8002fc0:	f7ff fa22 	bl	8002408 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002fc4:	201e      	movs	r0, #30
 8002fc6:	f7ff fa77 	bl	80024b8 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8002fca:	2108      	movs	r1, #8
 8002fcc:	4001      	ands	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002fce:	0123      	lsls	r3, r4, #4
 8002fd0:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8002fd2:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002fd4:	00bf      	lsls	r7, r7, #2
 8002fd6:	b2ff      	uxtb	r7, r7
 8002fd8:	4339      	orrs	r1, r7
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002fda:	9f06      	ldr	r7, [sp, #24]
 8002fdc:	0a3a      	lsrs	r2, r7, #8
 8002fde:	2303      	movs	r3, #3
 8002fe0:	4013      	ands	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002fe2:	4319      	orrs	r1, r3
 8002fe4:	201e      	movs	r0, #30
 8002fe6:	f7ff fa0f 	bl	8002408 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002fea:	2026      	movs	r0, #38	; 0x26
 8002fec:	f7ff fa64 	bl	80024b8 <SX1276Read>
 8002ff0:	b241      	sxtb	r1, r0
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	4399      	bics	r1, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002ff6:	3344      	adds	r3, #68	; 0x44
 8002ff8:	4a40      	ldr	r2, [pc, #256]	; (80030fc <SX1276SetRxConfig+0x334>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8002ffe:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003000:	b2c9      	uxtb	r1, r1
 8003002:	2026      	movs	r0, #38	; 0x26
 8003004:	f7ff fa00 	bl	8002408 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003008:	b2f9      	uxtb	r1, r7
 800300a:	201f      	movs	r0, #31
 800300c:	f7ff f9fc 	bl	8002408 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003010:	0a31      	lsrs	r1, r6, #8
 8003012:	2020      	movs	r0, #32
 8003014:	f7ff f9f8 	bl	8002408 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003018:	b2f1      	uxtb	r1, r6
 800301a:	2021      	movs	r0, #33	; 0x21
 800301c:	f7ff f9f4 	bl	8002408 <SX1276Write>
            if( fixLen == 1 )
 8003020:	464b      	mov	r3, r9
 8003022:	2b00      	cmp	r3, #0
 8003024:	d12b      	bne.n	800307e <SX1276SetRxConfig+0x2b6>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003026:	2353      	movs	r3, #83	; 0x53
 8003028:	4a34      	ldr	r2, [pc, #208]	; (80030fc <SX1276SetRxConfig+0x334>)
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d12b      	bne.n	8003088 <SX1276SetRxConfig+0x2c0>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8003030:	2d09      	cmp	r5, #9
 8003032:	d03a      	beq.n	80030aa <SX1276SetRxConfig+0x2e2>
            else if( bandwidth == 9 )
 8003034:	2d09      	cmp	r5, #9
 8003036:	d046      	beq.n	80030c6 <SX1276SetRxConfig+0x2fe>
                SX1276Write( REG_LR_TEST36, 0x03 );
 8003038:	2103      	movs	r1, #3
 800303a:	2036      	movs	r0, #54	; 0x36
 800303c:	f7ff f9e4 	bl	8002408 <SX1276Write>
            if( datarate == 6 )
 8003040:	2c06      	cmp	r4, #6
 8003042:	d049      	beq.n	80030d8 <SX1276SetRxConfig+0x310>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003044:	2031      	movs	r0, #49	; 0x31
 8003046:	f7ff fa37 	bl	80024b8 <SX1276Read>
 800304a:	b241      	sxtb	r1, r0
 800304c:	2307      	movs	r3, #7
 800304e:	4399      	bics	r1, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003050:	2303      	movs	r3, #3
 8003052:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003054:	b2c9      	uxtb	r1, r1
 8003056:	2031      	movs	r0, #49	; 0x31
 8003058:	f7ff f9d6 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800305c:	210a      	movs	r1, #10
 800305e:	2037      	movs	r0, #55	; 0x37
 8003060:	f7ff f9d2 	bl	8002408 <SX1276Write>
}
 8003064:	e6dd      	b.n	8002e22 <SX1276SetRxConfig+0x5a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003066:	0023      	movs	r3, r4
 8003068:	3b0b      	subs	r3, #11
 800306a:	2b01      	cmp	r3, #1
 800306c:	d896      	bhi.n	8002f9c <SX1276SetRxConfig+0x1d4>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800306e:	2101      	movs	r1, #1
 8003070:	234c      	movs	r3, #76	; 0x4c
 8003072:	4a22      	ldr	r2, [pc, #136]	; (80030fc <SX1276SetRxConfig+0x334>)
 8003074:	54d1      	strb	r1, [r2, r3]
 8003076:	e797      	b.n	8002fa8 <SX1276SetRxConfig+0x1e0>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003078:	2c0c      	cmp	r4, #12
 800307a:	d191      	bne.n	8002fa0 <SX1276SetRxConfig+0x1d8>
 800307c:	e7f7      	b.n	800306e <SX1276SetRxConfig+0x2a6>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800307e:	9900      	ldr	r1, [sp, #0]
 8003080:	2022      	movs	r0, #34	; 0x22
 8003082:	f7ff f9c1 	bl	8002408 <SX1276Write>
 8003086:	e7ce      	b.n	8003026 <SX1276SetRxConfig+0x25e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003088:	2044      	movs	r0, #68	; 0x44
 800308a:	f7ff fa15 	bl	80024b8 <SX1276Read>
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	4249      	negs	r1, r1
 8003092:	4301      	orrs	r1, r0
 8003094:	b2c9      	uxtb	r1, r1
 8003096:	2044      	movs	r0, #68	; 0x44
 8003098:	f7ff f9b6 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800309c:	2354      	movs	r3, #84	; 0x54
 800309e:	4a17      	ldr	r2, [pc, #92]	; (80030fc <SX1276SetRxConfig+0x334>)
 80030a0:	5cd1      	ldrb	r1, [r2, r3]
 80030a2:	2024      	movs	r0, #36	; 0x24
 80030a4:	f7ff f9b0 	bl	8002408 <SX1276Write>
 80030a8:	e7c2      	b.n	8003030 <SX1276SetRxConfig+0x268>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <SX1276SetRxConfig+0x334>)
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	4b18      	ldr	r3, [pc, #96]	; (8003110 <SX1276SetRxConfig+0x348>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d9bf      	bls.n	8003034 <SX1276SetRxConfig+0x26c>
                SX1276Write( REG_LR_TEST36, 0x02 );
 80030b4:	2102      	movs	r1, #2
 80030b6:	2036      	movs	r0, #54	; 0x36
 80030b8:	f7ff f9a6 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 80030bc:	2164      	movs	r1, #100	; 0x64
 80030be:	203a      	movs	r0, #58	; 0x3a
 80030c0:	f7ff f9a2 	bl	8002408 <SX1276Write>
 80030c4:	e7bc      	b.n	8003040 <SX1276SetRxConfig+0x278>
                SX1276Write( REG_LR_TEST36, 0x02 );
 80030c6:	2102      	movs	r1, #2
 80030c8:	2036      	movs	r0, #54	; 0x36
 80030ca:	f7ff f99d 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 80030ce:	217f      	movs	r1, #127	; 0x7f
 80030d0:	203a      	movs	r0, #58	; 0x3a
 80030d2:	f7ff f999 	bl	8002408 <SX1276Write>
 80030d6:	e7b3      	b.n	8003040 <SX1276SetRxConfig+0x278>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80030d8:	2031      	movs	r0, #49	; 0x31
 80030da:	f7ff f9ed 	bl	80024b8 <SX1276Read>
 80030de:	b241      	sxtb	r1, r0
 80030e0:	2307      	movs	r3, #7
 80030e2:	4399      	bics	r1, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80030e4:	2305      	movs	r3, #5
 80030e6:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80030e8:	b2c9      	uxtb	r1, r1
 80030ea:	2031      	movs	r0, #49	; 0x31
 80030ec:	f7ff f98c 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80030f0:	210c      	movs	r1, #12
 80030f2:	2037      	movs	r0, #55	; 0x37
 80030f4:	f7ff f988 	bl	8002408 <SX1276Write>
 80030f8:	e693      	b.n	8002e22 <SX1276SetRxConfig+0x5a>
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	20000704 	.word	0x20000704
 8003100:	3ff00000 	.word	0x3ff00000
 8003104:	40200000 	.word	0x40200000
 8003108:	408f4000 	.word	0x408f4000
 800310c:	417e8480 	.word	0x417e8480
 8003110:	1f4add40 	.word	0x1f4add40

08003114 <SX1276SetTxConfig>:
{
 8003114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003116:	46de      	mov	lr, fp
 8003118:	4657      	mov	r7, sl
 800311a:	464e      	mov	r6, r9
 800311c:	4645      	mov	r5, r8
 800311e:	b5e0      	push	{r5, r6, r7, lr}
 8003120:	b085      	sub	sp, #20
 8003122:	9100      	str	r1, [sp, #0]
 8003124:	9202      	str	r2, [sp, #8]
 8003126:	001c      	movs	r4, r3
 8003128:	ab0e      	add	r3, sp, #56	; 0x38
 800312a:	cb20      	ldmia	r3!, {r5}
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	4691      	mov	r9, r2
 8003130:	ab10      	add	r3, sp, #64	; 0x40
 8003132:	881e      	ldrh	r6, [r3, #0]
 8003134:	ab11      	add	r3, sp, #68	; 0x44
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	4690      	mov	r8, r2
 800313a:	ab12      	add	r3, sp, #72	; 0x48
 800313c:	781f      	ldrb	r7, [r3, #0]
 800313e:	ab13      	add	r3, sp, #76	; 0x4c
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	4692      	mov	sl, r2
 8003144:	ab14      	add	r3, sp, #80	; 0x50
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	9203      	str	r2, [sp, #12]
 800314a:	ab15      	add	r3, sp, #84	; 0x54
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	4693      	mov	fp, r2
    SX1276SetModem( modem );
 8003150:	9001      	str	r0, [sp, #4]
 8003152:	f7ff fd65 	bl	8002c20 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8003156:	4b8b      	ldr	r3, [pc, #556]	; (8003384 <SX1276SetTxConfig+0x270>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	9800      	ldr	r0, [sp, #0]
 800315e:	4798      	blx	r3
    switch( modem )
 8003160:	9b01      	ldr	r3, [sp, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <SX1276SetTxConfig+0x64>
 8003166:	2b01      	cmp	r3, #1
 8003168:	d064      	beq.n	8003234 <SX1276SetTxConfig+0x120>
}
 800316a:	b005      	add	sp, #20
 800316c:	bc3c      	pop	{r2, r3, r4, r5}
 800316e:	4690      	mov	r8, r2
 8003170:	4699      	mov	r9, r3
 8003172:	46a2      	mov	sl, r4
 8003174:	46ab      	mov	fp, r5
 8003176:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Power = power;
 8003178:	4b83      	ldr	r3, [pc, #524]	; (8003388 <SX1276SetTxConfig+0x274>)
 800317a:	466a      	mov	r2, sp
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8003180:	9802      	ldr	r0, [sp, #8]
 8003182:	6118      	str	r0, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003184:	615c      	str	r4, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8003186:	61dd      	str	r5, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003188:	841e      	strh	r6, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800318a:	2222      	movs	r2, #34	; 0x22
 800318c:	4641      	mov	r1, r8
 800318e:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003190:	3202      	adds	r2, #2
 8003192:	549f      	strb	r7, [r3, r2]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003194:	3201      	adds	r2, #1
 8003196:	4659      	mov	r1, fp
 8003198:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800319a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800319c:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800319e:	f7fe ffe7 	bl	8002170 <__aeabi_ui2d>
 80031a2:	2200      	movs	r2, #0
 80031a4:	4b79      	ldr	r3, [pc, #484]	; (800338c <SX1276SetTxConfig+0x278>)
 80031a6:	f7fd fd83 	bl	8000cb0 <__aeabi_ddiv>
 80031aa:	f7fd f993 	bl	80004d4 <__aeabi_d2uiz>
 80031ae:	b284      	uxth	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80031b0:	0a21      	lsrs	r1, r4, #8
 80031b2:	2004      	movs	r0, #4
 80031b4:	f7ff f928 	bl	8002408 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80031b8:	b2e1      	uxtb	r1, r4
 80031ba:	2005      	movs	r0, #5
 80031bc:	f7ff f924 	bl	8002408 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80031c0:	0028      	movs	r0, r5
 80031c2:	f7fe ffd5 	bl	8002170 <__aeabi_ui2d>
 80031c6:	0002      	movs	r2, r0
 80031c8:	000b      	movs	r3, r1
 80031ca:	2000      	movs	r0, #0
 80031cc:	4970      	ldr	r1, [pc, #448]	; (8003390 <SX1276SetTxConfig+0x27c>)
 80031ce:	f7fd fd6f 	bl	8000cb0 <__aeabi_ddiv>
 80031d2:	f7fd f97f 	bl	80004d4 <__aeabi_d2uiz>
 80031d6:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80031d8:	0a21      	lsrs	r1, r4, #8
 80031da:	2002      	movs	r0, #2
 80031dc:	f7ff f914 	bl	8002408 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80031e0:	b2e1      	uxtb	r1, r4
 80031e2:	2003      	movs	r0, #3
 80031e4:	f7ff f910 	bl	8002408 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80031e8:	0a31      	lsrs	r1, r6, #8
 80031ea:	2025      	movs	r0, #37	; 0x25
 80031ec:	f7ff f90c 	bl	8002408 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80031f0:	b2f1      	uxtb	r1, r6
 80031f2:	2026      	movs	r0, #38	; 0x26
 80031f4:	f7ff f908 	bl	8002408 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80031f8:	2030      	movs	r0, #48	; 0x30
 80031fa:	f7ff f95d 	bl	80024b8 <SX1276Read>
 80031fe:	b240      	sxtb	r0, r0
                           RF_PACKETCONFIG1_CRC_MASK &
 8003200:	216f      	movs	r1, #111	; 0x6f
 8003202:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003204:	4643      	mov	r3, r8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d011      	beq.n	800322e <SX1276SetTxConfig+0x11a>
 800320a:	2300      	movs	r3, #0
 800320c:	4319      	orrs	r1, r3
                           ( crcOn << 4 ) );
 800320e:	013f      	lsls	r7, r7, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003210:	4339      	orrs	r1, r7
            SX1276Write( REG_PACKETCONFIG1,
 8003212:	b2c9      	uxtb	r1, r1
 8003214:	2030      	movs	r0, #48	; 0x30
 8003216:	f7ff f8f7 	bl	8002408 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800321a:	2031      	movs	r0, #49	; 0x31
 800321c:	f7ff f94c 	bl	80024b8 <SX1276Read>
 8003220:	2140      	movs	r1, #64	; 0x40
 8003222:	4301      	orrs	r1, r0
 8003224:	b2c9      	uxtb	r1, r1
 8003226:	2031      	movs	r0, #49	; 0x31
 8003228:	f7ff f8ee 	bl	8002408 <SX1276Write>
        break;
 800322c:	e79d      	b.n	800316a <SX1276SetTxConfig+0x56>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	425b      	negs	r3, r3
 8003232:	e7eb      	b.n	800320c <SX1276SetTxConfig+0xf8>
            SX1276.Settings.LoRa.Power = power;
 8003234:	2340      	movs	r3, #64	; 0x40
 8003236:	4a54      	ldr	r2, [pc, #336]	; (8003388 <SX1276SetTxConfig+0x274>)
 8003238:	4669      	mov	r1, sp
 800323a:	7809      	ldrb	r1, [r1, #0]
 800323c:	54d1      	strb	r1, [r2, r3]
            if( bandwidth > 2 )
 800323e:	2c02      	cmp	r4, #2
 8003240:	d900      	bls.n	8003244 <SX1276SetTxConfig+0x130>
 8003242:	e7fe      	b.n	8003242 <SX1276SetTxConfig+0x12e>
            bandwidth += 7;
 8003244:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <SX1276SetTxConfig+0x274>)
 8003248:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800324a:	649d      	str	r5, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 800324c:	224d      	movs	r2, #77	; 0x4d
 800324e:	4649      	mov	r1, r9
 8003250:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003252:	3201      	adds	r2, #1
 8003254:	529e      	strh	r6, [r3, r2]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003256:	3202      	adds	r2, #2
 8003258:	4641      	mov	r1, r8
 800325a:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800325c:	3203      	adds	r2, #3
 800325e:	4651      	mov	r1, sl
 8003260:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003262:	3201      	adds	r2, #1
 8003264:	4669      	mov	r1, sp
 8003266:	7b09      	ldrb	r1, [r1, #12]
 8003268:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800326a:	3a02      	subs	r2, #2
 800326c:	549f      	strb	r7, [r3, r2]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800326e:	3203      	adds	r2, #3
 8003270:	4659      	mov	r1, fp
 8003272:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8003274:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003276:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8003278:	2d0c      	cmp	r5, #12
 800327a:	d803      	bhi.n	8003284 <SX1276SetTxConfig+0x170>
            else if( datarate < 6 )
 800327c:	2d05      	cmp	r5, #5
 800327e:	d802      	bhi.n	8003286 <SX1276SetTxConfig+0x172>
                datarate = 6;
 8003280:	2506      	movs	r5, #6
 8003282:	e000      	b.n	8003286 <SX1276SetTxConfig+0x172>
                datarate = 12;
 8003284:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003286:	2c07      	cmp	r4, #7
 8003288:	d04e      	beq.n	8003328 <SX1276SetTxConfig+0x214>
 800328a:	2c08      	cmp	r4, #8
 800328c:	d055      	beq.n	800333a <SX1276SetTxConfig+0x226>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800328e:	2100      	movs	r1, #0
 8003290:	234c      	movs	r3, #76	; 0x4c
 8003292:	4a3d      	ldr	r2, [pc, #244]	; (8003388 <SX1276SetTxConfig+0x274>)
 8003294:	54d1      	strb	r1, [r2, r3]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003296:	4653      	mov	r3, sl
 8003298:	2b00      	cmp	r3, #0
 800329a:	d151      	bne.n	8003340 <SX1276SetTxConfig+0x22c>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800329c:	201d      	movs	r0, #29
 800329e:	f7ff f90b 	bl	80024b8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80032a2:	0121      	lsls	r1, r4, #4
 80032a4:	b2c9      	uxtb	r1, r1
 80032a6:	464b      	mov	r3, r9
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	4319      	orrs	r1, r3
 80032ae:	4643      	mov	r3, r8
 80032b0:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80032b2:	201d      	movs	r0, #29
 80032b4:	f7ff f8a8 	bl	8002408 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80032b8:	201e      	movs	r0, #30
 80032ba:	f7ff f8fd 	bl	80024b8 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 80032be:	210b      	movs	r1, #11
 80032c0:	4001      	ands	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80032c2:	012b      	lsls	r3, r5, #4
 80032c4:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80032c6:	430b      	orrs	r3, r1
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80032c8:	00bf      	lsls	r7, r7, #2
 80032ca:	b2f9      	uxtb	r1, r7
            SX1276Write( REG_LR_MODEMCONFIG2,
 80032cc:	4319      	orrs	r1, r3
 80032ce:	201e      	movs	r0, #30
 80032d0:	f7ff f89a 	bl	8002408 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80032d4:	2026      	movs	r0, #38	; 0x26
 80032d6:	f7ff f8ef 	bl	80024b8 <SX1276Read>
 80032da:	b241      	sxtb	r1, r0
 80032dc:	2308      	movs	r3, #8
 80032de:	4399      	bics	r1, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80032e0:	3344      	adds	r3, #68	; 0x44
 80032e2:	4a29      	ldr	r2, [pc, #164]	; (8003388 <SX1276SetTxConfig+0x274>)
 80032e4:	5cd3      	ldrb	r3, [r2, r3]
 80032e6:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80032e8:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80032ea:	b2c9      	uxtb	r1, r1
 80032ec:	2026      	movs	r0, #38	; 0x26
 80032ee:	f7ff f88b 	bl	8002408 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80032f2:	0a31      	lsrs	r1, r6, #8
 80032f4:	2020      	movs	r0, #32
 80032f6:	f7ff f887 	bl	8002408 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80032fa:	b2f1      	uxtb	r1, r6
 80032fc:	2021      	movs	r0, #33	; 0x21
 80032fe:	f7ff f883 	bl	8002408 <SX1276Write>
            if( datarate == 6 )
 8003302:	2d06      	cmp	r5, #6
 8003304:	d02d      	beq.n	8003362 <SX1276SetTxConfig+0x24e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003306:	2031      	movs	r0, #49	; 0x31
 8003308:	f7ff f8d6 	bl	80024b8 <SX1276Read>
 800330c:	b241      	sxtb	r1, r0
 800330e:	2307      	movs	r3, #7
 8003310:	4399      	bics	r1, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003312:	2303      	movs	r3, #3
 8003314:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003316:	b2c9      	uxtb	r1, r1
 8003318:	2031      	movs	r0, #49	; 0x31
 800331a:	f7ff f875 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800331e:	210a      	movs	r1, #10
 8003320:	2037      	movs	r0, #55	; 0x37
 8003322:	f7ff f871 	bl	8002408 <SX1276Write>
}
 8003326:	e720      	b.n	800316a <SX1276SetTxConfig+0x56>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003328:	002b      	movs	r3, r5
 800332a:	3b0b      	subs	r3, #11
 800332c:	2b01      	cmp	r3, #1
 800332e:	d8ac      	bhi.n	800328a <SX1276SetTxConfig+0x176>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003330:	2101      	movs	r1, #1
 8003332:	234c      	movs	r3, #76	; 0x4c
 8003334:	4a14      	ldr	r2, [pc, #80]	; (8003388 <SX1276SetTxConfig+0x274>)
 8003336:	54d1      	strb	r1, [r2, r3]
 8003338:	e7ad      	b.n	8003296 <SX1276SetTxConfig+0x182>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800333a:	2d0c      	cmp	r5, #12
 800333c:	d1a7      	bne.n	800328e <SX1276SetTxConfig+0x17a>
 800333e:	e7f7      	b.n	8003330 <SX1276SetTxConfig+0x21c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003340:	2044      	movs	r0, #68	; 0x44
 8003342:	f7ff f8b9 	bl	80024b8 <SX1276Read>
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	4249      	negs	r1, r1
 800334a:	4301      	orrs	r1, r0
 800334c:	b2c9      	uxtb	r1, r1
 800334e:	2044      	movs	r0, #68	; 0x44
 8003350:	f7ff f85a 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8003354:	2354      	movs	r3, #84	; 0x54
 8003356:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <SX1276SetTxConfig+0x274>)
 8003358:	5cd1      	ldrb	r1, [r2, r3]
 800335a:	2024      	movs	r0, #36	; 0x24
 800335c:	f7ff f854 	bl	8002408 <SX1276Write>
 8003360:	e79c      	b.n	800329c <SX1276SetTxConfig+0x188>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003362:	2031      	movs	r0, #49	; 0x31
 8003364:	f7ff f8a8 	bl	80024b8 <SX1276Read>
 8003368:	b241      	sxtb	r1, r0
 800336a:	2307      	movs	r3, #7
 800336c:	4399      	bics	r1, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800336e:	2305      	movs	r3, #5
 8003370:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003372:	b2c9      	uxtb	r1, r1
 8003374:	2031      	movs	r0, #49	; 0x31
 8003376:	f7ff f847 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800337a:	210c      	movs	r1, #12
 800337c:	2037      	movs	r0, #55	; 0x37
 800337e:	f7ff f843 	bl	8002408 <SX1276Write>
 8003382:	e6f2      	b.n	800316a <SX1276SetTxConfig+0x56>
 8003384:	20000244 	.word	0x20000244
 8003388:	20000704 	.word	0x20000704
 800338c:	404e8480 	.word	0x404e8480
 8003390:	417e8480 	.word	0x417e8480

08003394 <SX1276SetTxContinuousWave>:
{
 8003394:	b530      	push	{r4, r5, lr}
 8003396:	b08b      	sub	sp, #44	; 0x2c
 8003398:	000d      	movs	r5, r1
    uint32_t timeout = ( uint32_t )( time * 1000 );
 800339a:	24fa      	movs	r4, #250	; 0xfa
 800339c:	00a4      	lsls	r4, r4, #2
 800339e:	4354      	muls	r4, r2
    SX1276SetChannel( freq );
 80033a0:	f7ff f83e 	bl	8002420 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80033a4:	9408      	str	r4, [sp, #32]
 80033a6:	2300      	movs	r3, #0
 80033a8:	9307      	str	r3, [sp, #28]
 80033aa:	9306      	str	r3, [sp, #24]
 80033ac:	9305      	str	r3, [sp, #20]
 80033ae:	9304      	str	r3, [sp, #16]
 80033b0:	9303      	str	r3, [sp, #12]
 80033b2:	2205      	movs	r2, #5
 80033b4:	9202      	str	r2, [sp, #8]
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	2396      	movs	r3, #150	; 0x96
 80033ba:	015b      	lsls	r3, r3, #5
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	2200      	movs	r2, #0
 80033c2:	0029      	movs	r1, r5
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7ff fea5 	bl	8003114 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80033ca:	2031      	movs	r0, #49	; 0x31
 80033cc:	f7ff f874 	bl	80024b8 <SX1276Read>
 80033d0:	2340      	movs	r3, #64	; 0x40
 80033d2:	4398      	bics	r0, r3
 80033d4:	b2c1      	uxtb	r1, r0
 80033d6:	2031      	movs	r0, #49	; 0x31
 80033d8:	f7ff f816 	bl	8002408 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80033dc:	21f0      	movs	r1, #240	; 0xf0
 80033de:	2040      	movs	r0, #64	; 0x40
 80033e0:	f7ff f812 	bl	8002408 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80033e4:	21a0      	movs	r1, #160	; 0xa0
 80033e6:	2041      	movs	r0, #65	; 0x41
 80033e8:	f7ff f80e 	bl	8002408 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80033ec:	4d07      	ldr	r5, [pc, #28]	; (800340c <SX1276SetTxContinuousWave+0x78>)
 80033ee:	0021      	movs	r1, r4
 80033f0:	0028      	movs	r0, r5
 80033f2:	f003 fa77 	bl	80068e4 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 80033f6:	2202      	movs	r2, #2
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <SX1276SetTxContinuousWave+0x7c>)
 80033fa:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80033fc:	0028      	movs	r0, r5
 80033fe:	f003 f9bb 	bl	8006778 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003402:	2003      	movs	r0, #3
 8003404:	f7ff f9ee 	bl	80027e4 <SX1276SetOpMode>
}
 8003408:	b00b      	add	sp, #44	; 0x2c
 800340a:	bd30      	pop	{r4, r5, pc}
 800340c:	200006dc 	.word	0x200006dc
 8003410:	20000704 	.word	0x20000704

08003414 <SX1276OnDio2Irq>:
{
 8003414:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <SX1276OnDio2Irq+0xdc>)
 8003418:	791b      	ldrb	r3, [r3, #4]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d002      	beq.n	8003424 <SX1276OnDio2Irq+0x10>
 800341e:	2b02      	cmp	r3, #2
 8003420:	d04b      	beq.n	80034ba <SX1276OnDio2Irq+0xa6>
}
 8003422:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003424:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <SX1276OnDio2Irq+0xdc>)
 8003426:	795b      	ldrb	r3, [r3, #5]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d018      	beq.n	800345e <SX1276OnDio2Irq+0x4a>
 800342c:	2b01      	cmp	r3, #1
 800342e:	d1f8      	bne.n	8003422 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003430:	2353      	movs	r3, #83	; 0x53
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <SX1276OnDio2Irq+0xdc>)
 8003434:	5cd3      	ldrb	r3, [r2, r3]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f3      	beq.n	8003422 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800343a:	2102      	movs	r1, #2
 800343c:	2012      	movs	r0, #18
 800343e:	f7fe ffe3 	bl	8002408 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003442:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <SX1276OnDio2Irq+0xe0>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0eb      	beq.n	8003422 <SX1276OnDio2Irq+0xe>
 800344a:	695c      	ldr	r4, [r3, #20]
 800344c:	2c00      	cmp	r4, #0
 800344e:	d0e8      	beq.n	8003422 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003450:	201c      	movs	r0, #28
 8003452:	f7ff f831 	bl	80024b8 <SX1276Read>
 8003456:	233f      	movs	r3, #63	; 0x3f
 8003458:	4018      	ands	r0, r3
 800345a:	47a0      	blx	r4
 800345c:	e7e1      	b.n	8003422 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <SX1276OnDio2Irq+0xdc>)
 8003460:	2101      	movs	r1, #1
 8003462:	2230      	movs	r2, #48	; 0x30
 8003464:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8003466:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003468:	2b01      	cmp	r3, #1
 800346a:	d1da      	bne.n	8003422 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 800346c:	4822      	ldr	r0, [pc, #136]	; (80034f8 <SX1276OnDio2Irq+0xe4>)
 800346e:	f003 f9f9 	bl	8006864 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003472:	4d1f      	ldr	r5, [pc, #124]	; (80034f0 <SX1276OnDio2Irq+0xdc>)
 8003474:	2201      	movs	r2, #1
 8003476:	2331      	movs	r3, #49	; 0x31
 8003478:	54ea      	strb	r2, [r5, r3]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800347a:	2011      	movs	r0, #17
 800347c:	f7ff f81c 	bl	80024b8 <SX1276Read>
 8003480:	0840      	lsrs	r0, r0, #1
 8003482:	4240      	negs	r0, r0
 8003484:	2232      	movs	r2, #50	; 0x32
 8003486:	54a8      	strb	r0, [r5, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003488:	201b      	movs	r0, #27
 800348a:	f7ff f815 	bl	80024b8 <SX1276Read>
 800348e:	0204      	lsls	r4, r0, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8003490:	201c      	movs	r0, #28
 8003492:	f7ff f811 	bl	80024b8 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003496:	4320      	orrs	r0, r4
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8003498:	0a02      	lsrs	r2, r0, #8
 800349a:	4b18      	ldr	r3, [pc, #96]	; (80034fc <SX1276OnDio2Irq+0xe8>)
 800349c:	435a      	muls	r2, r3
 800349e:	21ff      	movs	r1, #255	; 0xff
 80034a0:	4008      	ands	r0, r1
 80034a2:	4343      	muls	r3, r0
 80034a4:	3380      	adds	r3, #128	; 0x80
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	18d3      	adds	r3, r2, r3
 80034aa:	636b      	str	r3, [r5, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80034ac:	200c      	movs	r0, #12
 80034ae:	f7ff f803 	bl	80024b8 <SX1276Read>
 80034b2:	0940      	lsrs	r0, r0, #5
 80034b4:	2338      	movs	r3, #56	; 0x38
 80034b6:	54e8      	strb	r0, [r5, r3]
 80034b8:	e7b3      	b.n	8003422 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <SX1276OnDio2Irq+0xdc>)
 80034bc:	795b      	ldrb	r3, [r3, #5]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d1af      	bne.n	8003422 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80034c2:	3352      	adds	r3, #82	; 0x52
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <SX1276OnDio2Irq+0xdc>)
 80034c6:	5cd3      	ldrb	r3, [r2, r3]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0aa      	beq.n	8003422 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80034cc:	2102      	movs	r1, #2
 80034ce:	2012      	movs	r0, #18
 80034d0:	f7fe ff9a 	bl	8002408 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <SX1276OnDio2Irq+0xe0>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0a2      	beq.n	8003422 <SX1276OnDio2Irq+0xe>
 80034dc:	695c      	ldr	r4, [r3, #20]
 80034de:	2c00      	cmp	r4, #0
 80034e0:	d09f      	beq.n	8003422 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80034e2:	201c      	movs	r0, #28
 80034e4:	f7fe ffe8 	bl	80024b8 <SX1276Read>
 80034e8:	233f      	movs	r3, #63	; 0x3f
 80034ea:	4018      	ands	r0, r3
 80034ec:	47a0      	blx	r4
}
 80034ee:	e798      	b.n	8003422 <SX1276OnDio2Irq+0xe>
 80034f0:	20000704 	.word	0x20000704
 80034f4:	20000344 	.word	0x20000344
 80034f8:	200006f0 	.word	0x200006f0
 80034fc:	00003d09 	.word	0x00003d09

08003500 <SX1276OnDio3Irq>:
{
 8003500:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <SX1276OnDio3Irq+0x4c>)
 8003504:	795b      	ldrb	r3, [r3, #5]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d11f      	bne.n	800354a <SX1276OnDio3Irq+0x4a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800350a:	2012      	movs	r0, #18
 800350c:	f7fe ffd4 	bl	80024b8 <SX1276Read>
 8003510:	07c3      	lsls	r3, r0, #31
 8003512:	d50d      	bpl.n	8003530 <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003514:	2105      	movs	r1, #5
 8003516:	2012      	movs	r0, #18
 8003518:	f7fe ff76 	bl	8002408 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <SX1276OnDio3Irq+0x50>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d012      	beq.n	800354a <SX1276OnDio3Irq+0x4a>
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00f      	beq.n	800354a <SX1276OnDio3Irq+0x4a>
                RadioEvents->CadDone( true );
 800352a:	2001      	movs	r0, #1
 800352c:	4798      	blx	r3
 800352e:	e00c      	b.n	800354a <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8003530:	2104      	movs	r1, #4
 8003532:	2012      	movs	r0, #18
 8003534:	f7fe ff68 	bl	8002408 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <SX1276OnDio3Irq+0x50>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <SX1276OnDio3Irq+0x4a>
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <SX1276OnDio3Irq+0x4a>
                RadioEvents->CadDone( false );
 8003546:	2000      	movs	r0, #0
 8003548:	4798      	blx	r3
}
 800354a:	bd10      	pop	{r4, pc}
 800354c:	20000704 	.word	0x20000704
 8003550:	20000344 	.word	0x20000344

08003554 <SX1276WriteFifo>:
{
 8003554:	b510      	push	{r4, lr}
 8003556:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 8003558:	0001      	movs	r1, r0
 800355a:	2000      	movs	r0, #0
 800355c:	f7fe ff32 	bl	80023c4 <SX1276WriteBuffer>
}
 8003560:	bd10      	pop	{r4, pc}
	...

08003564 <SX1276Send>:
{
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	0004      	movs	r4, r0
 800356a:	466b      	mov	r3, sp
 800356c:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 800356e:	4b42      	ldr	r3, [pc, #264]	; (8003678 <SX1276Send+0x114>)
 8003570:	795b      	ldrb	r3, [r3, #5]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <SX1276Send+0x1a>
 8003576:	2b01      	cmp	r3, #1
 8003578:	d037      	beq.n	80035ea <SX1276Send+0x86>
    uint32_t txTimeout = 0;
 800357a:	2000      	movs	r0, #0
 800357c:	e022      	b.n	80035c4 <SX1276Send+0x60>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800357e:	4b3e      	ldr	r3, [pc, #248]	; (8003678 <SX1276Send+0x114>)
 8003580:	2200      	movs	r2, #0
 8003582:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8003584:	466a      	mov	r2, sp
 8003586:	79d1      	ldrb	r1, [r2, #7]
 8003588:	8759      	strh	r1, [r3, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800358a:	2222      	movs	r2, #34	; 0x22
 800358c:	5c9b      	ldrb	r3, [r3, r2]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11c      	bne.n	80035cc <SX1276Send+0x68>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8003592:	2101      	movs	r1, #1
 8003594:	466b      	mov	r3, sp
 8003596:	1dd8      	adds	r0, r3, #7
 8003598:	f7ff ffdc 	bl	8003554 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 800359c:	466b      	mov	r3, sp
 800359e:	79da      	ldrb	r2, [r3, #7]
 80035a0:	1e53      	subs	r3, r2, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b3f      	cmp	r3, #63	; 0x3f
 80035a6:	d815      	bhi.n	80035d4 <SX1276Send+0x70>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80035a8:	233f      	movs	r3, #63	; 0x3f
 80035aa:	4933      	ldr	r1, [pc, #204]	; (8003678 <SX1276Send+0x114>)
 80035ac:	54ca      	strb	r2, [r1, r3]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80035ae:	4d32      	ldr	r5, [pc, #200]	; (8003678 <SX1276Send+0x114>)
 80035b0:	263f      	movs	r6, #63	; 0x3f
 80035b2:	5da9      	ldrb	r1, [r5, r6]
 80035b4:	0020      	movs	r0, r4
 80035b6:	f7ff ffcd 	bl	8003554 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80035ba:	5dab      	ldrb	r3, [r5, r6]
 80035bc:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	87ab      	strh	r3, [r5, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80035c2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    SX1276SetTx( txTimeout );
 80035c4:	f7ff fab2 	bl	8002b2c <SX1276SetTx>
}
 80035c8:	b002      	add	sp, #8
 80035ca:	bd70      	pop	{r4, r5, r6, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 80035cc:	2032      	movs	r0, #50	; 0x32
 80035ce:	f7fe ff1b 	bl	8002408 <SX1276Write>
 80035d2:	e7e3      	b.n	800359c <SX1276Send+0x38>
                memcpy1( RxTxBuffer, buffer, size );
 80035d4:	b292      	uxth	r2, r2
 80035d6:	0021      	movs	r1, r4
 80035d8:	4828      	ldr	r0, [pc, #160]	; (800367c <SX1276Send+0x118>)
 80035da:	3004      	adds	r0, #4
 80035dc:	f003 f9bf 	bl	800695e <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80035e0:	2120      	movs	r1, #32
 80035e2:	233f      	movs	r3, #63	; 0x3f
 80035e4:	4a24      	ldr	r2, [pc, #144]	; (8003678 <SX1276Send+0x114>)
 80035e6:	54d1      	strb	r1, [r2, r3]
 80035e8:	e7e1      	b.n	80035ae <SX1276Send+0x4a>
            if( SX1276.Settings.LoRa.IqInverted == true )
 80035ea:	2355      	movs	r3, #85	; 0x55
 80035ec:	4a22      	ldr	r2, [pc, #136]	; (8003678 <SX1276Send+0x114>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02a      	beq.n	800364a <SX1276Send+0xe6>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80035f4:	2033      	movs	r0, #51	; 0x33
 80035f6:	f7fe ff5f 	bl	80024b8 <SX1276Read>
 80035fa:	2341      	movs	r3, #65	; 0x41
 80035fc:	4398      	bics	r0, r3
 80035fe:	b2c1      	uxtb	r1, r0
 8003600:	2033      	movs	r0, #51	; 0x33
 8003602:	f7fe ff01 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003606:	2119      	movs	r1, #25
 8003608:	203b      	movs	r0, #59	; 0x3b
 800360a:	f7fe fefd 	bl	8002408 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800360e:	466b      	mov	r3, sp
 8003610:	79d9      	ldrb	r1, [r3, #7]
 8003612:	2364      	movs	r3, #100	; 0x64
 8003614:	4a18      	ldr	r2, [pc, #96]	; (8003678 <SX1276Send+0x114>)
 8003616:	54d1      	strb	r1, [r2, r3]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003618:	2022      	movs	r0, #34	; 0x22
 800361a:	f7fe fef5 	bl	8002408 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800361e:	2100      	movs	r1, #0
 8003620:	200e      	movs	r0, #14
 8003622:	f7fe fef1 	bl	8002408 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8003626:	2100      	movs	r1, #0
 8003628:	200d      	movs	r0, #13
 800362a:	f7fe feed 	bl	8002408 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800362e:	2001      	movs	r0, #1
 8003630:	f7fe ff42 	bl	80024b8 <SX1276Read>
 8003634:	23f8      	movs	r3, #248	; 0xf8
 8003636:	4398      	bics	r0, r3
 8003638:	d018      	beq.n	800366c <SX1276Send+0x108>
            SX1276WriteFifo( buffer, size );
 800363a:	466b      	mov	r3, sp
 800363c:	79d9      	ldrb	r1, [r3, #7]
 800363e:	0020      	movs	r0, r4
 8003640:	f7ff ff88 	bl	8003554 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <SX1276Send+0x114>)
 8003646:	6d98      	ldr	r0, [r3, #88]	; 0x58
        break;
 8003648:	e7bc      	b.n	80035c4 <SX1276Send+0x60>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800364a:	2033      	movs	r0, #51	; 0x33
 800364c:	f7fe ff34 	bl	80024b8 <SX1276Read>
 8003650:	b241      	sxtb	r1, r0
 8003652:	2341      	movs	r3, #65	; 0x41
 8003654:	4399      	bics	r1, r3
 8003656:	2001      	movs	r0, #1
 8003658:	4301      	orrs	r1, r0
 800365a:	b2c9      	uxtb	r1, r1
 800365c:	2033      	movs	r0, #51	; 0x33
 800365e:	f7fe fed3 	bl	8002408 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003662:	211d      	movs	r1, #29
 8003664:	203b      	movs	r0, #59	; 0x3b
 8003666:	f7fe fecf 	bl	8002408 <SX1276Write>
 800366a:	e7d0      	b.n	800360e <SX1276Send+0xaa>
                SX1276SetStby( );
 800366c:	f7ff f902 	bl	8002874 <SX1276SetStby>
                DelayMs( 1 );
 8003670:	2001      	movs	r0, #1
 8003672:	f002 ffc9 	bl	8006608 <DelayMs>
 8003676:	e7e0      	b.n	800363a <SX1276Send+0xd6>
 8003678:	20000704 	.word	0x20000704
 800367c:	20000244 	.word	0x20000244

08003680 <SX1276ReadFifo>:
{
 8003680:	b510      	push	{r4, lr}
 8003682:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8003684:	0001      	movs	r1, r0
 8003686:	2000      	movs	r0, #0
 8003688:	f7fe fef4 	bl	8002474 <SX1276ReadBuffer>
}
 800368c:	bd10      	pop	{r4, pc}
	...

08003690 <SX1276OnDio0Irq>:
{
 8003690:	b530      	push	{r4, r5, lr}
 8003692:	b083      	sub	sp, #12
    volatile uint8_t irqFlags = 0;
 8003694:	2200      	movs	r2, #0
 8003696:	466b      	mov	r3, sp
 8003698:	71da      	strb	r2, [r3, #7]
    switch( SX1276.Settings.State )
 800369a:	4bb1      	ldr	r3, [pc, #708]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 800369c:	791b      	ldrb	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d004      	beq.n	80036ac <SX1276OnDio0Irq+0x1c>
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d100      	bne.n	80036a8 <SX1276OnDio0Irq+0x18>
 80036a6:	e141      	b.n	800392c <SX1276OnDio0Irq+0x29c>
}
 80036a8:	b003      	add	sp, #12
 80036aa:	bd30      	pop	{r4, r5, pc}
            switch( SX1276.Settings.Modem )
 80036ac:	4bac      	ldr	r3, [pc, #688]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80036ae:	795b      	ldrb	r3, [r3, #5]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d027      	beq.n	8003704 <SX1276OnDio0Irq+0x74>
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d1f7      	bne.n	80036a8 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	2012      	movs	r0, #18
 80036bc:	f7fe fea4 	bl	8002408 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80036c0:	2012      	movs	r0, #18
 80036c2:	f7fe fef9 	bl	80024b8 <SX1276Read>
 80036c6:	466b      	mov	r3, sp
 80036c8:	71d8      	strb	r0, [r3, #7]
 80036ca:	3307      	adds	r3, #7
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	069b      	lsls	r3, r3, #26
 80036d0:	d400      	bmi.n	80036d4 <SX1276OnDio0Irq+0x44>
 80036d2:	e0ba      	b.n	800384a <SX1276OnDio0Irq+0x1ba>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80036d4:	2120      	movs	r1, #32
 80036d6:	2012      	movs	r0, #18
 80036d8:	f7fe fe96 	bl	8002408 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80036dc:	2356      	movs	r3, #86	; 0x56
 80036de:	4aa0      	ldr	r2, [pc, #640]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80036e0:	5cd3      	ldrb	r3, [r2, r3]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <SX1276OnDio0Irq+0x5c>
                            SX1276.Settings.State = RF_IDLE;
 80036e6:	2200      	movs	r2, #0
 80036e8:	4b9d      	ldr	r3, [pc, #628]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80036ea:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 80036ec:	489d      	ldr	r0, [pc, #628]	; (8003964 <SX1276OnDio0Irq+0x2d4>)
 80036ee:	f003 f8b9 	bl	8006864 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80036f2:	4b9d      	ldr	r3, [pc, #628]	; (8003968 <SX1276OnDio0Irq+0x2d8>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0d6      	beq.n	80036a8 <SX1276OnDio0Irq+0x18>
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0d3      	beq.n	80036a8 <SX1276OnDio0Irq+0x18>
                            RadioEvents->RxError( );
 8003700:	4798      	blx	r3
 8003702:	e7d1      	b.n	80036a8 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8003704:	2324      	movs	r3, #36	; 0x24
 8003706:	4a96      	ldr	r2, [pc, #600]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003708:	5cd3      	ldrb	r3, [r2, r3]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11c      	bne.n	8003748 <SX1276OnDio0Irq+0xb8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800370e:	4b94      	ldr	r3, [pc, #592]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003710:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8003712:	2900      	cmp	r1, #0
 8003714:	d15b      	bne.n	80037ce <SX1276OnDio0Irq+0x13e>
 8003716:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d158      	bne.n	80037ce <SX1276OnDio0Irq+0x13e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800371c:	3322      	adds	r3, #34	; 0x22
 800371e:	4a90      	ldr	r2, [pc, #576]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d14d      	bne.n	80037c2 <SX1276OnDio0Irq+0x132>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003726:	3101      	adds	r1, #1
 8003728:	4890      	ldr	r0, [pc, #576]	; (800396c <SX1276OnDio0Irq+0x2dc>)
 800372a:	f7ff ffa9 	bl	8003680 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800372e:	4c8c      	ldr	r4, [pc, #560]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003730:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003732:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003734:	1a89      	subs	r1, r1, r2
 8003736:	b2c9      	uxtb	r1, r1
 8003738:	488d      	ldr	r0, [pc, #564]	; (8003970 <SX1276OnDio0Irq+0x2e0>)
 800373a:	3004      	adds	r0, #4
 800373c:	1880      	adds	r0, r0, r2
 800373e:	f7ff ff9f 	bl	8003680 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003742:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003744:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8003746:	e04d      	b.n	80037e4 <SX1276OnDio0Irq+0x154>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8003748:	203f      	movs	r0, #63	; 0x3f
 800374a:	f7fe feb5 	bl	80024b8 <SX1276Read>
 800374e:	466b      	mov	r3, sp
 8003750:	71d8      	strb	r0, [r3, #7]
 8003752:	3307      	adds	r3, #7
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	079b      	lsls	r3, r3, #30
 8003758:	d4d9      	bmi.n	800370e <SX1276OnDio0Irq+0x7e>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800375a:	210b      	movs	r1, #11
 800375c:	203e      	movs	r0, #62	; 0x3e
 800375e:	f7fe fe53 	bl	8002408 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003762:	2110      	movs	r1, #16
 8003764:	203f      	movs	r0, #63	; 0x3f
 8003766:	f7fe fe4f 	bl	8002408 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800376a:	487e      	ldr	r0, [pc, #504]	; (8003964 <SX1276OnDio0Irq+0x2d4>)
 800376c:	f003 f87a 	bl	8006864 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8003770:	2326      	movs	r3, #38	; 0x26
 8003772:	4a7b      	ldr	r2, [pc, #492]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003774:	5cd3      	ldrb	r3, [r2, r3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d116      	bne.n	80037a8 <SX1276OnDio0Irq+0x118>
                            TimerStop( &RxTimeoutSyncWord );
 800377a:	487e      	ldr	r0, [pc, #504]	; (8003974 <SX1276OnDio0Irq+0x2e4>)
 800377c:	f003 f872 	bl	8006864 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8003780:	2200      	movs	r2, #0
 8003782:	4b77      	ldr	r3, [pc, #476]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003784:	711a      	strb	r2, [r3, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003786:	4b78      	ldr	r3, [pc, #480]	; (8003968 <SX1276OnDio0Irq+0x2d8>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <SX1276OnDio0Irq+0x106>
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d000      	beq.n	8003796 <SX1276OnDio0Irq+0x106>
                            RadioEvents->RxError( );
 8003794:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003796:	4b72      	ldr	r3, [pc, #456]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003798:	2200      	movs	r2, #0
 800379a:	2130      	movs	r1, #48	; 0x30
 800379c:	545a      	strb	r2, [r3, r1]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800379e:	3101      	adds	r1, #1
 80037a0:	545a      	strb	r2, [r3, r1]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80037a2:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80037a4:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 80037a6:	e77f      	b.n	80036a8 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80037a8:	200d      	movs	r0, #13
 80037aa:	f7fe fe85 	bl	80024b8 <SX1276Read>
 80037ae:	2140      	movs	r1, #64	; 0x40
 80037b0:	4301      	orrs	r1, r0
 80037b2:	b2c9      	uxtb	r1, r1
 80037b4:	200d      	movs	r0, #13
 80037b6:	f7fe fe27 	bl	8002408 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80037ba:	486e      	ldr	r0, [pc, #440]	; (8003974 <SX1276OnDio0Irq+0x2e4>)
 80037bc:	f002 ffdc 	bl	8006778 <TimerStart>
 80037c0:	e7e1      	b.n	8003786 <SX1276OnDio0Irq+0xf6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80037c2:	2032      	movs	r0, #50	; 0x32
 80037c4:	f7fe fe78 	bl	80024b8 <SX1276Read>
 80037c8:	4b65      	ldr	r3, [pc, #404]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80037ca:	8758      	strh	r0, [r3, #58]	; 0x3a
 80037cc:	e7af      	b.n	800372e <SX1276OnDio0Irq+0x9e>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80037ce:	4c64      	ldr	r4, [pc, #400]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80037d0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80037d2:	1ac9      	subs	r1, r1, r3
 80037d4:	b2c9      	uxtb	r1, r1
 80037d6:	4866      	ldr	r0, [pc, #408]	; (8003970 <SX1276OnDio0Irq+0x2e0>)
 80037d8:	3004      	adds	r0, #4
 80037da:	18c0      	adds	r0, r0, r3
 80037dc:	f7ff ff50 	bl	8003680 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80037e0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80037e2:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 80037e4:	485f      	ldr	r0, [pc, #380]	; (8003964 <SX1276OnDio0Irq+0x2d4>)
 80037e6:	f003 f83d 	bl	8006864 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80037ea:	2326      	movs	r3, #38	; 0x26
 80037ec:	4a5c      	ldr	r2, [pc, #368]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80037ee:	5cd3      	ldrb	r3, [r2, r3]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d11d      	bne.n	8003830 <SX1276OnDio0Irq+0x1a0>
                    SX1276.Settings.State = RF_IDLE;
 80037f4:	2200      	movs	r2, #0
 80037f6:	4b5a      	ldr	r3, [pc, #360]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80037f8:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80037fa:	485e      	ldr	r0, [pc, #376]	; (8003974 <SX1276OnDio0Irq+0x2e4>)
 80037fc:	f003 f832 	bl	8006864 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003800:	4b59      	ldr	r3, [pc, #356]	; (8003968 <SX1276OnDio0Irq+0x2d8>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <SX1276OnDio0Irq+0x18e>
 8003808:	689c      	ldr	r4, [r3, #8]
 800380a:	2c00      	cmp	r4, #0
 800380c:	d007      	beq.n	800381e <SX1276OnDio0Irq+0x18e>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800380e:	4b54      	ldr	r3, [pc, #336]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003810:	2232      	movs	r2, #50	; 0x32
 8003812:	569a      	ldrsb	r2, [r3, r2]
 8003814:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8003816:	2300      	movs	r3, #0
 8003818:	4855      	ldr	r0, [pc, #340]	; (8003970 <SX1276OnDio0Irq+0x2e0>)
 800381a:	3004      	adds	r0, #4
 800381c:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800381e:	4b50      	ldr	r3, [pc, #320]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003820:	2200      	movs	r2, #0
 8003822:	2130      	movs	r1, #48	; 0x30
 8003824:	545a      	strb	r2, [r3, r1]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003826:	3101      	adds	r1, #1
 8003828:	545a      	strb	r2, [r3, r1]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800382a:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 800382c:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 800382e:	e73b      	b.n	80036a8 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003830:	200d      	movs	r0, #13
 8003832:	f7fe fe41 	bl	80024b8 <SX1276Read>
 8003836:	2140      	movs	r1, #64	; 0x40
 8003838:	4301      	orrs	r1, r0
 800383a:	b2c9      	uxtb	r1, r1
 800383c:	200d      	movs	r0, #13
 800383e:	f7fe fde3 	bl	8002408 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8003842:	484c      	ldr	r0, [pc, #304]	; (8003974 <SX1276OnDio0Irq+0x2e4>)
 8003844:	f002 ff98 	bl	8006778 <TimerStart>
 8003848:	e7da      	b.n	8003800 <SX1276OnDio0Irq+0x170>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800384a:	2019      	movs	r0, #25
 800384c:	f7fe fe34 	bl	80024b8 <SX1276Read>
 8003850:	b243      	sxtb	r3, r0
 8003852:	2260      	movs	r2, #96	; 0x60
 8003854:	4942      	ldr	r1, [pc, #264]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003856:	548b      	strb	r3, [r1, r2]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 8003858:	2b00      	cmp	r3, #0
 800385a:	db43      	blt.n	80038e4 <SX1276OnDio0Irq+0x254>
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 800385c:	109b      	asrs	r3, r3, #2
 800385e:	243f      	movs	r4, #63	; 0x3f
 8003860:	401c      	ands	r4, r3
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8003862:	201a      	movs	r0, #26
 8003864:	f7fe fe28 	bl	80024b8 <SX1276Read>
 8003868:	b203      	sxth	r3, r0
                    if( snr < 0 )
 800386a:	2c00      	cmp	r4, #0
 800386c:	db40      	blt.n	80038f0 <SX1276OnDio0Irq+0x260>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800386e:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003870:	6891      	ldr	r1, [r2, #8]
 8003872:	4a41      	ldr	r2, [pc, #260]	; (8003978 <SX1276OnDio0Irq+0x2e8>)
 8003874:	4291      	cmp	r1, r2
 8003876:	d952      	bls.n	800391e <SX1276OnDio0Irq+0x28e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8003878:	111b      	asrs	r3, r3, #4
 800387a:	181b      	adds	r3, r3, r0
 800387c:	3b9d      	subs	r3, #157	; 0x9d
 800387e:	2262      	movs	r2, #98	; 0x62
 8003880:	4937      	ldr	r1, [pc, #220]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003882:	528b      	strh	r3, [r1, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8003884:	2013      	movs	r0, #19
 8003886:	f7fe fe17 	bl	80024b8 <SX1276Read>
 800388a:	4c35      	ldr	r4, [pc, #212]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 800388c:	2564      	movs	r5, #100	; 0x64
 800388e:	5560      	strb	r0, [r4, r5]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8003890:	2010      	movs	r0, #16
 8003892:	f7fe fe11 	bl	80024b8 <SX1276Read>
 8003896:	0001      	movs	r1, r0
 8003898:	200d      	movs	r0, #13
 800389a:	f7fe fdb5 	bl	8002408 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800389e:	5d61      	ldrb	r1, [r4, r5]
 80038a0:	4833      	ldr	r0, [pc, #204]	; (8003970 <SX1276OnDio0Irq+0x2e0>)
 80038a2:	3004      	adds	r0, #4
 80038a4:	f7ff feec 	bl	8003680 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80038a8:	2356      	movs	r3, #86	; 0x56
 80038aa:	5ce3      	ldrb	r3, [r4, r3]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <SX1276OnDio0Irq+0x226>
                        SX1276.Settings.State = RF_IDLE;
 80038b0:	2200      	movs	r2, #0
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80038b4:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80038b6:	482b      	ldr	r0, [pc, #172]	; (8003964 <SX1276OnDio0Irq+0x2d4>)
 80038b8:	f002 ffd4 	bl	8006864 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <SX1276OnDio0Irq+0x2d8>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d100      	bne.n	80038c6 <SX1276OnDio0Irq+0x236>
 80038c4:	e6f0      	b.n	80036a8 <SX1276OnDio0Irq+0x18>
 80038c6:	689c      	ldr	r4, [r3, #8]
 80038c8:	2c00      	cmp	r4, #0
 80038ca:	d100      	bne.n	80038ce <SX1276OnDio0Irq+0x23e>
 80038cc:	e6ec      	b.n	80036a8 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80038ce:	4924      	ldr	r1, [pc, #144]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80038d0:	2360      	movs	r3, #96	; 0x60
 80038d2:	56cb      	ldrsb	r3, [r1, r3]
 80038d4:	2262      	movs	r2, #98	; 0x62
 80038d6:	5e8a      	ldrsh	r2, [r1, r2]
 80038d8:	2064      	movs	r0, #100	; 0x64
 80038da:	5c09      	ldrb	r1, [r1, r0]
 80038dc:	4824      	ldr	r0, [pc, #144]	; (8003970 <SX1276OnDio0Irq+0x2e0>)
 80038de:	3004      	adds	r0, #4
 80038e0:	47a0      	blx	r4
 80038e2:	e6e1      	b.n	80036a8 <SX1276OnDio0Irq+0x18>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 80038e4:	425b      	negs	r3, r3
 80038e6:	109b      	asrs	r3, r3, #2
 80038e8:	243f      	movs	r4, #63	; 0x3f
 80038ea:	401c      	ands	r4, r3
                        snr = -snr;
 80038ec:	4264      	negs	r4, r4
 80038ee:	e7b8      	b.n	8003862 <SX1276OnDio0Irq+0x1d2>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 80038f2:	6891      	ldr	r1, [r2, #8]
 80038f4:	4a20      	ldr	r2, [pc, #128]	; (8003978 <SX1276OnDio0Irq+0x2e8>)
 80038f6:	4291      	cmp	r1, r2
 80038f8:	d908      	bls.n	800390c <SX1276OnDio0Irq+0x27c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80038fa:	111b      	asrs	r3, r3, #4
 80038fc:	181b      	adds	r3, r3, r0
 80038fe:	b29b      	uxth	r3, r3
 8003900:	191b      	adds	r3, r3, r4
 8003902:	3b9d      	subs	r3, #157	; 0x9d
 8003904:	2262      	movs	r2, #98	; 0x62
 8003906:	4916      	ldr	r1, [pc, #88]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003908:	528b      	strh	r3, [r1, r2]
 800390a:	e7bb      	b.n	8003884 <SX1276OnDio0Irq+0x1f4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800390c:	111b      	asrs	r3, r3, #4
 800390e:	181b      	adds	r3, r3, r0
 8003910:	b29b      	uxth	r3, r3
 8003912:	191b      	adds	r3, r3, r4
 8003914:	3ba4      	subs	r3, #164	; 0xa4
 8003916:	2262      	movs	r2, #98	; 0x62
 8003918:	4911      	ldr	r1, [pc, #68]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 800391a:	528b      	strh	r3, [r1, r2]
 800391c:	e7b2      	b.n	8003884 <SX1276OnDio0Irq+0x1f4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800391e:	111b      	asrs	r3, r3, #4
 8003920:	181b      	adds	r3, r3, r0
 8003922:	3ba4      	subs	r3, #164	; 0xa4
 8003924:	2262      	movs	r2, #98	; 0x62
 8003926:	490e      	ldr	r1, [pc, #56]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003928:	528b      	strh	r3, [r1, r2]
 800392a:	e7ab      	b.n	8003884 <SX1276OnDio0Irq+0x1f4>
            TimerStop( &TxTimeoutTimer );
 800392c:	4813      	ldr	r0, [pc, #76]	; (800397c <SX1276OnDio0Irq+0x2ec>)
 800392e:	f002 ff99 	bl	8006864 <TimerStop>
            switch( SX1276.Settings.Modem )
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 8003934:	795b      	ldrb	r3, [r3, #5]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d00d      	beq.n	8003956 <SX1276OnDio0Irq+0x2c6>
                SX1276.Settings.State = RF_IDLE;
 800393a:	2200      	movs	r2, #0
 800393c:	4b08      	ldr	r3, [pc, #32]	; (8003960 <SX1276OnDio0Irq+0x2d0>)
 800393e:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <SX1276OnDio0Irq+0x2d8>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d100      	bne.n	800394a <SX1276OnDio0Irq+0x2ba>
 8003948:	e6ae      	b.n	80036a8 <SX1276OnDio0Irq+0x18>
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d100      	bne.n	8003952 <SX1276OnDio0Irq+0x2c2>
 8003950:	e6aa      	b.n	80036a8 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8003952:	4798      	blx	r3
}
 8003954:	e6a8      	b.n	80036a8 <SX1276OnDio0Irq+0x18>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8003956:	2108      	movs	r1, #8
 8003958:	2012      	movs	r0, #18
 800395a:	f7fe fd55 	bl	8002408 <SX1276Write>
 800395e:	e7ec      	b.n	800393a <SX1276OnDio0Irq+0x2aa>
 8003960:	20000704 	.word	0x20000704
 8003964:	2000076c 	.word	0x2000076c
 8003968:	20000344 	.word	0x20000344
 800396c:	2000073e 	.word	0x2000073e
 8003970:	20000244 	.word	0x20000244
 8003974:	200006f0 	.word	0x200006f0
 8003978:	1f4add40 	.word	0x1f4add40
 800397c:	200006dc 	.word	0x200006dc

08003980 <SX1276OnDio1Irq>:
{
 8003980:	b510      	push	{r4, lr}
    switch( SX1276.Settings.State )
 8003982:	4b3c      	ldr	r3, [pc, #240]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 8003984:	791b      	ldrb	r3, [r3, #4]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d002      	beq.n	8003990 <SX1276OnDio1Irq+0x10>
 800398a:	2b02      	cmp	r3, #2
 800398c:	d04f      	beq.n	8003a2e <SX1276OnDio1Irq+0xae>
}
 800398e:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 8003990:	4b38      	ldr	r3, [pc, #224]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 8003992:	795b      	ldrb	r3, [r3, #5]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d014      	beq.n	80039c2 <SX1276OnDio1Irq+0x42>
 8003998:	2b01      	cmp	r3, #1
 800399a:	d1f8      	bne.n	800398e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800399c:	4836      	ldr	r0, [pc, #216]	; (8003a78 <SX1276OnDio1Irq+0xf8>)
 800399e:	f002 ff61 	bl	8006864 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	2012      	movs	r0, #18
 80039a6:	f7fe fd2f 	bl	8002408 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80039aa:	2200      	movs	r2, #0
 80039ac:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 80039ae:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80039b0:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <SX1276OnDio1Irq+0xfc>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ea      	beq.n	800398e <SX1276OnDio1Irq+0xe>
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0e7      	beq.n	800398e <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 80039be:	4798      	blx	r3
 80039c0:	e7e5      	b.n	800398e <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80039c2:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 80039c4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <SX1276OnDio1Irq+0x64>
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 80039cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d108      	bne.n	80039e4 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80039d2:	3322      	adds	r3, #34	; 0x22
 80039d4:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d117      	bne.n	8003a0c <SX1276OnDio1Irq+0x8c>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80039dc:	2101      	movs	r1, #1
 80039de:	4828      	ldr	r0, [pc, #160]	; (8003a80 <SX1276OnDio1Irq+0x100>)
 80039e0:	f7ff fe4e 	bl	8003680 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 80039e4:	4a23      	ldr	r2, [pc, #140]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 80039e6:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
 80039e8:	8f90      	ldrh	r0, [r2, #60]	; 0x3c
 80039ea:	1a1c      	subs	r4, r3, r0
 80039ec:	213e      	movs	r1, #62	; 0x3e
 80039ee:	5c51      	ldrb	r1, [r2, r1]
 80039f0:	428c      	cmp	r4, r1
 80039f2:	dd11      	ble.n	8003a18 <SX1276OnDio1Irq+0x98>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 80039f4:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <SX1276OnDio1Irq+0x104>)
 80039f6:	3304      	adds	r3, #4
 80039f8:	1818      	adds	r0, r3, r0
 80039fa:	f7ff fe41 	bl	8003680 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 8003a00:	223e      	movs	r2, #62	; 0x3e
 8003a02:	5c9a      	ldrb	r2, [r3, r2]
 8003a04:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8003a06:	1852      	adds	r2, r2, r1
 8003a08:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003a0a:	e7c0      	b.n	800398e <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003a0c:	2032      	movs	r0, #50	; 0x32
 8003a0e:	f7fe fd53 	bl	80024b8 <SX1276Read>
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 8003a14:	8758      	strh	r0, [r3, #58]	; 0x3a
 8003a16:	e7e5      	b.n	80039e4 <SX1276OnDio1Irq+0x64>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003a18:	1a19      	subs	r1, r3, r0
 8003a1a:	b2c9      	uxtb	r1, r1
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <SX1276OnDio1Irq+0x104>)
 8003a1e:	3304      	adds	r3, #4
 8003a20:	1818      	adds	r0, r3, r0
 8003a22:	f7ff fe2d 	bl	8003680 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003a26:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 8003a28:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8003a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003a2c:	e7af      	b.n	800398e <SX1276OnDio1Irq+0xe>
            switch( SX1276.Settings.Modem )
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 8003a30:	795b      	ldrb	r3, [r3, #5]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ab      	bne.n	800398e <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8003a36:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 8003a38:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
 8003a3a:	8f94      	ldrh	r4, [r2, #60]	; 0x3c
 8003a3c:	1b18      	subs	r0, r3, r4
 8003a3e:	213f      	movs	r1, #63	; 0x3f
 8003a40:	5c51      	ldrb	r1, [r2, r1]
 8003a42:	4288      	cmp	r0, r1
 8003a44:	dc0a      	bgt.n	8003a5c <SX1276OnDio1Irq+0xdc>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003a46:	1b19      	subs	r1, r3, r4
 8003a48:	b2c9      	uxtb	r1, r1
 8003a4a:	480e      	ldr	r0, [pc, #56]	; (8003a84 <SX1276OnDio1Irq+0x104>)
 8003a4c:	3004      	adds	r0, #4
 8003a4e:	1900      	adds	r0, r0, r4
 8003a50:	f7ff fd80 	bl	8003554 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8003a54:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 8003a56:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8003a58:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8003a5a:	e798      	b.n	800398e <SX1276OnDio1Irq+0xe>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8003a5c:	4809      	ldr	r0, [pc, #36]	; (8003a84 <SX1276OnDio1Irq+0x104>)
 8003a5e:	3004      	adds	r0, #4
 8003a60:	1900      	adds	r0, r0, r4
 8003a62:	f7ff fd77 	bl	8003554 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003a66:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <SX1276OnDio1Irq+0xf4>)
 8003a68:	223f      	movs	r2, #63	; 0x3f
 8003a6a:	5c9a      	ldrb	r2, [r3, r2]
 8003a6c:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8003a6e:	1852      	adds	r2, r2, r1
 8003a70:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003a72:	e78c      	b.n	800398e <SX1276OnDio1Irq+0xe>
 8003a74:	20000704 	.word	0x20000704
 8003a78:	2000076c 	.word	0x2000076c
 8003a7c:	20000344 	.word	0x20000344
 8003a80:	2000073e 	.word	0x2000073e
 8003a84:	20000244 	.word	0x20000244

08003a88 <SX1276SetMaxPayloadLength>:
{
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	0004      	movs	r4, r0
 8003a8c:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 8003a8e:	f7ff f8c7 	bl	8002c20 <SX1276SetModem>
    switch( modem )
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	d002      	beq.n	8003a9c <SX1276SetMaxPayloadLength+0x14>
 8003a96:	2c01      	cmp	r4, #1
 8003a98:	d00a      	beq.n	8003ab0 <SX1276SetMaxPayloadLength+0x28>
}
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8003a9c:	2322      	movs	r3, #34	; 0x22
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <SX1276SetMaxPayloadLength+0x34>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f9      	bne.n	8003a9a <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8003aa6:	0029      	movs	r1, r5
 8003aa8:	2032      	movs	r0, #50	; 0x32
 8003aaa:	f7fe fcad 	bl	8002408 <SX1276Write>
 8003aae:	e7f4      	b.n	8003a9a <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003ab0:	0029      	movs	r1, r5
 8003ab2:	2023      	movs	r0, #35	; 0x23
 8003ab4:	f7fe fca8 	bl	8002408 <SX1276Write>
}
 8003ab8:	e7ef      	b.n	8003a9a <SX1276SetMaxPayloadLength+0x12>
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	20000704 	.word	0x20000704

08003ac0 <SX1276SetPublicNetwork>:
{
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	f7ff f8ab 	bl	8002c20 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8003aca:	235c      	movs	r3, #92	; 0x5c
 8003acc:	4a06      	ldr	r2, [pc, #24]	; (8003ae8 <SX1276SetPublicNetwork+0x28>)
 8003ace:	54d4      	strb	r4, [r2, r3]
    if( enable == true )
 8003ad0:	2c00      	cmp	r4, #0
 8003ad2:	d104      	bne.n	8003ade <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8003ad4:	2112      	movs	r1, #18
 8003ad6:	2039      	movs	r0, #57	; 0x39
 8003ad8:	f7fe fc96 	bl	8002408 <SX1276Write>
}
 8003adc:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8003ade:	2134      	movs	r1, #52	; 0x34
 8003ae0:	2039      	movs	r0, #57	; 0x39
 8003ae2:	f7fe fc91 	bl	8002408 <SX1276Write>
 8003ae6:	e7f9      	b.n	8003adc <SX1276SetPublicNetwork+0x1c>
 8003ae8:	20000704 	.word	0x20000704

08003aec <SX1276OnTimeoutIrq>:
{
 8003aec:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003aee:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <SX1276OnTimeoutIrq+0xd0>)
 8003af0:	791b      	ldrb	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d002      	beq.n	8003afc <SX1276OnTimeoutIrq+0x10>
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d034      	beq.n	8003b64 <SX1276OnTimeoutIrq+0x78>
}
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8003afc:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <SX1276OnTimeoutIrq+0xd0>)
 8003afe:	795b      	ldrb	r3, [r3, #5]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <SX1276OnTimeoutIrq+0x2a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <SX1276OnTimeoutIrq+0xd4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f6      	beq.n	8003afa <SX1276OnTimeoutIrq+0xe>
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f3      	beq.n	8003afa <SX1276OnTimeoutIrq+0xe>
            RadioEvents->RxTimeout( );
 8003b12:	4798      	blx	r3
 8003b14:	e7f1      	b.n	8003afa <SX1276OnTimeoutIrq+0xe>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003b16:	4c29      	ldr	r4, [pc, #164]	; (8003bbc <SX1276OnTimeoutIrq+0xd0>)
 8003b18:	2230      	movs	r2, #48	; 0x30
 8003b1a:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003b1c:	3201      	adds	r2, #1
 8003b1e:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003b20:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003b22:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003b24:	210b      	movs	r1, #11
 8003b26:	203e      	movs	r0, #62	; 0x3e
 8003b28:	f7fe fc6e 	bl	8002408 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003b2c:	2110      	movs	r1, #16
 8003b2e:	203f      	movs	r0, #63	; 0x3f
 8003b30:	f7fe fc6a 	bl	8002408 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8003b34:	2326      	movs	r3, #38	; 0x26
 8003b36:	5ce3      	ldrb	r3, [r4, r3]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00c      	beq.n	8003b56 <SX1276OnTimeoutIrq+0x6a>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003b3c:	200d      	movs	r0, #13
 8003b3e:	f7fe fcbb 	bl	80024b8 <SX1276Read>
 8003b42:	2140      	movs	r1, #64	; 0x40
 8003b44:	4301      	orrs	r1, r0
 8003b46:	b2c9      	uxtb	r1, r1
 8003b48:	200d      	movs	r0, #13
 8003b4a:	f7fe fc5d 	bl	8002408 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8003b4e:	481d      	ldr	r0, [pc, #116]	; (8003bc4 <SX1276OnTimeoutIrq+0xd8>)
 8003b50:	f002 fe12 	bl	8006778 <TimerStart>
 8003b54:	e7d6      	b.n	8003b04 <SX1276OnTimeoutIrq+0x18>
                SX1276.Settings.State = RF_IDLE;
 8003b56:	2200      	movs	r2, #0
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <SX1276OnTimeoutIrq+0xd0>)
 8003b5a:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8003b5c:	4819      	ldr	r0, [pc, #100]	; (8003bc4 <SX1276OnTimeoutIrq+0xd8>)
 8003b5e:	f002 fe81 	bl	8006864 <TimerStop>
 8003b62:	e7cf      	b.n	8003b04 <SX1276OnTimeoutIrq+0x18>
        SX1276Reset( );
 8003b64:	f7fe fc06 	bl	8002374 <SX1276Reset>
        RxChainCalibration( );
 8003b68:	f7fe fcb2 	bl	80024d0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f7fe fe39 	bl	80027e4 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003b72:	2400      	movs	r4, #0
 8003b74:	e00c      	b.n	8003b90 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8003b76:	4d14      	ldr	r5, [pc, #80]	; (8003bc8 <SX1276OnTimeoutIrq+0xdc>)
 8003b78:	0066      	lsls	r6, r4, #1
 8003b7a:	1936      	adds	r6, r6, r4
 8003b7c:	5d70      	ldrb	r0, [r6, r5]
 8003b7e:	f7ff f84f 	bl	8002c20 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8003b82:	19ad      	adds	r5, r5, r6
 8003b84:	78a9      	ldrb	r1, [r5, #2]
 8003b86:	7868      	ldrb	r0, [r5, #1]
 8003b88:	f7fe fc3e 	bl	8002408 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003b8c:	3401      	adds	r4, #1
 8003b8e:	b2e4      	uxtb	r4, r4
 8003b90:	2c0f      	cmp	r4, #15
 8003b92:	d9f0      	bls.n	8003b76 <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8003b94:	2000      	movs	r0, #0
 8003b96:	f7ff f843 	bl	8002c20 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8003b9a:	4c08      	ldr	r4, [pc, #32]	; (8003bbc <SX1276OnTimeoutIrq+0xd0>)
 8003b9c:	235c      	movs	r3, #92	; 0x5c
 8003b9e:	5ce0      	ldrb	r0, [r4, r3]
 8003ba0:	f7ff ff8e 	bl	8003ac0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <SX1276OnTimeoutIrq+0xd4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0a4      	beq.n	8003afa <SX1276OnTimeoutIrq+0xe>
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0a1      	beq.n	8003afa <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8003bb6:	4798      	blx	r3
}
 8003bb8:	e79f      	b.n	8003afa <SX1276OnTimeoutIrq+0xe>
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20000704 	.word	0x20000704
 8003bc0:	20000344 	.word	0x20000344
 8003bc4:	200006f0 	.word	0x200006f0
 8003bc8:	0800a2fc 	.word	0x0800a2fc

08003bcc <SX1276GetRadioWakeUpTime>:
{
 8003bcc:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003bce:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <SX1276GetRadioWakeUpTime+0x10>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4798      	blx	r3
 8003bd6:	3002      	adds	r0, #2
}
 8003bd8:	bd10      	pop	{r4, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	20000244 	.word	0x20000244

08003be0 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 8003be0:	2005      	movs	r0, #5
 8003be2:	4770      	bx	lr

08003be4 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 8003be4:	2001      	movs	r0, #1
 8003be6:	4770      	bx	lr

08003be8 <SX1276SetAntSw>:
{
 8003be8:	b510      	push	{r4, lr}
 8003bea:	0004      	movs	r4, r0
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8003bec:	2009      	movs	r0, #9
 8003bee:	f7fe fc63 	bl	80024b8 <SX1276Read>
    switch( opMode )
 8003bf2:	2c03      	cmp	r4, #3
 8003bf4:	d110      	bne.n	8003c18 <SX1276SetAntSw+0x30>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8003bf6:	0603      	lsls	r3, r0, #24
 8003bf8:	d408      	bmi.n	8003c0c <SX1276SetAntSw+0x24>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	480b      	ldr	r0, [pc, #44]	; (8003c2c <SX1276SetAntSw+0x44>)
 8003c00:	f003 f806 	bl	8006c10 <HW_GPIO_Write>
      SX1276.RxTx = 1;
 8003c04:	2201      	movs	r2, #1
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <SX1276SetAntSw+0x48>)
 8003c08:	701a      	strb	r2, [r3, #0]
}
 8003c0a:	bd10      	pop	{r4, pc}
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	2102      	movs	r1, #2
 8003c10:	4806      	ldr	r0, [pc, #24]	; (8003c2c <SX1276SetAntSw+0x44>)
 8003c12:	f002 fffd 	bl	8006c10 <HW_GPIO_Write>
 8003c16:	e7f5      	b.n	8003c04 <SX1276SetAntSw+0x1c>
     SX1276.RxTx = 0;
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <SX1276SetAntSw+0x48>)
 8003c1c:	701a      	strb	r2, [r3, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8003c1e:	3201      	adds	r2, #1
 8003c20:	2102      	movs	r1, #2
 8003c22:	20a0      	movs	r0, #160	; 0xa0
 8003c24:	05c0      	lsls	r0, r0, #23
 8003c26:	f002 fff3 	bl	8006c10 <HW_GPIO_Write>
}
 8003c2a:	e7ee      	b.n	8003c0a <SX1276SetAntSw+0x22>
 8003c2c:	50000800 	.word	0x50000800
 8003c30:	20000704 	.word	0x20000704

08003c34 <SX1276SetXO>:
{
 8003c34:	b510      	push	{r4, lr}
  if (state == SET )
 8003c36:	2801      	cmp	r0, #1
 8003c38:	d007      	beq.n	8003c4a <SX1276SetXO+0x16>
    TCXO_OFF(); 
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2180      	movs	r1, #128	; 0x80
 8003c3e:	0149      	lsls	r1, r1, #5
 8003c40:	20a0      	movs	r0, #160	; 0xa0
 8003c42:	05c0      	lsls	r0, r0, #23
 8003c44:	f002 ffe4 	bl	8006c10 <HW_GPIO_Write>
}
 8003c48:	bd10      	pop	{r4, pc}
    TCXO_ON(); 
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	0149      	lsls	r1, r1, #5
 8003c50:	20a0      	movs	r0, #160	; 0xa0
 8003c52:	05c0      	lsls	r0, r0, #23
 8003c54:	f002 ffdc 	bl	8006c10 <HW_GPIO_Write>
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8003c58:	2005      	movs	r0, #5
 8003c5a:	f002 fcd5 	bl	8006608 <DelayMs>
 8003c5e:	e7f3      	b.n	8003c48 <SX1276SetXO+0x14>

08003c60 <SX1276IoInit>:
{
 8003c60:	b530      	push	{r4, r5, lr}
 8003c62:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 8003c64:	2214      	movs	r2, #20
 8003c66:	2100      	movs	r1, #0
 8003c68:	a801      	add	r0, sp, #4
 8003c6a:	f004 f92a 	bl	8007ec2 <memset>
  SX1276BoardInit( &BoardCallbacks );
 8003c6e:	4815      	ldr	r0, [pc, #84]	; (8003cc4 <SX1276IoInit+0x64>)
 8003c70:	f7fe fb74 	bl	800235c <SX1276BoardInit>
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <SX1276IoInit+0x68>)
 8003c76:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLUP;
 8003c78:	2501      	movs	r5, #1
 8003c7a:	9503      	str	r5, [sp, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003c80:	4c12      	ldr	r4, [pc, #72]	; (8003ccc <SX1276IoInit+0x6c>)
 8003c82:	aa01      	add	r2, sp, #4
 8003c84:	2110      	movs	r1, #16
 8003c86:	0020      	movs	r0, r4
 8003c88:	f002 ff46 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8003c8c:	aa01      	add	r2, sp, #4
 8003c8e:	2102      	movs	r1, #2
 8003c90:	0020      	movs	r0, r4
 8003c92:	f002 ff41 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8003c96:	aa01      	add	r2, sp, #4
 8003c98:	2101      	movs	r1, #1
 8003c9a:	0020      	movs	r0, r4
 8003c9c:	f002 ff3c 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8003ca0:	aa01      	add	r2, sp, #4
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	0189      	lsls	r1, r1, #6
 8003ca6:	480a      	ldr	r0, [pc, #40]	; (8003cd0 <SX1276IoInit+0x70>)
 8003ca8:	f002 ff36 	bl	8006b18 <HW_GPIO_Init>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003cac:	9502      	str	r5, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;  
 8003cae:	2300      	movs	r3, #0
 8003cb0:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8003cb2:	aa01      	add	r2, sp, #4
 8003cb4:	2180      	movs	r1, #128	; 0x80
 8003cb6:	0149      	lsls	r1, r1, #5
 8003cb8:	20a0      	movs	r0, #160	; 0xa0
 8003cba:	05c0      	lsls	r0, r0, #23
 8003cbc:	f002 ff2c 	bl	8006b18 <HW_GPIO_Init>
}
 8003cc0:	b007      	add	sp, #28
 8003cc2:	bd30      	pop	{r4, r5, pc}
 8003cc4:	2000002c 	.word	0x2000002c
 8003cc8:	10110000 	.word	0x10110000
 8003ccc:	50000400 	.word	0x50000400
 8003cd0:	50000800 	.word	0x50000800

08003cd4 <SX1276IoDeInit>:
{
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8003cd8:	2214      	movs	r2, #20
 8003cda:	2100      	movs	r1, #0
 8003cdc:	a801      	add	r0, sp, #4
 8003cde:	f004 f8f0 	bl	8007ec2 <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <SX1276IoDeInit+0x44>)
 8003ce4:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003ce6:	4c0d      	ldr	r4, [pc, #52]	; (8003d1c <SX1276IoDeInit+0x48>)
 8003ce8:	aa01      	add	r2, sp, #4
 8003cea:	2110      	movs	r1, #16
 8003cec:	0020      	movs	r0, r4
 8003cee:	f002 ff13 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8003cf2:	aa01      	add	r2, sp, #4
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	0020      	movs	r0, r4
 8003cf8:	f002 ff0e 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8003cfc:	aa01      	add	r2, sp, #4
 8003cfe:	2101      	movs	r1, #1
 8003d00:	0020      	movs	r0, r4
 8003d02:	f002 ff09 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8003d06:	aa01      	add	r2, sp, #4
 8003d08:	2180      	movs	r1, #128	; 0x80
 8003d0a:	0189      	lsls	r1, r1, #6
 8003d0c:	4804      	ldr	r0, [pc, #16]	; (8003d20 <SX1276IoDeInit+0x4c>)
 8003d0e:	f002 ff03 	bl	8006b18 <HW_GPIO_Init>
}
 8003d12:	b006      	add	sp, #24
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	10110000 	.word	0x10110000
 8003d1c:	50000400 	.word	0x50000400
 8003d20:	50000800 	.word	0x50000800

08003d24 <SX1276AntSwInit>:
{
 8003d24:	b510      	push	{r4, lr}
 8003d26:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8003d28:	2214      	movs	r2, #20
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	a801      	add	r0, sp, #4
 8003d2e:	f004 f8c8 	bl	8007ec2 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003d32:	2301      	movs	r3, #1
 8003d34:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003d36:	3302      	adds	r3, #2
 8003d38:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8003d3a:	24a0      	movs	r4, #160	; 0xa0
 8003d3c:	05e4      	lsls	r4, r4, #23
 8003d3e:	aa01      	add	r2, sp, #4
 8003d40:	2102      	movs	r1, #2
 8003d42:	0020      	movs	r0, r4
 8003d44:	f002 fee8 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	0020      	movs	r0, r4
 8003d4e:	f002 ff5f 	bl	8006c10 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8003d52:	4c0b      	ldr	r4, [pc, #44]	; (8003d80 <SX1276AntSwInit+0x5c>)
 8003d54:	aa01      	add	r2, sp, #4
 8003d56:	2102      	movs	r1, #2
 8003d58:	0020      	movs	r0, r4
 8003d5a:	f002 fedd 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2102      	movs	r1, #2
 8003d62:	0020      	movs	r0, r4
 8003d64:	f002 ff54 	bl	8006c10 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8003d68:	aa01      	add	r2, sp, #4
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	0020      	movs	r0, r4
 8003d6e:	f002 fed3 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8003d72:	2200      	movs	r2, #0
 8003d74:	2104      	movs	r1, #4
 8003d76:	0020      	movs	r0, r4
 8003d78:	f002 ff4a 	bl	8006c10 <HW_GPIO_Write>
}
 8003d7c:	b006      	add	sp, #24
 8003d7e:	bd10      	pop	{r4, pc}
 8003d80:	50000800 	.word	0x50000800

08003d84 <SX1276AntSwDeInit>:
{
 8003d84:	b510      	push	{r4, lr}
 8003d86:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8003d88:	2214      	movs	r2, #20
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	a801      	add	r0, sp, #4
 8003d8e:	f004 f898 	bl	8007ec2 <memset>
  initStruct.Mode = GPIO_MODE_ANALOG ;
 8003d92:	2303      	movs	r3, #3
 8003d94:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003d96:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8003d98:	24a0      	movs	r4, #160	; 0xa0
 8003d9a:	05e4      	lsls	r4, r4, #23
 8003d9c:	aa01      	add	r2, sp, #4
 8003d9e:	2102      	movs	r1, #2
 8003da0:	0020      	movs	r0, r4
 8003da2:	f002 feb9 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2102      	movs	r1, #2
 8003daa:	0020      	movs	r0, r4
 8003dac:	f002 ff30 	bl	8006c10 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8003db0:	4c0b      	ldr	r4, [pc, #44]	; (8003de0 <SX1276AntSwDeInit+0x5c>)
 8003db2:	aa01      	add	r2, sp, #4
 8003db4:	2102      	movs	r1, #2
 8003db6:	0020      	movs	r0, r4
 8003db8:	f002 feae 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	0020      	movs	r0, r4
 8003dc2:	f002 ff25 	bl	8006c10 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8003dc6:	aa01      	add	r2, sp, #4
 8003dc8:	2104      	movs	r1, #4
 8003dca:	0020      	movs	r0, r4
 8003dcc:	f002 fea4 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2104      	movs	r1, #4
 8003dd4:	0020      	movs	r0, r4
 8003dd6:	f002 ff1b 	bl	8006c10 <HW_GPIO_Write>
}
 8003dda:	b006      	add	sp, #24
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	50000800 	.word	0x50000800

08003de4 <SX1276SetAntSwLowPower>:
{
 8003de4:	b510      	push	{r4, lr}
    if( status == false )
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d002      	beq.n	8003df0 <SX1276SetAntSwLowPower+0xc>
      SX1276AntSwDeInit( );
 8003dea:	f7ff ffcb 	bl	8003d84 <SX1276AntSwDeInit>
}
 8003dee:	bd10      	pop	{r4, pc}
      SX1276AntSwInit( );
 8003df0:	f7ff ff98 	bl	8003d24 <SX1276AntSwInit>
 8003df4:	e7fb      	b.n	8003dee <SX1276SetAntSwLowPower+0xa>
	...

08003df8 <SX1276IoIrqInit>:
{
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8003dfc:	4d0d      	ldr	r5, [pc, #52]	; (8003e34 <SX1276IoIrqInit+0x3c>)
 8003dfe:	6803      	ldr	r3, [r0, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	2110      	movs	r1, #16
 8003e04:	0028      	movs	r0, r5
 8003e06:	f002 fed7 	bl	8006bb8 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2102      	movs	r1, #2
 8003e10:	0028      	movs	r0, r5
 8003e12:	f002 fed1 	bl	8006bb8 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8003e16:	68a3      	ldr	r3, [r4, #8]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	0028      	movs	r0, r5
 8003e1e:	f002 fecb 	bl	8006bb8 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8003e22:	68e3      	ldr	r3, [r4, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	0189      	lsls	r1, r1, #6
 8003e2a:	4803      	ldr	r0, [pc, #12]	; (8003e38 <SX1276IoIrqInit+0x40>)
 8003e2c:	f002 fec4 	bl	8006bb8 <HW_GPIO_SetIrq>
}
 8003e30:	bd70      	pop	{r4, r5, r6, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	50000400 	.word	0x50000400
 8003e38:	50000800 	.word	0x50000800

08003e3c <SX1276GetPaSelect>:
    if (power >14)
 8003e3c:	280e      	cmp	r0, #14
 8003e3e:	dd01      	ble.n	8003e44 <SX1276GetPaSelect+0x8>
        return RF_PACONFIG_PASELECT_PABOOST;
 8003e40:	2080      	movs	r0, #128	; 0x80
}
 8003e42:	4770      	bx	lr
        return RF_PACONFIG_PASELECT_RFO;
 8003e44:	2000      	movs	r0, #0
 8003e46:	e7fc      	b.n	8003e42 <SX1276GetPaSelect+0x6>

08003e48 <SX1276SetRfTxPower>:
{
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	0005      	movs	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
 8003e4c:	2009      	movs	r0, #9
 8003e4e:	f7fe fb33 	bl	80024b8 <SX1276Read>
 8003e52:	0007      	movs	r7, r0
    paDac = SX1276Read( REG_PADAC );
 8003e54:	204d      	movs	r0, #77	; 0x4d
 8003e56:	f7fe fb2f 	bl	80024b8 <SX1276Read>
 8003e5a:	0006      	movs	r6, r0
 8003e5c:	0004      	movs	r4, r0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8003e5e:	207f      	movs	r0, #127	; 0x7f
 8003e60:	4007      	ands	r7, r0
 8003e62:	0028      	movs	r0, r5
 8003e64:	f7ff ffea 	bl	8003e3c <SX1276GetPaSelect>
 8003e68:	b240      	sxtb	r0, r0
 8003e6a:	4338      	orrs	r0, r7
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8003e6c:	d414      	bmi.n	8003e98 <SX1276SetRfTxPower+0x50>
        if( power > 0 )
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	dd41      	ble.n	8003ef6 <SX1276SetRfTxPower+0xae>
            if( power > 15 )
 8003e72:	2d0f      	cmp	r5, #15
 8003e74:	dd00      	ble.n	8003e78 <SX1276SetRfTxPower+0x30>
                power = 15;
 8003e76:	250f      	movs	r5, #15
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8003e78:	237f      	movs	r3, #127	; 0x7f
 8003e7a:	0001      	movs	r1, r0
 8003e7c:	4399      	bics	r1, r3
 8003e7e:	2070      	movs	r0, #112	; 0x70
 8003e80:	4301      	orrs	r1, r0
 8003e82:	b249      	sxtb	r1, r1
 8003e84:	4329      	orrs	r1, r5
 8003e86:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8003e88:	2009      	movs	r0, #9
 8003e8a:	f7fe fabd 	bl	8002408 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8003e8e:	0021      	movs	r1, r4
 8003e90:	204d      	movs	r0, #77	; 0x4d
 8003e92:	f7fe fab9 	bl	8002408 <SX1276Write>
}
 8003e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( power > 17 )
 8003e98:	2d11      	cmp	r5, #17
 8003e9a:	dd14      	ble.n	8003ec6 <SX1276SetRfTxPower+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8003e9c:	2407      	movs	r4, #7
 8003e9e:	4334      	orrs	r4, r6
 8003ea0:	b2e4      	uxtb	r4, r4
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	4023      	ands	r3, r4
 8003ea6:	2b07      	cmp	r3, #7
 8003ea8:	d014      	beq.n	8003ed4 <SX1276SetRfTxPower+0x8c>
            if( power < 2 )
 8003eaa:	2d01      	cmp	r5, #1
 8003eac:	dd21      	ble.n	8003ef2 <SX1276SetRfTxPower+0xaa>
            if( power > 17 )
 8003eae:	2d11      	cmp	r5, #17
 8003eb0:	dd00      	ble.n	8003eb4 <SX1276SetRfTxPower+0x6c>
                power = 17;
 8003eb2:	2511      	movs	r5, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8003eb4:	230f      	movs	r3, #15
 8003eb6:	4398      	bics	r0, r3
 8003eb8:	3d02      	subs	r5, #2
 8003eba:	b26d      	sxtb	r5, r5
 8003ebc:	210f      	movs	r1, #15
 8003ebe:	4029      	ands	r1, r5
 8003ec0:	4301      	orrs	r1, r0
 8003ec2:	b2c9      	uxtb	r1, r1
 8003ec4:	e7e0      	b.n	8003e88 <SX1276SetRfTxPower+0x40>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8003ec6:	2307      	movs	r3, #7
 8003ec8:	439e      	bics	r6, r3
 8003eca:	b274      	sxtb	r4, r6
 8003ecc:	2604      	movs	r6, #4
 8003ece:	4334      	orrs	r4, r6
 8003ed0:	b2e4      	uxtb	r4, r4
 8003ed2:	e7e6      	b.n	8003ea2 <SX1276SetRfTxPower+0x5a>
            if( power < 5 )
 8003ed4:	2d04      	cmp	r5, #4
 8003ed6:	dc00      	bgt.n	8003eda <SX1276SetRfTxPower+0x92>
                power = 5;
 8003ed8:	2505      	movs	r5, #5
            if( power > 20 )
 8003eda:	2d14      	cmp	r5, #20
 8003edc:	dd00      	ble.n	8003ee0 <SX1276SetRfTxPower+0x98>
                power = 20;
 8003ede:	2514      	movs	r5, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	4398      	bics	r0, r3
 8003ee4:	3d05      	subs	r5, #5
 8003ee6:	b26d      	sxtb	r5, r5
 8003ee8:	210f      	movs	r1, #15
 8003eea:	4029      	ands	r1, r5
 8003eec:	4301      	orrs	r1, r0
 8003eee:	b2c9      	uxtb	r1, r1
 8003ef0:	e7ca      	b.n	8003e88 <SX1276SetRfTxPower+0x40>
                power = 2;
 8003ef2:	2502      	movs	r5, #2
 8003ef4:	e7db      	b.n	8003eae <SX1276SetRfTxPower+0x66>
            if( power < -4 )
 8003ef6:	1d2b      	adds	r3, r5, #4
 8003ef8:	da01      	bge.n	8003efe <SX1276SetRfTxPower+0xb6>
                power = -4;
 8003efa:	2504      	movs	r5, #4
 8003efc:	426d      	negs	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8003efe:	237f      	movs	r3, #127	; 0x7f
 8003f00:	4398      	bics	r0, r3
 8003f02:	1d29      	adds	r1, r5, #4
 8003f04:	b249      	sxtb	r1, r1
 8003f06:	4301      	orrs	r1, r0
 8003f08:	b2c9      	uxtb	r1, r1
 8003f0a:	e7bd      	b.n	8003e88 <SX1276SetRfTxPower+0x40>

08003f0c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003f0c:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <SystemInit+0x44>)
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	0052      	lsls	r2, r2, #1
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	490e      	ldr	r1, [pc, #56]	; (8003f54 <SystemInit+0x48>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	490d      	ldr	r1, [pc, #52]	; (8003f58 <SystemInit+0x4c>)
 8003f24:	400a      	ands	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	490a      	ldr	r1, [pc, #40]	; (8003f5c <SystemInit+0x50>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	4909      	ldr	r1, [pc, #36]	; (8003f60 <SystemInit+0x54>)
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003f40:	2200      	movs	r2, #0
 8003f42:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	0512      	lsls	r2, r2, #20
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <SystemInit+0x58>)
 8003f4a:	609a      	str	r2, [r3, #8]
#endif
}
 8003f4c:	4770      	bx	lr
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	40021000 	.word	0x40021000
 8003f54:	88ff400c 	.word	0x88ff400c
 8003f58:	fef6fff6 	.word	0xfef6fff6
 8003f5c:	fffbffff 	.word	0xfffbffff
 8003f60:	ff02ffff 	.word	0xff02ffff
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f68:	b510      	push	{r4, lr}
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f6a:	4a06      	ldr	r2, [pc, #24]	; (8003f84 <HAL_Init+0x1c>)
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	2102      	movs	r1, #2
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003f74:	2003      	movs	r0, #3
 8003f76:	f003 fc3d 	bl	80077f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f7a:	f003 fc3d 	bl	80077f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003f7e:	2000      	movs	r0, #0
 8003f80:	bd10      	pop	{r4, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	40022000 	.word	0x40022000

08003f88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003f88:	4a02      	ldr	r2, [pc, #8]	; (8003f94 <HAL_IncTick+0xc>)
 8003f8a:	6813      	ldr	r3, [r2, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	4770      	bx	lr
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	20000780 	.word	0x20000780

08003f98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f98:	4b01      	ldr	r3, [pc, #4]	; (8003fa0 <HAL_GetTick+0x8>)
 8003f9a:	6818      	ldr	r0, [r3, #0]
}
 8003f9c:	4770      	bx	lr
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	20000780 	.word	0x20000780

08003fa4 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003fa4:	4a02      	ldr	r2, [pc, #8]	; (8003fb0 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8003fa6:	6853      	ldr	r3, [r2, #4]
 8003fa8:	2101      	movs	r1, #1
 8003faa:	430b      	orrs	r3, r1
 8003fac:	6053      	str	r3, [r2, #4]
}
 8003fae:	4770      	bx	lr
 8003fb0:	40015800 	.word	0x40015800

08003fb4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003fb4:	4a02      	ldr	r2, [pc, #8]	; (8003fc0 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003fb6:	6853      	ldr	r3, [r2, #4]
 8003fb8:	2102      	movs	r1, #2
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	6053      	str	r3, [r2, #4]
}
 8003fbe:	4770      	bx	lr
 8003fc0:	40015800 	.word	0x40015800

08003fc4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003fc4:	4a02      	ldr	r2, [pc, #8]	; (8003fd0 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003fc6:	6853      	ldr	r3, [r2, #4]
 8003fc8:	2104      	movs	r1, #4
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6053      	str	r3, [r2, #4]
}
 8003fce:	4770      	bx	lr
 8003fd0:	40015800 	.word	0x40015800

08003fd4 <HAL_ADC_MspInit>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_ADC_Init>:
{
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8003fdc:	d100      	bne.n	8003fe0 <HAL_ADC_Init+0x8>
 8003fde:	e0e2      	b.n	80041a6 <HAL_ADC_Init+0x1ce>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fe0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d031      	beq.n	800404a <HAL_ADC_Init+0x72>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fe8:	06db      	lsls	r3, r3, #27
 8003fea:	d434      	bmi.n	8004056 <HAL_ADC_Init+0x7e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003fec:	6821      	ldr	r1, [r4, #0]
 8003fee:	688b      	ldr	r3, [r1, #8]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003ff4:	d12f      	bne.n	8004056 <HAL_ADC_Init+0x7e>
  ADC_STATE_CLR_SET(hadc->State,
 8003ff6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003ff8:	486c      	ldr	r0, [pc, #432]	; (80041ac <HAL_ADC_Init+0x1d4>)
 8003ffa:	4002      	ands	r2, r0
 8003ffc:	3006      	adds	r0, #6
 8003ffe:	30ff      	adds	r0, #255	; 0xff
 8004000:	4302      	orrs	r2, r0
 8004002:	65a2      	str	r2, [r4, #88]	; 0x58
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004004:	6888      	ldr	r0, [r1, #8]
 8004006:	2203      	movs	r2, #3
 8004008:	4002      	ands	r2, r0
 800400a:	2a01      	cmp	r2, #1
 800400c:	d02c      	beq.n	8004068 <HAL_ADC_Init+0x90>
 800400e:	2200      	movs	r2, #0
 8004010:	2a00      	cmp	r2, #0
 8004012:	d143      	bne.n	800409c <HAL_ADC_Init+0xc4>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004014:	6862      	ldr	r2, [r4, #4]
 8004016:	20c0      	movs	r0, #192	; 0xc0
 8004018:	0600      	lsls	r0, r0, #24
 800401a:	4282      	cmp	r2, r0
 800401c:	d02b      	beq.n	8004076 <HAL_ADC_Init+0x9e>
 800401e:	2080      	movs	r0, #128	; 0x80
 8004020:	05c0      	lsls	r0, r0, #23
 8004022:	4282      	cmp	r2, r0
 8004024:	d027      	beq.n	8004076 <HAL_ADC_Init+0x9e>
 8004026:	2080      	movs	r0, #128	; 0x80
 8004028:	0600      	lsls	r0, r0, #24
 800402a:	4282      	cmp	r2, r0
 800402c:	d023      	beq.n	8004076 <HAL_ADC_Init+0x9e>
 800402e:	690a      	ldr	r2, [r1, #16]
 8004030:	0092      	lsls	r2, r2, #2
 8004032:	0892      	lsrs	r2, r2, #2
 8004034:	610a      	str	r2, [r1, #16]
 8004036:	4a5e      	ldr	r2, [pc, #376]	; (80041b0 <HAL_ADC_Init+0x1d8>)
 8004038:	6811      	ldr	r1, [r2, #0]
 800403a:	485e      	ldr	r0, [pc, #376]	; (80041b4 <HAL_ADC_Init+0x1dc>)
 800403c:	4001      	ands	r1, r0
 800403e:	6011      	str	r1, [r2, #0]
 8004040:	6811      	ldr	r1, [r2, #0]
 8004042:	6860      	ldr	r0, [r4, #4]
 8004044:	4301      	orrs	r1, r0
 8004046:	6011      	str	r1, [r2, #0]
 8004048:	e01e      	b.n	8004088 <HAL_ADC_Init+0xb0>
    ADC_CLEAR_ERRORCODE(hadc);
 800404a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800404c:	2254      	movs	r2, #84	; 0x54
 800404e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8004050:	f7ff ffc0 	bl	8003fd4 <HAL_ADC_MspInit>
 8004054:	e7c7      	b.n	8003fe6 <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004058:	2210      	movs	r2, #16
 800405a:	4313      	orrs	r3, r2
 800405c:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 800405e:	2200      	movs	r2, #0
 8004060:	2354      	movs	r3, #84	; 0x54
 8004062:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8004064:	2001      	movs	r0, #1
}
 8004066:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004068:	680a      	ldr	r2, [r1, #0]
 800406a:	07d2      	lsls	r2, r2, #31
 800406c:	d401      	bmi.n	8004072 <HAL_ADC_Init+0x9a>
 800406e:	2200      	movs	r2, #0
 8004070:	e7ce      	b.n	8004010 <HAL_ADC_Init+0x38>
 8004072:	2201      	movs	r2, #1
 8004074:	e7cc      	b.n	8004010 <HAL_ADC_Init+0x38>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004076:	690a      	ldr	r2, [r1, #16]
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	0892      	lsrs	r2, r2, #2
 800407c:	610a      	str	r2, [r1, #16]
 800407e:	6821      	ldr	r1, [r4, #0]
 8004080:	690a      	ldr	r2, [r1, #16]
 8004082:	6860      	ldr	r0, [r4, #4]
 8004084:	4302      	orrs	r2, r0
 8004086:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004088:	6821      	ldr	r1, [r4, #0]
 800408a:	68ca      	ldr	r2, [r1, #12]
 800408c:	2018      	movs	r0, #24
 800408e:	4382      	bics	r2, r0
 8004090:	60ca      	str	r2, [r1, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004092:	6821      	ldr	r1, [r4, #0]
 8004094:	68ca      	ldr	r2, [r1, #12]
 8004096:	68a0      	ldr	r0, [r4, #8]
 8004098:	4302      	orrs	r2, r0
 800409a:	60ca      	str	r2, [r1, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800409c:	4a44      	ldr	r2, [pc, #272]	; (80041b0 <HAL_ADC_Init+0x1d8>)
 800409e:	6811      	ldr	r1, [r2, #0]
 80040a0:	4845      	ldr	r0, [pc, #276]	; (80041b8 <HAL_ADC_Init+0x1e0>)
 80040a2:	4001      	ands	r1, r0
 80040a4:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80040a6:	6811      	ldr	r1, [r2, #0]
 80040a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80040aa:	0640      	lsls	r0, r0, #25
 80040ac:	4301      	orrs	r1, r0
 80040ae:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	6891      	ldr	r1, [r2, #8]
 80040b4:	00c9      	lsls	r1, r1, #3
 80040b6:	d404      	bmi.n	80040c2 <HAL_ADC_Init+0xea>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80040b8:	6890      	ldr	r0, [r2, #8]
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	0549      	lsls	r1, r1, #21
 80040be:	4301      	orrs	r1, r0
 80040c0:	6091      	str	r1, [r2, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80040c2:	6821      	ldr	r1, [r4, #0]
 80040c4:	68ca      	ldr	r2, [r1, #12]
 80040c6:	483d      	ldr	r0, [pc, #244]	; (80041bc <HAL_ADC_Init+0x1e4>)
 80040c8:	4002      	ands	r2, r0
 80040ca:	60ca      	str	r2, [r1, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	68c2      	ldr	r2, [r0, #12]
 80040d0:	68e1      	ldr	r1, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80040d2:	6925      	ldr	r5, [r4, #16]
 80040d4:	2d02      	cmp	r5, #2
 80040d6:	d03d      	beq.n	8004154 <HAL_ADC_Init+0x17c>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80040d8:	430b      	orrs	r3, r1
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80040da:	6a21      	ldr	r1, [r4, #32]
 80040dc:	0349      	lsls	r1, r1, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80040de:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 80040e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80040e2:	0049      	lsls	r1, r1, #1
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80040e4:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 80040e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e8:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80040ea:	69a1      	ldr	r1, [r4, #24]
 80040ec:	0389      	lsls	r1, r1, #14
                            hadc->Init.Overrun                               |
 80040ee:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80040f0:	69e1      	ldr	r1, [r4, #28]
 80040f2:	03c9      	lsls	r1, r1, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80040f4:	430b      	orrs	r3, r1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040fc:	22c2      	movs	r2, #194	; 0xc2
 80040fe:	32ff      	adds	r2, #255	; 0xff
 8004100:	4293      	cmp	r3, r2
 8004102:	d005      	beq.n	8004110 <HAL_ADC_Init+0x138>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004104:	6821      	ldr	r1, [r4, #0]
 8004106:	68ca      	ldr	r2, [r1, #12]
 8004108:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800410a:	4303      	orrs	r3, r0
 800410c:	4313      	orrs	r3, r2
 800410e:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004112:	2b01      	cmp	r3, #1
 8004114:	d020      	beq.n	8004158 <HAL_ADC_Init+0x180>
  if (hadc->Init.OversamplingMode == ENABLE)
 8004116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004118:	2b01      	cmp	r3, #1
 800411a:	d030      	beq.n	800417e <HAL_ADC_Init+0x1a6>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	07d2      	lsls	r2, r2, #31
 8004122:	d503      	bpl.n	800412c <HAL_ADC_Init+0x154>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	2101      	movs	r1, #1
 8004128:	438a      	bics	r2, r1
 800412a:	611a      	str	r2, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800412c:	6822      	ldr	r2, [r4, #0]
 800412e:	6953      	ldr	r3, [r2, #20]
 8004130:	2107      	movs	r1, #7
 8004132:	438b      	bics	r3, r1
 8004134:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	6953      	ldr	r3, [r2, #20]
 800413a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800413c:	430b      	orrs	r3, r1
 800413e:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8004140:	2300      	movs	r3, #0
 8004142:	65e3      	str	r3, [r4, #92]	; 0x5c
  ADC_STATE_CLR_SET(hadc->State,
 8004144:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004146:	2203      	movs	r2, #3
 8004148:	4393      	bics	r3, r2
 800414a:	3a02      	subs	r2, #2
 800414c:	4313      	orrs	r3, r2
 800414e:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8004150:	2000      	movs	r0, #0
 8004152:	e788      	b.n	8004066 <HAL_ADC_Init+0x8e>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004154:	2304      	movs	r3, #4
 8004156:	e7bf      	b.n	80040d8 <HAL_ADC_Init+0x100>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004158:	6a23      	ldr	r3, [r4, #32]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_ADC_Init+0x194>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	68d1      	ldr	r1, [r2, #12]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	025b      	lsls	r3, r3, #9
 8004166:	430b      	orrs	r3, r1
 8004168:	60d3      	str	r3, [r2, #12]
 800416a:	e7d4      	b.n	8004116 <HAL_ADC_Init+0x13e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800416c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800416e:	2220      	movs	r2, #32
 8004170:	4313      	orrs	r3, r2
 8004172:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004174:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004176:	3a1f      	subs	r2, #31
 8004178:	4313      	orrs	r3, r2
 800417a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800417c:	e7cb      	b.n	8004116 <HAL_ADC_Init+0x13e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800417e:	6822      	ldr	r2, [r4, #0]
 8004180:	6913      	ldr	r3, [r2, #16]
 8004182:	490f      	ldr	r1, [pc, #60]	; (80041c0 <HAL_ADC_Init+0x1e8>)
 8004184:	400b      	ands	r3, r1
 8004186:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004188:	6821      	ldr	r1, [r4, #0]
 800418a:	690a      	ldr	r2, [r1, #16]
 800418c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800418e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004190:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 8004192:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004194:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004196:	4313      	orrs	r3, r2
 8004198:	610b      	str	r3, [r1, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	6913      	ldr	r3, [r2, #16]
 800419e:	2101      	movs	r1, #1
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6113      	str	r3, [r2, #16]
 80041a4:	e7c2      	b.n	800412c <HAL_ADC_Init+0x154>
    return HAL_ERROR;
 80041a6:	2001      	movs	r0, #1
 80041a8:	e75d      	b.n	8004066 <HAL_ADC_Init+0x8e>
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	fffffefd 	.word	0xfffffefd
 80041b0:	40012708 	.word	0x40012708
 80041b4:	ffc3ffff 	.word	0xffc3ffff
 80041b8:	fdffffff 	.word	0xfdffffff
 80041bc:	fffe0219 	.word	0xfffe0219
 80041c0:	fffffc03 	.word	0xfffffc03

080041c4 <HAL_COMP_GetOutputLevel>:
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
  
  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_COMPxOUTVALUE)
 80041c4:	6803      	ldr	r3, [r0, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0f9b      	lsrs	r3, r3, #30
 80041ca:	2001      	movs	r0, #1
 80041cc:	4018      	ands	r0, r3
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 80041ce:	4770      	bx	lr

080041d0 <HAL_COMP_IRQHandler>:
{
 80041d0:	b510      	push	{r4, lr}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <HAL_COMP_IRQHandler+0x38>)
 80041d4:	6802      	ldr	r2, [r0, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d010      	beq.n	80041fc <HAL_COMP_IRQHandler+0x2c>
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	03db      	lsls	r3, r3, #15
  if(READ_BIT(EXTI->PR, exti_line) != RESET)
 80041de:	4a0b      	ldr	r2, [pc, #44]	; (800420c <HAL_COMP_IRQHandler+0x3c>)
 80041e0:	6952      	ldr	r2, [r2, #20]
 80041e2:	421a      	tst	r2, r3
 80041e4:	d009      	beq.n	80041fa <HAL_COMP_IRQHandler+0x2a>
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0)
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_COMP_IRQHandler+0x38>)
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	05d2      	lsls	r2, r2, #23
 80041ec:	d509      	bpl.n	8004202 <HAL_COMP_IRQHandler+0x32>
      WRITE_REG(EXTI->PR, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 80041ee:	22c0      	movs	r2, #192	; 0xc0
 80041f0:	03d2      	lsls	r2, r2, #15
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_COMP_IRQHandler+0x3c>)
 80041f4:	615a      	str	r2, [r3, #20]
    HAL_COMP_TriggerCallback(hcomp);
 80041f6:	f003 fbf5 	bl	80079e4 <HAL_COMP_TriggerCallback>
}
 80041fa:	bd10      	pop	{r4, pc}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	039b      	lsls	r3, r3, #14
 8004200:	e7ed      	b.n	80041de <HAL_COMP_IRQHandler+0xe>
      WRITE_REG(EXTI->PR, exti_line);
 8004202:	4a02      	ldr	r2, [pc, #8]	; (800420c <HAL_COMP_IRQHandler+0x3c>)
 8004204:	6153      	str	r3, [r2, #20]
 8004206:	e7f6      	b.n	80041f6 <HAL_COMP_IRQHandler+0x26>
 8004208:	40010018 	.word	0x40010018
 800420c:	40010400 	.word	0x40010400

08004210 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004210:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8004212:	2800      	cmp	r0, #0
 8004214:	db11      	blt.n	800423a <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004216:	0883      	lsrs	r3, r0, #2
 8004218:	4d14      	ldr	r5, [pc, #80]	; (800426c <HAL_NVIC_SetPriority+0x5c>)
 800421a:	33c0      	adds	r3, #192	; 0xc0
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	595c      	ldr	r4, [r3, r5]
 8004220:	2203      	movs	r2, #3
 8004222:	4010      	ands	r0, r2
 8004224:	00c0      	lsls	r0, r0, #3
 8004226:	32fc      	adds	r2, #252	; 0xfc
 8004228:	0016      	movs	r6, r2
 800422a:	4086      	lsls	r6, r0
 800422c:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800422e:	0189      	lsls	r1, r1, #6
 8004230:	400a      	ands	r2, r1
 8004232:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004234:	4322      	orrs	r2, r4
 8004236:	515a      	str	r2, [r3, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004238:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800423a:	b2c0      	uxtb	r0, r0
 800423c:	230f      	movs	r3, #15
 800423e:	4003      	ands	r3, r0
 8004240:	3b08      	subs	r3, #8
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	3306      	adds	r3, #6
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4a09      	ldr	r2, [pc, #36]	; (8004270 <HAL_NVIC_SetPriority+0x60>)
 800424a:	4694      	mov	ip, r2
 800424c:	4463      	add	r3, ip
 800424e:	685d      	ldr	r5, [r3, #4]
 8004250:	2203      	movs	r2, #3
 8004252:	4010      	ands	r0, r2
 8004254:	00c0      	lsls	r0, r0, #3
 8004256:	24ff      	movs	r4, #255	; 0xff
 8004258:	0022      	movs	r2, r4
 800425a:	4082      	lsls	r2, r0
 800425c:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800425e:	0189      	lsls	r1, r1, #6
 8004260:	400c      	ands	r4, r1
 8004262:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004264:	432c      	orrs	r4, r5
 8004266:	605c      	str	r4, [r3, #4]
 8004268:	e7e6      	b.n	8004238 <HAL_NVIC_SetPriority+0x28>
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	e000e100 	.word	0xe000e100
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004274:	231f      	movs	r3, #31
 8004276:	4018      	ands	r0, r3
 8004278:	3b1e      	subs	r3, #30
 800427a:	4083      	lsls	r3, r0
 800427c:	4a01      	ldr	r2, [pc, #4]	; (8004284 <HAL_NVIC_EnableIRQ+0x10>)
 800427e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004280:	4770      	bx	lr
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	e000e100 	.word	0xe000e100

08004288 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004288:	231f      	movs	r3, #31
 800428a:	4018      	ands	r0, r3
 800428c:	3b1e      	subs	r3, #30
 800428e:	4083      	lsls	r3, r0
 8004290:	2280      	movs	r2, #128	; 0x80
 8004292:	0052      	lsls	r2, r2, #1
 8004294:	4901      	ldr	r1, [pc, #4]	; (800429c <HAL_NVIC_SetPendingIRQ+0x14>)
 8004296:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8004298:	4770      	bx	lr
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	e000e100 	.word	0xe000e100

080042a0 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80042a0:	231f      	movs	r3, #31
 80042a2:	4018      	ands	r0, r3
 80042a4:	3b1e      	subs	r3, #30
 80042a6:	4083      	lsls	r3, r0
 80042a8:	22c0      	movs	r2, #192	; 0xc0
 80042aa:	0052      	lsls	r2, r2, #1
 80042ac:	4901      	ldr	r1, [pc, #4]	; (80042b4 <HAL_NVIC_ClearPendingIRQ+0x14>)
 80042ae:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80042b0:	4770      	bx	lr
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	e000e100 	.word	0xe000e100

080042b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ba:	46c6      	mov	lr, r8
 80042bc:	b500      	push	{lr}
  uint32_t position = 0x00U;
 80042be:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80042c0:	e091      	b.n	80043e6 <HAL_GPIO_Init+0x12e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80042c2:	08df      	lsrs	r7, r3, #3
 80042c4:	3708      	adds	r7, #8
 80042c6:	00bf      	lsls	r7, r7, #2
 80042c8:	583e      	ldr	r6, [r7, r0]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80042ca:	2507      	movs	r5, #7
 80042cc:	401d      	ands	r5, r3
 80042ce:	00ad      	lsls	r5, r5, #2
 80042d0:	220f      	movs	r2, #15
 80042d2:	40aa      	lsls	r2, r5
 80042d4:	4396      	bics	r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80042d6:	690a      	ldr	r2, [r1, #16]
 80042d8:	40aa      	lsls	r2, r5
 80042da:	0015      	movs	r5, r2
 80042dc:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 80042de:	503d      	str	r5, [r7, r0]
 80042e0:	e091      	b.n	8004406 <HAL_GPIO_Init+0x14e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042e2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80042e4:	005f      	lsls	r7, r3, #1
 80042e6:	2603      	movs	r6, #3
 80042e8:	40be      	lsls	r6, r7
 80042ea:	43b5      	bics	r5, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ec:	68ce      	ldr	r6, [r1, #12]
 80042ee:	40be      	lsls	r6, r7
 80042f0:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80042f2:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80042f4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f6:	43a5      	bics	r5, r4
 80042f8:	002c      	movs	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042fa:	684a      	ldr	r2, [r1, #4]
 80042fc:	0916      	lsrs	r6, r2, #4
 80042fe:	2501      	movs	r5, #1
 8004300:	4035      	ands	r5, r6
 8004302:	409d      	lsls	r5, r3
 8004304:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004306:	6044      	str	r4, [r0, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004308:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800430a:	005e      	lsls	r6, r3, #1
 800430c:	2403      	movs	r4, #3
 800430e:	0027      	movs	r7, r4
 8004310:	40b7      	lsls	r7, r6
 8004312:	43ff      	mvns	r7, r7
 8004314:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004316:	684a      	ldr	r2, [r1, #4]
 8004318:	4014      	ands	r4, r2
 800431a:	40b4      	lsls	r4, r6
 800431c:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800431e:	6004      	str	r4, [r0, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004320:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004322:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8004324:	688d      	ldr	r5, [r1, #8]
 8004326:	40b5      	lsls	r5, r6
 8004328:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800432a:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800432c:	684a      	ldr	r2, [r1, #4]
 800432e:	00d2      	lsls	r2, r2, #3
 8004330:	d558      	bpl.n	80043e4 <HAL_GPIO_Init+0x12c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004332:	4d42      	ldr	r5, [pc, #264]	; (800443c <HAL_GPIO_Init+0x184>)
 8004334:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8004336:	2601      	movs	r6, #1
 8004338:	4334      	orrs	r4, r6
 800433a:	636c      	str	r4, [r5, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800433c:	089c      	lsrs	r4, r3, #2
 800433e:	1ca5      	adds	r5, r4, #2
 8004340:	00ad      	lsls	r5, r5, #2
 8004342:	4e3f      	ldr	r6, [pc, #252]	; (8004440 <HAL_GPIO_Init+0x188>)
 8004344:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004346:	2703      	movs	r7, #3
 8004348:	401f      	ands	r7, r3
 800434a:	00bd      	lsls	r5, r7, #2
 800434c:	270f      	movs	r7, #15
 800434e:	40af      	lsls	r7, r5
 8004350:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004352:	27a0      	movs	r7, #160	; 0xa0
 8004354:	05ff      	lsls	r7, r7, #23
 8004356:	42b8      	cmp	r0, r7
 8004358:	d063      	beq.n	8004422 <HAL_GPIO_Init+0x16a>
 800435a:	4f3a      	ldr	r7, [pc, #232]	; (8004444 <HAL_GPIO_Init+0x18c>)
 800435c:	42b8      	cmp	r0, r7
 800435e:	d062      	beq.n	8004426 <HAL_GPIO_Init+0x16e>
 8004360:	4f39      	ldr	r7, [pc, #228]	; (8004448 <HAL_GPIO_Init+0x190>)
 8004362:	42b8      	cmp	r0, r7
 8004364:	d061      	beq.n	800442a <HAL_GPIO_Init+0x172>
 8004366:	4f39      	ldr	r7, [pc, #228]	; (800444c <HAL_GPIO_Init+0x194>)
 8004368:	42b8      	cmp	r0, r7
 800436a:	d060      	beq.n	800442e <HAL_GPIO_Init+0x176>
 800436c:	4f38      	ldr	r7, [pc, #224]	; (8004450 <HAL_GPIO_Init+0x198>)
 800436e:	42b8      	cmp	r0, r7
 8004370:	d05f      	beq.n	8004432 <HAL_GPIO_Init+0x17a>
 8004372:	4f38      	ldr	r7, [pc, #224]	; (8004454 <HAL_GPIO_Init+0x19c>)
 8004374:	42b8      	cmp	r0, r7
 8004376:	d052      	beq.n	800441e <HAL_GPIO_Init+0x166>
 8004378:	2706      	movs	r7, #6
 800437a:	40af      	lsls	r7, r5
 800437c:	003d      	movs	r5, r7
 800437e:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004380:	3402      	adds	r4, #2
 8004382:	00a4      	lsls	r4, r4, #2
 8004384:	4e2e      	ldr	r6, [pc, #184]	; (8004440 <HAL_GPIO_Init+0x188>)
 8004386:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004388:	4c33      	ldr	r4, [pc, #204]	; (8004458 <HAL_GPIO_Init+0x1a0>)
 800438a:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800438c:	4642      	mov	r2, r8
 800438e:	43d4      	mvns	r4, r2
 8004390:	0026      	movs	r6, r4
 8004392:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004394:	684a      	ldr	r2, [r1, #4]
 8004396:	03d2      	lsls	r2, r2, #15
 8004398:	d502      	bpl.n	80043a0 <HAL_GPIO_Init+0xe8>
        {
          temp |= iocurrent;
 800439a:	4642      	mov	r2, r8
 800439c:	4315      	orrs	r5, r2
 800439e:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80043a0:	4d2d      	ldr	r5, [pc, #180]	; (8004458 <HAL_GPIO_Init+0x1a0>)
 80043a2:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80043a4:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 80043a6:	002e      	movs	r6, r5
 80043a8:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043aa:	684a      	ldr	r2, [r1, #4]
 80043ac:	0392      	lsls	r2, r2, #14
 80043ae:	d502      	bpl.n	80043b6 <HAL_GPIO_Init+0xfe>
        {
          temp |= iocurrent;
 80043b0:	4642      	mov	r2, r8
 80043b2:	4315      	orrs	r5, r2
 80043b4:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80043b6:	4d28      	ldr	r5, [pc, #160]	; (8004458 <HAL_GPIO_Init+0x1a0>)
 80043b8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ba:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80043bc:	002e      	movs	r6, r5
 80043be:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043c0:	684a      	ldr	r2, [r1, #4]
 80043c2:	02d2      	lsls	r2, r2, #11
 80043c4:	d502      	bpl.n	80043cc <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 80043c6:	4642      	mov	r2, r8
 80043c8:	4315      	orrs	r5, r2
 80043ca:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80043cc:	4d22      	ldr	r5, [pc, #136]	; (8004458 <HAL_GPIO_Init+0x1a0>)
 80043ce:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80043d0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80043d2:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043d4:	684a      	ldr	r2, [r1, #4]
 80043d6:	0292      	lsls	r2, r2, #10
 80043d8:	d502      	bpl.n	80043e0 <HAL_GPIO_Init+0x128>
        {
          temp |= iocurrent;
 80043da:	4642      	mov	r2, r8
 80043dc:	432a      	orrs	r2, r5
 80043de:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80043e0:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_GPIO_Init+0x1a0>)
 80043e2:	60d4      	str	r4, [r2, #12]
      }
    }
    position++;
 80043e4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80043e6:	680a      	ldr	r2, [r1, #0]
 80043e8:	0014      	movs	r4, r2
 80043ea:	40dc      	lsrs	r4, r3
 80043ec:	d023      	beq.n	8004436 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80043ee:	2401      	movs	r4, #1
 80043f0:	409c      	lsls	r4, r3
 80043f2:	4022      	ands	r2, r4
 80043f4:	4690      	mov	r8, r2
    if(iocurrent)
 80043f6:	d0f5      	beq.n	80043e4 <HAL_GPIO_Init+0x12c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80043f8:	684d      	ldr	r5, [r1, #4]
 80043fa:	2d02      	cmp	r5, #2
 80043fc:	d100      	bne.n	8004400 <HAL_GPIO_Init+0x148>
 80043fe:	e760      	b.n	80042c2 <HAL_GPIO_Init+0xa>
 8004400:	2d12      	cmp	r5, #18
 8004402:	d100      	bne.n	8004406 <HAL_GPIO_Init+0x14e>
 8004404:	e75d      	b.n	80042c2 <HAL_GPIO_Init+0xa>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004406:	684d      	ldr	r5, [r1, #4]
 8004408:	1e6e      	subs	r6, r5, #1
 800440a:	2e01      	cmp	r6, #1
 800440c:	d800      	bhi.n	8004410 <HAL_GPIO_Init+0x158>
 800440e:	e768      	b.n	80042e2 <HAL_GPIO_Init+0x2a>
 8004410:	2d11      	cmp	r5, #17
 8004412:	d100      	bne.n	8004416 <HAL_GPIO_Init+0x15e>
 8004414:	e765      	b.n	80042e2 <HAL_GPIO_Init+0x2a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004416:	2d12      	cmp	r5, #18
 8004418:	d000      	beq.n	800441c <HAL_GPIO_Init+0x164>
 800441a:	e775      	b.n	8004308 <HAL_GPIO_Init+0x50>
 800441c:	e761      	b.n	80042e2 <HAL_GPIO_Init+0x2a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800441e:	2705      	movs	r7, #5
 8004420:	e7ab      	b.n	800437a <HAL_GPIO_Init+0xc2>
 8004422:	2700      	movs	r7, #0
 8004424:	e7a9      	b.n	800437a <HAL_GPIO_Init+0xc2>
 8004426:	2701      	movs	r7, #1
 8004428:	e7a7      	b.n	800437a <HAL_GPIO_Init+0xc2>
 800442a:	2702      	movs	r7, #2
 800442c:	e7a5      	b.n	800437a <HAL_GPIO_Init+0xc2>
 800442e:	2703      	movs	r7, #3
 8004430:	e7a3      	b.n	800437a <HAL_GPIO_Init+0xc2>
 8004432:	2704      	movs	r7, #4
 8004434:	e7a1      	b.n	800437a <HAL_GPIO_Init+0xc2>
  }
}
 8004436:	bc04      	pop	{r2}
 8004438:	4690      	mov	r8, r2
 800443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	40010000 	.word	0x40010000
 8004444:	50000400 	.word	0x50000400
 8004448:	50000800 	.word	0x50000800
 800444c:	50000c00 	.word	0x50000c00
 8004450:	50001000 	.word	0x50001000
 8004454:	50001c00 	.word	0x50001c00
 8004458:	40010400 	.word	0x40010400

0800445c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800445c:	2a00      	cmp	r2, #0
 800445e:	d101      	bne.n	8004464 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8004460:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004462:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8004464:	6181      	str	r1, [r0, #24]
 8004466:	e7fc      	b.n	8004462 <HAL_GPIO_WritePin+0x6>

08004468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004468:	b510      	push	{r4, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	4218      	tst	r0, r3
 8004470:	d100      	bne.n	8004474 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004472:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004474:	4b02      	ldr	r3, [pc, #8]	; (8004480 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004476:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004478:	f003 fa04 	bl	8007884 <HAL_GPIO_EXTI_Callback>
}
 800447c:	e7f9      	b.n	8004472 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	40010400 	.word	0x40010400

08004484 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8004484:	4a02      	ldr	r2, [pc, #8]	; (8004490 <HAL_PWR_DisablePVD+0xc>)
 8004486:	6813      	ldr	r3, [r2, #0]
 8004488:	2110      	movs	r1, #16
 800448a:	438b      	bics	r3, r1
 800448c:	6013      	str	r3, [r2, #0]
}
 800448e:	4770      	bx	lr
 8004490:	40007000 	.word	0x40007000

08004494 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004494:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <HAL_PWR_EnterSLEEPMode+0x28>)
 8004498:	6813      	ldr	r3, [r2, #0]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800449a:	2403      	movs	r4, #3
 800449c:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800449e:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80044a0:	6010      	str	r0, [r2, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80044a2:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <HAL_PWR_EnterSLEEPMode+0x2c>)
 80044a4:	6913      	ldr	r3, [r2, #16]
 80044a6:	2004      	movs	r0, #4
 80044a8:	4383      	bics	r3, r0
 80044aa:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80044ac:	2901      	cmp	r1, #1
 80044ae:	d003      	beq.n	80044b8 <HAL_PWR_EnterSLEEPMode+0x24>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80044b0:	bf40      	sev
  __ASM volatile ("wfe");
 80044b2:	bf20      	wfe
 80044b4:	bf20      	wfe
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80044b6:	bd10      	pop	{r4, pc}
  __ASM volatile ("wfi");
 80044b8:	bf30      	wfi
 80044ba:	e7fc      	b.n	80044b6 <HAL_PWR_EnterSLEEPMode+0x22>
 80044bc:	40007000 	.word	0x40007000
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80044c4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80044c6:	4a0c      	ldr	r2, [pc, #48]	; (80044f8 <HAL_PWR_EnterSTOPMode+0x34>)
 80044c8:	6813      	ldr	r3, [r2, #0]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80044ca:	2403      	movs	r4, #3
 80044cc:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80044ce:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80044d0:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <HAL_PWR_EnterSTOPMode+0x38>)
 80044d4:	6913      	ldr	r3, [r2, #16]
 80044d6:	2004      	movs	r0, #4
 80044d8:	4303      	orrs	r3, r0
 80044da:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80044dc:	2901      	cmp	r1, #1
 80044de:	d008      	beq.n	80044f2 <HAL_PWR_EnterSTOPMode+0x2e>
  __ASM volatile ("sev");
 80044e0:	bf40      	sev
  __ASM volatile ("wfe");
 80044e2:	bf20      	wfe
 80044e4:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80044e6:	4a05      	ldr	r2, [pc, #20]	; (80044fc <HAL_PWR_EnterSTOPMode+0x38>)
 80044e8:	6913      	ldr	r3, [r2, #16]
 80044ea:	2104      	movs	r1, #4
 80044ec:	438b      	bics	r3, r1
 80044ee:	6113      	str	r3, [r2, #16]

}
 80044f0:	bd10      	pop	{r4, pc}
  __ASM volatile ("wfi");
 80044f2:	bf30      	wfi
 80044f4:	e7f7      	b.n	80044e6 <HAL_PWR_EnterSTOPMode+0x22>
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	40007000 	.word	0x40007000
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004500:	4a03      	ldr	r2, [pc, #12]	; (8004510 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8004502:	6811      	ldr	r1, [r2, #0]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	430b      	orrs	r3, r1
 800450a:	6013      	str	r3, [r2, #0]
}
 800450c:	4770      	bx	lr
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	40007000 	.word	0x40007000

08004514 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004514:	4a03      	ldr	r2, [pc, #12]	; (8004524 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8004516:	6811      	ldr	r1, [r2, #0]
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	430b      	orrs	r3, r1
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	4770      	bx	lr
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	40007000 	.word	0x40007000

08004528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004528:	b530      	push	{r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <RCC_SetFlashLatencyFromMSIRange+0x70>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	22f0      	movs	r2, #240	; 0xf0
 8004530:	4013      	ands	r3, r2
 8004532:	d122      	bne.n	800457a <RCC_SetFlashLatencyFromMSIRange+0x52>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004534:	4a18      	ldr	r2, [pc, #96]	; (8004598 <RCC_SetFlashLatencyFromMSIRange+0x70>)
 8004536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004538:	00d2      	lsls	r2, r2, #3
 800453a:	d50e      	bpl.n	800455a <RCC_SetFlashLatencyFromMSIRange+0x32>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800453c:	4a17      	ldr	r2, [pc, #92]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0x74>)
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	21c0      	movs	r1, #192	; 0xc0
 8004542:	0149      	lsls	r1, r1, #5
 8004544:	400a      	ands	r2, r1
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
      __HAL_RCC_PWR_CLK_DISABLE();
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004546:	21c0      	movs	r1, #192	; 0xc0
 8004548:	0149      	lsls	r1, r1, #5
 800454a:	428a      	cmp	r2, r1
 800454c:	d116      	bne.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x54>
 800454e:	22c0      	movs	r2, #192	; 0xc0
 8004550:	0212      	lsls	r2, r2, #8
 8004552:	4290      	cmp	r0, r2
 8004554:	d112      	bne.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004556:	2301      	movs	r3, #1
 8004558:	e010      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x54>
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	490f      	ldr	r1, [pc, #60]	; (8004598 <RCC_SetFlashLatencyFromMSIRange+0x70>)
 800455c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	0552      	lsls	r2, r2, #21
 8004562:	4322      	orrs	r2, r4
 8004564:	638a      	str	r2, [r1, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004566:	4a0d      	ldr	r2, [pc, #52]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	24c0      	movs	r4, #192	; 0xc0
 800456c:	0164      	lsls	r4, r4, #5
 800456e:	4022      	ands	r2, r4
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8004572:	4d0b      	ldr	r5, [pc, #44]	; (80045a0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8004574:	402c      	ands	r4, r5
 8004576:	638c      	str	r4, [r1, #56]	; 0x38
 8004578:	e7e5      	b.n	8004546 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800457a:	2300      	movs	r3, #0
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800457c:	4809      	ldr	r0, [pc, #36]	; (80045a4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800457e:	6802      	ldr	r2, [r0, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	438a      	bics	r2, r1
 8004584:	431a      	orrs	r2, r3
 8004586:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004588:	6802      	ldr	r2, [r0, #0]
 800458a:	4011      	ands	r1, r2
 800458c:	428b      	cmp	r3, r1
 800458e:	d001      	beq.n	8004594 <RCC_SetFlashLatencyFromMSIRange+0x6c>
  {
    return HAL_ERROR;
 8004590:	2001      	movs	r0, #1
  }
  
  return HAL_OK;
}
 8004592:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8004594:	2000      	movs	r0, #0
 8004596:	e7fc      	b.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8004598:	40021000 	.word	0x40021000
 800459c:	40007000 	.word	0x40007000
 80045a0:	efffffff 	.word	0xefffffff
 80045a4:	40022000 	.word	0x40022000

080045a8 <HAL_RCC_OscConfig>:
{
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ae:	6803      	ldr	r3, [r0, #0]
 80045b0:	07db      	lsls	r3, r3, #31
 80045b2:	d541      	bpl.n	8004638 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045b4:	4bbb      	ldr	r3, [pc, #748]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	230c      	movs	r3, #12
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d033      	beq.n	8004628 <HAL_RCC_OscConfig+0x80>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045c0:	4bb8      	ldr	r3, [pc, #736]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	230c      	movs	r3, #12
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b0c      	cmp	r3, #12
 80045ca:	d029      	beq.n	8004620 <HAL_RCC_OscConfig+0x78>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	2280      	movs	r2, #128	; 0x80
 80045d0:	0252      	lsls	r2, r2, #9
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d058      	beq.n	8004688 <HAL_RCC_OscConfig+0xe0>
 80045d6:	22a0      	movs	r2, #160	; 0xa0
 80045d8:	02d2      	lsls	r2, r2, #11
 80045da:	4293      	cmp	r3, r2
 80045dc:	d05b      	beq.n	8004696 <HAL_RCC_OscConfig+0xee>
 80045de:	4bb1      	ldr	r3, [pc, #708]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	49b1      	ldr	r1, [pc, #708]	; (80048a8 <HAL_RCC_OscConfig+0x300>)
 80045e4:	400a      	ands	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	2180      	movs	r1, #128	; 0x80
 80045ec:	0249      	lsls	r1, r1, #9
 80045ee:	400a      	ands	r2, r1
 80045f0:	9201      	str	r2, [sp, #4]
 80045f2:	9a01      	ldr	r2, [sp, #4]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	49ad      	ldr	r1, [pc, #692]	; (80048ac <HAL_RCC_OscConfig+0x304>)
 80045f8:	400a      	ands	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045fc:	6863      	ldr	r3, [r4, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d055      	beq.n	80046ae <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8004602:	f7ff fcc9 	bl	8003f98 <HAL_GetTick>
 8004606:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004608:	4ba6      	ldr	r3, [pc, #664]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	039b      	lsls	r3, r3, #14
 800460e:	d413      	bmi.n	8004638 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7ff fcc2 	bl	8003f98 <HAL_GetTick>
 8004614:	1b40      	subs	r0, r0, r5
 8004616:	4ba6      	ldr	r3, [pc, #664]	; (80048b0 <HAL_RCC_OscConfig+0x308>)
 8004618:	4298      	cmp	r0, r3
 800461a:	d9f5      	bls.n	8004608 <HAL_RCC_OscConfig+0x60>
            return HAL_TIMEOUT;
 800461c:	2003      	movs	r0, #3
 800461e:	e269      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004620:	4ba0      	ldr	r3, [pc, #640]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	03db      	lsls	r3, r3, #15
 8004626:	d5d1      	bpl.n	80045cc <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	4b9e      	ldr	r3, [pc, #632]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	039b      	lsls	r3, r3, #14
 800462e:	d503      	bpl.n	8004638 <HAL_RCC_OscConfig+0x90>
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d100      	bne.n	8004638 <HAL_RCC_OscConfig+0x90>
 8004636:	e256      	b.n	8004ae6 <HAL_RCC_OscConfig+0x53e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	079b      	lsls	r3, r3, #30
 800463c:	d55b      	bpl.n	80046f6 <HAL_RCC_OscConfig+0x14e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800463e:	4b99      	ldr	r3, [pc, #612]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	230c      	movs	r3, #12
 8004644:	4013      	ands	r3, r2
 8004646:	2b04      	cmp	r3, #4
 8004648:	d044      	beq.n	80046d4 <HAL_RCC_OscConfig+0x12c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800464a:	4b96      	ldr	r3, [pc, #600]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	230c      	movs	r3, #12
 8004650:	4013      	ands	r3, r2
 8004652:	2b0c      	cmp	r3, #12
 8004654:	d03a      	beq.n	80046cc <HAL_RCC_OscConfig+0x124>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d100      	bne.n	800465e <HAL_RCC_OscConfig+0xb6>
 800465c:	e0ae      	b.n	80047bc <HAL_RCC_OscConfig+0x214>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800465e:	4991      	ldr	r1, [pc, #580]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004660:	680a      	ldr	r2, [r1, #0]
 8004662:	2009      	movs	r0, #9
 8004664:	4382      	bics	r2, r0
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800466a:	f7ff fc95 	bl	8003f98 <HAL_GetTick>
 800466e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004670:	4b8c      	ldr	r3, [pc, #560]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	075b      	lsls	r3, r3, #29
 8004676:	d500      	bpl.n	800467a <HAL_RCC_OscConfig+0xd2>
 8004678:	e097      	b.n	80047aa <HAL_RCC_OscConfig+0x202>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467a:	f7ff fc8d 	bl	8003f98 <HAL_GetTick>
 800467e:	1b40      	subs	r0, r0, r5
 8004680:	2802      	cmp	r0, #2
 8004682:	d9f5      	bls.n	8004670 <HAL_RCC_OscConfig+0xc8>
            return HAL_TIMEOUT;
 8004684:	2003      	movs	r0, #3
 8004686:	e235      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	4a86      	ldr	r2, [pc, #536]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800468a:	6811      	ldr	r1, [r2, #0]
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	025b      	lsls	r3, r3, #9
 8004690:	430b      	orrs	r3, r1
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	e7b2      	b.n	80045fc <HAL_RCC_OscConfig+0x54>
 8004696:	4b83      	ldr	r3, [pc, #524]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	2280      	movs	r2, #128	; 0x80
 800469c:	02d2      	lsls	r2, r2, #11
 800469e:	430a      	orrs	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	0252      	lsls	r2, r2, #9
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e7a6      	b.n	80045fc <HAL_RCC_OscConfig+0x54>
        tickstart = HAL_GetTick();
 80046ae:	f7ff fc73 	bl	8003f98 <HAL_GetTick>
 80046b2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b4:	4b7b      	ldr	r3, [pc, #492]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	039b      	lsls	r3, r3, #14
 80046ba:	d5bd      	bpl.n	8004638 <HAL_RCC_OscConfig+0x90>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046bc:	f7ff fc6c 	bl	8003f98 <HAL_GetTick>
 80046c0:	1b40      	subs	r0, r0, r5
 80046c2:	4b7b      	ldr	r3, [pc, #492]	; (80048b0 <HAL_RCC_OscConfig+0x308>)
 80046c4:	4298      	cmp	r0, r3
 80046c6:	d9f5      	bls.n	80046b4 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80046c8:	2003      	movs	r0, #3
 80046ca:	e213      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046cc:	4b75      	ldr	r3, [pc, #468]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	03db      	lsls	r3, r3, #15
 80046d2:	d4c0      	bmi.n	8004656 <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d4:	4b73      	ldr	r3, [pc, #460]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	075b      	lsls	r3, r3, #29
 80046da:	d504      	bpl.n	80046e6 <HAL_RCC_OscConfig+0x13e>
 80046dc:	68e3      	ldr	r3, [r4, #12]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x13e>
        return HAL_ERROR;
 80046e2:	2001      	movs	r0, #1
 80046e4:	e206      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e6:	496f      	ldr	r1, [pc, #444]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80046e8:	684b      	ldr	r3, [r1, #4]
 80046ea:	4a72      	ldr	r2, [pc, #456]	; (80048b4 <HAL_RCC_OscConfig+0x30c>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	6922      	ldr	r2, [r4, #16]
 80046f0:	0212      	lsls	r2, r2, #8
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	06db      	lsls	r3, r3, #27
 80046fa:	d53b      	bpl.n	8004774 <HAL_RCC_OscConfig+0x1cc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80046fc:	4b69      	ldr	r3, [pc, #420]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	220c      	movs	r2, #12
 8004702:	421a      	tst	r2, r3
 8004704:	d000      	beq.n	8004708 <HAL_RCC_OscConfig+0x160>
 8004706:	e080      	b.n	800480a <HAL_RCC_OscConfig+0x262>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004708:	4b66      	ldr	r3, [pc, #408]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	059b      	lsls	r3, r3, #22
 800470e:	d503      	bpl.n	8004718 <HAL_RCC_OscConfig+0x170>
 8004710:	69e3      	ldr	r3, [r4, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d100      	bne.n	8004718 <HAL_RCC_OscConfig+0x170>
 8004716:	e1e8      	b.n	8004aea <HAL_RCC_OscConfig+0x542>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004718:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800471a:	4b62      	ldr	r3, [pc, #392]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	22e0      	movs	r2, #224	; 0xe0
 8004720:	0212      	lsls	r2, r2, #8
 8004722:	4013      	ands	r3, r2
 8004724:	4298      	cmp	r0, r3
 8004726:	d95c      	bls.n	80047e2 <HAL_RCC_OscConfig+0x23a>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004728:	f7ff fefe 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 800472c:	2800      	cmp	r0, #0
 800472e:	d000      	beq.n	8004732 <HAL_RCC_OscConfig+0x18a>
 8004730:	e1dd      	b.n	8004aee <HAL_RCC_OscConfig+0x546>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004732:	4a5c      	ldr	r2, [pc, #368]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004734:	6853      	ldr	r3, [r2, #4]
 8004736:	4960      	ldr	r1, [pc, #384]	; (80048b8 <HAL_RCC_OscConfig+0x310>)
 8004738:	400b      	ands	r3, r1
 800473a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800473c:	430b      	orrs	r3, r1
 800473e:	6053      	str	r3, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004740:	6853      	ldr	r3, [r2, #4]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	6a21      	ldr	r1, [r4, #32]
 8004748:	0609      	lsls	r1, r1, #24
 800474a:	430b      	orrs	r3, r1
 800474c:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800474e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004750:	0b5a      	lsrs	r2, r3, #13
 8004752:	3201      	adds	r2, #1
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800475a:	4a52      	ldr	r2, [pc, #328]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800475c:	68d1      	ldr	r1, [r2, #12]
 800475e:	0909      	lsrs	r1, r1, #4
 8004760:	220f      	movs	r2, #15
 8004762:	400a      	ands	r2, r1
 8004764:	4955      	ldr	r1, [pc, #340]	; (80048bc <HAL_RCC_OscConfig+0x314>)
 8004766:	5c8a      	ldrb	r2, [r1, r2]
 8004768:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800476a:	4a55      	ldr	r2, [pc, #340]	; (80048c0 <HAL_RCC_OscConfig+0x318>)
 800476c:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800476e:	2003      	movs	r0, #3
 8004770:	f003 f840 	bl	80077f4 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	071b      	lsls	r3, r3, #28
 8004778:	d400      	bmi.n	800477c <HAL_RCC_OscConfig+0x1d4>
 800477a:	e0a5      	b.n	80048c8 <HAL_RCC_OscConfig+0x320>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800477c:	6963      	ldr	r3, [r4, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d07c      	beq.n	800487c <HAL_RCC_OscConfig+0x2d4>
      __HAL_RCC_LSI_ENABLE();
 8004782:	4a48      	ldr	r2, [pc, #288]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004784:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004786:	2101      	movs	r1, #1
 8004788:	430b      	orrs	r3, r1
 800478a:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 800478c:	f7ff fc04 	bl	8003f98 <HAL_GetTick>
 8004790:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004792:	4b44      	ldr	r3, [pc, #272]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004796:	079b      	lsls	r3, r3, #30
 8004798:	d500      	bpl.n	800479c <HAL_RCC_OscConfig+0x1f4>
 800479a:	e095      	b.n	80048c8 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479c:	f7ff fbfc 	bl	8003f98 <HAL_GetTick>
 80047a0:	1b40      	subs	r0, r0, r5
 80047a2:	2802      	cmp	r0, #2
 80047a4:	d9f5      	bls.n	8004792 <HAL_RCC_OscConfig+0x1ea>
          return HAL_TIMEOUT;
 80047a6:	2003      	movs	r0, #3
 80047a8:	e1a4      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	493e      	ldr	r1, [pc, #248]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80047ac:	684b      	ldr	r3, [r1, #4]
 80047ae:	4a41      	ldr	r2, [pc, #260]	; (80048b4 <HAL_RCC_OscConfig+0x30c>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	6922      	ldr	r2, [r4, #16]
 80047b4:	0212      	lsls	r2, r2, #8
 80047b6:	4313      	orrs	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]
 80047ba:	e79c      	b.n	80046f6 <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_DISABLE();
 80047bc:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80047be:	6813      	ldr	r3, [r2, #0]
 80047c0:	2101      	movs	r1, #1
 80047c2:	438b      	bics	r3, r1
 80047c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80047c6:	f7ff fbe7 	bl	8003f98 <HAL_GetTick>
 80047ca:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047cc:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	075b      	lsls	r3, r3, #29
 80047d2:	d590      	bpl.n	80046f6 <HAL_RCC_OscConfig+0x14e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d4:	f7ff fbe0 	bl	8003f98 <HAL_GetTick>
 80047d8:	1b40      	subs	r0, r0, r5
 80047da:	2802      	cmp	r0, #2
 80047dc:	d9f6      	bls.n	80047cc <HAL_RCC_OscConfig+0x224>
            return HAL_TIMEOUT;
 80047de:	2003      	movs	r0, #3
 80047e0:	e188      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047e2:	4a30      	ldr	r2, [pc, #192]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 80047e4:	6853      	ldr	r3, [r2, #4]
 80047e6:	4934      	ldr	r1, [pc, #208]	; (80048b8 <HAL_RCC_OscConfig+0x310>)
 80047e8:	400b      	ands	r3, r1
 80047ea:	4318      	orrs	r0, r3
 80047ec:	6050      	str	r0, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047ee:	6853      	ldr	r3, [r2, #4]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	6a21      	ldr	r1, [r4, #32]
 80047f6:	0609      	lsls	r1, r1, #24
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6053      	str	r3, [r2, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80047fe:	f7ff fe93 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8004802:	2800      	cmp	r0, #0
 8004804:	d0a3      	beq.n	800474e <HAL_RCC_OscConfig+0x1a6>
            return HAL_ERROR;
 8004806:	2001      	movs	r0, #1
 8004808:	e174      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800480a:	69e3      	ldr	r3, [r4, #28]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d022      	beq.n	8004856 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_MSI_ENABLE();
 8004810:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004812:	6811      	ldr	r1, [r2, #0]
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	430b      	orrs	r3, r1
 800481a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800481c:	f7ff fbbc 	bl	8003f98 <HAL_GetTick>
 8004820:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	059b      	lsls	r3, r3, #22
 8004828:	d406      	bmi.n	8004838 <HAL_RCC_OscConfig+0x290>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800482a:	f7ff fbb5 	bl	8003f98 <HAL_GetTick>
 800482e:	1b40      	subs	r0, r0, r5
 8004830:	2802      	cmp	r0, #2
 8004832:	d9f6      	bls.n	8004822 <HAL_RCC_OscConfig+0x27a>
            return HAL_TIMEOUT;
 8004834:	2003      	movs	r0, #3
 8004836:	e15d      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004838:	4a1a      	ldr	r2, [pc, #104]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800483a:	6853      	ldr	r3, [r2, #4]
 800483c:	491e      	ldr	r1, [pc, #120]	; (80048b8 <HAL_RCC_OscConfig+0x310>)
 800483e:	400b      	ands	r3, r1
 8004840:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004842:	430b      	orrs	r3, r1
 8004844:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004846:	6853      	ldr	r3, [r2, #4]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	6a21      	ldr	r1, [r4, #32]
 800484e:	0609      	lsls	r1, r1, #24
 8004850:	430b      	orrs	r3, r1
 8004852:	6053      	str	r3, [r2, #4]
 8004854:	e78e      	b.n	8004774 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_MSI_DISABLE();
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	491a      	ldr	r1, [pc, #104]	; (80048c4 <HAL_RCC_OscConfig+0x31c>)
 800485c:	400b      	ands	r3, r1
 800485e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004860:	f7ff fb9a 	bl	8003f98 <HAL_GetTick>
 8004864:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8004866:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	059b      	lsls	r3, r3, #22
 800486c:	d582      	bpl.n	8004774 <HAL_RCC_OscConfig+0x1cc>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800486e:	f7ff fb93 	bl	8003f98 <HAL_GetTick>
 8004872:	1b40      	subs	r0, r0, r5
 8004874:	2802      	cmp	r0, #2
 8004876:	d9f6      	bls.n	8004866 <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 8004878:	2003      	movs	r0, #3
 800487a:	e13b      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_LSI_DISABLE();
 800487c:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800487e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004880:	2101      	movs	r1, #1
 8004882:	438b      	bics	r3, r1
 8004884:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004886:	f7ff fb87 	bl	8003f98 <HAL_GetTick>
 800488a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCC_OscConfig+0x2fc>)
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	079b      	lsls	r3, r3, #30
 8004892:	d519      	bpl.n	80048c8 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004894:	f7ff fb80 	bl	8003f98 <HAL_GetTick>
 8004898:	1b40      	subs	r0, r0, r5
 800489a:	2802      	cmp	r0, #2
 800489c:	d9f6      	bls.n	800488c <HAL_RCC_OscConfig+0x2e4>
          return HAL_TIMEOUT;
 800489e:	2003      	movs	r0, #3
 80048a0:	e128      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	40021000 	.word	0x40021000
 80048a8:	fffeffff 	.word	0xfffeffff
 80048ac:	fffbffff 	.word	0xfffbffff
 80048b0:	00001388 	.word	0x00001388
 80048b4:	ffffe0ff 	.word	0xffffe0ff
 80048b8:	ffff1fff 	.word	0xffff1fff
 80048bc:	0800a450 	.word	0x0800a450
 80048c0:	20000044 	.word	0x20000044
 80048c4:	fffffeff 	.word	0xfffffeff
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	075b      	lsls	r3, r3, #29
 80048cc:	d578      	bpl.n	80049c0 <HAL_RCC_OscConfig+0x418>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ce:	4b8b      	ldr	r3, [pc, #556]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	d42c      	bmi.n	8004930 <HAL_RCC_OscConfig+0x388>
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	4a89      	ldr	r2, [pc, #548]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 80048d8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	055b      	lsls	r3, r3, #21
 80048de:	430b      	orrs	r3, r1
 80048e0:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80048e2:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	4b86      	ldr	r3, [pc, #536]	; (8004b00 <HAL_RCC_OscConfig+0x558>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	05db      	lsls	r3, r3, #23
 80048ea:	d523      	bpl.n	8004934 <HAL_RCC_OscConfig+0x38c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ec:	68a3      	ldr	r3, [r4, #8]
 80048ee:	2280      	movs	r2, #128	; 0x80
 80048f0:	0052      	lsls	r2, r2, #1
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d032      	beq.n	800495c <HAL_RCC_OscConfig+0x3b4>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d137      	bne.n	800496a <HAL_RCC_OscConfig+0x3c2>
 80048fa:	4b80      	ldr	r3, [pc, #512]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 80048fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048fe:	4981      	ldr	r1, [pc, #516]	; (8004b04 <HAL_RCC_OscConfig+0x55c>)
 8004900:	400a      	ands	r2, r1
 8004902:	651a      	str	r2, [r3, #80]	; 0x50
 8004904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004906:	4980      	ldr	r1, [pc, #512]	; (8004b08 <HAL_RCC_OscConfig+0x560>)
 8004908:	400a      	ands	r2, r1
 800490a:	651a      	str	r2, [r3, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800490c:	68a3      	ldr	r3, [r4, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d045      	beq.n	800499e <HAL_RCC_OscConfig+0x3f6>
      tickstart = HAL_GetTick();
 8004912:	f7ff fb41 	bl	8003f98 <HAL_GetTick>
 8004916:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004918:	4b78      	ldr	r3, [pc, #480]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 800491a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d44d      	bmi.n	80049bc <HAL_RCC_OscConfig+0x414>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004920:	f7ff fb3a 	bl	8003f98 <HAL_GetTick>
 8004924:	1b80      	subs	r0, r0, r6
 8004926:	4b79      	ldr	r3, [pc, #484]	; (8004b0c <HAL_RCC_OscConfig+0x564>)
 8004928:	4298      	cmp	r0, r3
 800492a:	d9f5      	bls.n	8004918 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 800492c:	2003      	movs	r0, #3
 800492e:	e0e1      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
    FlagStatus       pwrclkchanged = RESET;
 8004930:	2500      	movs	r5, #0
 8004932:	e7d7      	b.n	80048e4 <HAL_RCC_OscConfig+0x33c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004934:	4a72      	ldr	r2, [pc, #456]	; (8004b00 <HAL_RCC_OscConfig+0x558>)
 8004936:	6811      	ldr	r1, [r2, #0]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	430b      	orrs	r3, r1
 800493e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004940:	f7ff fb2a 	bl	8003f98 <HAL_GetTick>
 8004944:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004946:	4b6e      	ldr	r3, [pc, #440]	; (8004b00 <HAL_RCC_OscConfig+0x558>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	05db      	lsls	r3, r3, #23
 800494c:	d4ce      	bmi.n	80048ec <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494e:	f7ff fb23 	bl	8003f98 <HAL_GetTick>
 8004952:	1b80      	subs	r0, r0, r6
 8004954:	2864      	cmp	r0, #100	; 0x64
 8004956:	d9f6      	bls.n	8004946 <HAL_RCC_OscConfig+0x39e>
          return HAL_TIMEOUT;
 8004958:	2003      	movs	r0, #3
 800495a:	e0cb      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495c:	4a67      	ldr	r2, [pc, #412]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 800495e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	430b      	orrs	r3, r1
 8004966:	6513      	str	r3, [r2, #80]	; 0x50
 8004968:	e7d0      	b.n	800490c <HAL_RCC_OscConfig+0x364>
 800496a:	22a0      	movs	r2, #160	; 0xa0
 800496c:	00d2      	lsls	r2, r2, #3
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_RCC_OscConfig+0x3de>
 8004972:	4b62      	ldr	r3, [pc, #392]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004974:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004976:	4963      	ldr	r1, [pc, #396]	; (8004b04 <HAL_RCC_OscConfig+0x55c>)
 8004978:	400a      	ands	r2, r1
 800497a:	651a      	str	r2, [r3, #80]	; 0x50
 800497c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800497e:	4962      	ldr	r1, [pc, #392]	; (8004b08 <HAL_RCC_OscConfig+0x560>)
 8004980:	400a      	ands	r2, r1
 8004982:	651a      	str	r2, [r3, #80]	; 0x50
 8004984:	e7c2      	b.n	800490c <HAL_RCC_OscConfig+0x364>
 8004986:	4b5d      	ldr	r3, [pc, #372]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004988:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800498a:	3a01      	subs	r2, #1
 800498c:	3aff      	subs	r2, #255	; 0xff
 800498e:	430a      	orrs	r2, r1
 8004990:	651a      	str	r2, [r3, #80]	; 0x50
 8004992:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	0052      	lsls	r2, r2, #1
 8004998:	430a      	orrs	r2, r1
 800499a:	651a      	str	r2, [r3, #80]	; 0x50
 800499c:	e7b6      	b.n	800490c <HAL_RCC_OscConfig+0x364>
      tickstart = HAL_GetTick();
 800499e:	f7ff fafb 	bl	8003f98 <HAL_GetTick>
 80049a2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a4:	4b55      	ldr	r3, [pc, #340]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	059b      	lsls	r3, r3, #22
 80049aa:	d507      	bpl.n	80049bc <HAL_RCC_OscConfig+0x414>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7ff faf4 	bl	8003f98 <HAL_GetTick>
 80049b0:	1b80      	subs	r0, r0, r6
 80049b2:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <HAL_RCC_OscConfig+0x564>)
 80049b4:	4298      	cmp	r0, r3
 80049b6:	d9f5      	bls.n	80049a4 <HAL_RCC_OscConfig+0x3fc>
          return HAL_TIMEOUT;
 80049b8:	2003      	movs	r0, #3
 80049ba:	e09b      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
    if(pwrclkchanged == SET)
 80049bc:	2d01      	cmp	r5, #1
 80049be:	d021      	beq.n	8004a04 <HAL_RCC_OscConfig+0x45c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	069b      	lsls	r3, r3, #26
 80049c4:	d53c      	bpl.n	8004a40 <HAL_RCC_OscConfig+0x498>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049c6:	69a3      	ldr	r3, [r4, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d021      	beq.n	8004a10 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_HSI48_ENABLE();
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 80049ce:	6899      	ldr	r1, [r3, #8]
 80049d0:	2001      	movs	r0, #1
 80049d2:	4301      	orrs	r1, r0
 80049d4:	6099      	str	r1, [r3, #8]
 80049d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d8:	4302      	orrs	r2, r0
 80049da:	635a      	str	r2, [r3, #52]	; 0x34
 80049dc:	4a4c      	ldr	r2, [pc, #304]	; (8004b10 <HAL_RCC_OscConfig+0x568>)
 80049de:	6a11      	ldr	r1, [r2, #32]
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	019b      	lsls	r3, r3, #6
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80049e8:	f7ff fad6 	bl	8003f98 <HAL_GetTick>
 80049ec:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80049ee:	4b43      	ldr	r3, [pc, #268]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	079b      	lsls	r3, r3, #30
 80049f4:	d424      	bmi.n	8004a40 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f6:	f7ff facf 	bl	8003f98 <HAL_GetTick>
 80049fa:	1b40      	subs	r0, r0, r5
 80049fc:	2802      	cmp	r0, #2
 80049fe:	d9f6      	bls.n	80049ee <HAL_RCC_OscConfig+0x446>
            return HAL_TIMEOUT;
 8004a00:	2003      	movs	r0, #3
 8004a02:	e077      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a04:	4a3d      	ldr	r2, [pc, #244]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004a06:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a08:	4942      	ldr	r1, [pc, #264]	; (8004b14 <HAL_RCC_OscConfig+0x56c>)
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	6393      	str	r3, [r2, #56]	; 0x38
 8004a0e:	e7d7      	b.n	80049c0 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_HSI48_DISABLE();
 8004a10:	4a3a      	ldr	r2, [pc, #232]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004a12:	6893      	ldr	r3, [r2, #8]
 8004a14:	2101      	movs	r1, #1
 8004a16:	438b      	bics	r3, r1
 8004a18:	6093      	str	r3, [r2, #8]
 8004a1a:	4a3d      	ldr	r2, [pc, #244]	; (8004b10 <HAL_RCC_OscConfig+0x568>)
 8004a1c:	6a13      	ldr	r3, [r2, #32]
 8004a1e:	493e      	ldr	r1, [pc, #248]	; (8004b18 <HAL_RCC_OscConfig+0x570>)
 8004a20:	400b      	ands	r3, r1
 8004a22:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004a24:	f7ff fab8 	bl	8003f98 <HAL_GetTick>
 8004a28:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004a2a:	4b34      	ldr	r3, [pc, #208]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	079b      	lsls	r3, r3, #30
 8004a30:	d506      	bpl.n	8004a40 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a32:	f7ff fab1 	bl	8003f98 <HAL_GetTick>
 8004a36:	1b40      	subs	r0, r0, r5
 8004a38:	2802      	cmp	r0, #2
 8004a3a:	d9f6      	bls.n	8004a2a <HAL_RCC_OscConfig+0x482>
            return HAL_TIMEOUT;
 8004a3c:	2003      	movs	r0, #3
 8004a3e:	e059      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d055      	beq.n	8004af2 <HAL_RCC_OscConfig+0x54a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a46:	4a2d      	ldr	r2, [pc, #180]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004a48:	68d1      	ldr	r1, [r2, #12]
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	400a      	ands	r2, r1
 8004a4e:	2a0c      	cmp	r2, #12
 8004a50:	d052      	beq.n	8004af8 <HAL_RCC_OscConfig+0x550>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d012      	beq.n	8004a7c <HAL_RCC_OscConfig+0x4d4>
        __HAL_RCC_PLL_DISABLE();
 8004a56:	4a29      	ldr	r2, [pc, #164]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004a58:	6813      	ldr	r3, [r2, #0]
 8004a5a:	4930      	ldr	r1, [pc, #192]	; (8004b1c <HAL_RCC_OscConfig+0x574>)
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a60:	f7ff fa9a 	bl	8003f98 <HAL_GetTick>
 8004a64:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a66:	4b25      	ldr	r3, [pc, #148]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	019b      	lsls	r3, r3, #6
 8004a6c:	d539      	bpl.n	8004ae2 <HAL_RCC_OscConfig+0x53a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6e:	f7ff fa93 	bl	8003f98 <HAL_GetTick>
 8004a72:	1b00      	subs	r0, r0, r4
 8004a74:	2802      	cmp	r0, #2
 8004a76:	d9f6      	bls.n	8004a66 <HAL_RCC_OscConfig+0x4be>
            return HAL_TIMEOUT;
 8004a78:	2003      	movs	r0, #3
 8004a7a:	e03b      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_DISABLE();
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004a7e:	6813      	ldr	r3, [r2, #0]
 8004a80:	4926      	ldr	r1, [pc, #152]	; (8004b1c <HAL_RCC_OscConfig+0x574>)
 8004a82:	400b      	ands	r3, r1
 8004a84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a86:	f7ff fa87 	bl	8003f98 <HAL_GetTick>
 8004a8a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	d506      	bpl.n	8004aa2 <HAL_RCC_OscConfig+0x4fa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a94:	f7ff fa80 	bl	8003f98 <HAL_GetTick>
 8004a98:	1b40      	subs	r0, r0, r5
 8004a9a:	2802      	cmp	r0, #2
 8004a9c:	d9f6      	bls.n	8004a8c <HAL_RCC_OscConfig+0x4e4>
            return HAL_TIMEOUT;
 8004a9e:	2003      	movs	r0, #3
 8004aa0:	e028      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aa2:	4916      	ldr	r1, [pc, #88]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004aa4:	68cb      	ldr	r3, [r1, #12]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_RCC_OscConfig+0x578>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004aac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004aae:	4302      	orrs	r2, r0
 8004ab0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004ab2:	4302      	orrs	r2, r0
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8004ab8:	680a      	ldr	r2, [r1, #0]
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	045b      	lsls	r3, r3, #17
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8004ac2:	f7ff fa69 	bl	8003f98 <HAL_GetTick>
 8004ac6:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <HAL_RCC_OscConfig+0x554>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	019b      	lsls	r3, r3, #6
 8004ace:	d406      	bmi.n	8004ade <HAL_RCC_OscConfig+0x536>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7ff fa62 	bl	8003f98 <HAL_GetTick>
 8004ad4:	1b00      	subs	r0, r0, r4
 8004ad6:	2802      	cmp	r0, #2
 8004ad8:	d9f6      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x520>
            return HAL_TIMEOUT;
 8004ada:	2003      	movs	r0, #3
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8004ade:	2000      	movs	r0, #0
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e006      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	e004      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8004aea:	2001      	movs	r0, #1
 8004aec:	e002      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
            return HAL_ERROR;
 8004aee:	2001      	movs	r0, #1
 8004af0:	e000      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8004af2:	2000      	movs	r0, #0
}
 8004af4:	b002      	add	sp, #8
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004af8:	2001      	movs	r0, #1
 8004afa:	e7fb      	b.n	8004af4 <HAL_RCC_OscConfig+0x54c>
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40007000 	.word	0x40007000
 8004b04:	fffffeff 	.word	0xfffffeff
 8004b08:	fffffbff 	.word	0xfffffbff
 8004b0c:	00001388 	.word	0x00001388
 8004b10:	40010000 	.word	0x40010000
 8004b14:	efffffff 	.word	0xefffffff
 8004b18:	ffffdfff 	.word	0xffffdfff
 8004b1c:	feffffff 	.word	0xfeffffff
 8004b20:	ff02ffff 	.word	0xff02ffff

08004b24 <HAL_RCC_MCOConfig>:
{
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	0006      	movs	r6, r0
 8004b2a:	000c      	movs	r4, r1
 8004b2c:	0015      	movs	r5, r2
  GPIO_InitTypeDef gpio = {0};
 8004b2e:	2214      	movs	r2, #20
 8004b30:	2100      	movs	r1, #0
 8004b32:	a803      	add	r0, sp, #12
 8004b34:	f003 f9c5 	bl	8007ec2 <memset>
  gpio.Mode      = GPIO_MODE_AF_PP;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	9304      	str	r3, [sp, #16]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004b3c:	9306      	str	r3, [sp, #24]
  if(RCC_MCOx == RCC_MCO1)
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	d01b      	beq.n	8004b7a <HAL_RCC_MCOConfig+0x56>
  else if (RCC_MCOx == RCC_MCO3)
 8004b42:	2e02      	cmp	r6, #2
 8004b44:	d02a      	beq.n	8004b9c <HAL_RCC_MCOConfig+0x78>
    gpio.Pin       = MCO2_PIN;
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	9303      	str	r3, [sp, #12]
    MCO2_CLK_ENABLE();
 8004b4c:	4a1c      	ldr	r2, [pc, #112]	; (8004bc0 <HAL_RCC_MCOConfig+0x9c>)
 8004b4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b50:	2301      	movs	r3, #1
 8004b52:	4319      	orrs	r1, r3
 8004b54:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004b56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b58:	4013      	ands	r3, r2
 8004b5a:	9302      	str	r3, [sp, #8]
 8004b5c:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8004b5e:	a903      	add	r1, sp, #12
 8004b60:	20a0      	movs	r0, #160	; 0xa0
 8004b62:	05c0      	lsls	r0, r0, #23
 8004b64:	f7ff fba8 	bl	80042b8 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8004b68:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <HAL_RCC_MCOConfig+0x9c>)
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	4915      	ldr	r1, [pc, #84]	; (8004bc4 <HAL_RCC_MCOConfig+0xa0>)
 8004b6e:	400a      	ands	r2, r1
 8004b70:	432c      	orrs	r4, r5
 8004b72:	4322      	orrs	r2, r4
 8004b74:	60da      	str	r2, [r3, #12]
}
 8004b76:	b008      	add	sp, #32
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
    gpio.Pin       = MCO1_PIN;
 8004b7a:	33fe      	adds	r3, #254	; 0xfe
 8004b7c:	9303      	str	r3, [sp, #12]
    MCO1_CLK_ENABLE();
 8004b7e:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <HAL_RCC_MCOConfig+0x9c>)
 8004b80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b82:	3bff      	subs	r3, #255	; 0xff
 8004b84:	4319      	orrs	r1, r3
 8004b86:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004b88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8004b90:	a903      	add	r1, sp, #12
 8004b92:	20a0      	movs	r0, #160	; 0xa0
 8004b94:	05c0      	lsls	r0, r0, #23
 8004b96:	f7ff fb8f 	bl	80042b8 <HAL_GPIO_Init>
 8004b9a:	e7e5      	b.n	8004b68 <HAL_RCC_MCOConfig+0x44>
    gpio.Pin       = MCO3_PIN;
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	019b      	lsls	r3, r3, #6
 8004ba0:	9303      	str	r3, [sp, #12]
    gpio.Alternate = GPIO_AF2_MCO;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	9307      	str	r3, [sp, #28]
    MCO3_CLK_ENABLE();    
 8004ba6:	4a06      	ldr	r2, [pc, #24]	; (8004bc0 <HAL_RCC_MCOConfig+0x9c>)
 8004ba8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004baa:	4319      	orrs	r1, r3
 8004bac:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004bae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 8004bb6:	a903      	add	r1, sp, #12
 8004bb8:	4803      	ldr	r0, [pc, #12]	; (8004bc8 <HAL_RCC_MCOConfig+0xa4>)
 8004bba:	f7ff fb7d 	bl	80042b8 <HAL_GPIO_Init>
 8004bbe:	e7d3      	b.n	8004b68 <HAL_RCC_MCOConfig+0x44>
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	80ffffff 	.word	0x80ffffff
 8004bc8:	50000400 	.word	0x50000400

08004bcc <HAL_RCC_GetSysClockFreq>:
{
 8004bcc:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8004bce:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x80>)
 8004bd0:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	400b      	ands	r3, r1
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d033      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x76>
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d011      	beq.n	8004c02 <HAL_RCC_GetSysClockFreq+0x36>
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d009      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x2a>
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8004be2:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x80>)
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	0b52      	lsrs	r2, r2, #13
 8004be8:	2307      	movs	r3, #7
 8004bea:	4013      	ands	r3, r2
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8004bec:	3301      	adds	r3, #1
 8004bee:	2080      	movs	r0, #128	; 0x80
 8004bf0:	0200      	lsls	r0, r0, #8
 8004bf2:	4098      	lsls	r0, r3
}
 8004bf4:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8004bf6:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x80>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	06db      	lsls	r3, r3, #27
 8004bfc:	d523      	bpl.n	8004c46 <HAL_RCC_GetSysClockFreq+0x7a>
        sysclockfreq =  (HSI_VALUE >> 2);
 8004bfe:	4814      	ldr	r0, [pc, #80]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x84>)
 8004c00:	e7f8      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c02:	0c8a      	lsrs	r2, r1, #18
 8004c04:	230f      	movs	r3, #15
 8004c06:	4013      	ands	r3, r2
 8004c08:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x88>)
 8004c0a:	5cd0      	ldrb	r0, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8004c0c:	0d89      	lsrs	r1, r1, #22
 8004c0e:	2303      	movs	r3, #3
 8004c10:	4019      	ands	r1, r3
 8004c12:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c14:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x80>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	03db      	lsls	r3, r3, #15
 8004c1a:	d408      	bmi.n	8004c2e <HAL_RCC_GetSysClockFreq+0x62>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x80>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	06db      	lsls	r3, r3, #27
 8004c22:	d509      	bpl.n	8004c38 <HAL_RCC_GetSysClockFreq+0x6c>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x84>)
 8004c26:	4358      	muls	r0, r3
 8004c28:	f7fb fa80 	bl	800012c <__udivsi3>
 8004c2c:	e7e2      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x28>
        pllvco = (HSE_VALUE * pllm) / plld;
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004c30:	4358      	muls	r0, r3
 8004c32:	f7fb fa7b 	bl	800012c <__udivsi3>
 8004c36:	e7dd      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (HSI_VALUE * pllm) / plld;
 8004c38:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x90>)
 8004c3a:	4358      	muls	r0, r3
 8004c3c:	f7fb fa76 	bl	800012c <__udivsi3>
 8004c40:	e7d8      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8004c42:	4805      	ldr	r0, [pc, #20]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004c44:	e7d6      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8004c46:	4805      	ldr	r0, [pc, #20]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8004c48:	e7d4      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x28>
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	003d0900 	.word	0x003d0900
 8004c54:	0800a444 	.word	0x0800a444
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	00f42400 	.word	0x00f42400

08004c60 <HAL_RCC_ClockConfig>:
{
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	0004      	movs	r4, r0
 8004c64:	000d      	movs	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004c66:	4b5f      	ldr	r3, [pc, #380]	; (8004de4 <HAL_RCC_ClockConfig+0x184>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	428b      	cmp	r3, r1
 8004c70:	d20b      	bcs.n	8004c8a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	495c      	ldr	r1, [pc, #368]	; (8004de4 <HAL_RCC_ClockConfig+0x184>)
 8004c74:	680b      	ldr	r3, [r1, #0]
 8004c76:	2201      	movs	r2, #1
 8004c78:	4393      	bics	r3, r2
 8004c7a:	432b      	orrs	r3, r5
 8004c7c:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c7e:	680b      	ldr	r3, [r1, #0]
 8004c80:	401a      	ands	r2, r3
 8004c82:	4295      	cmp	r5, r2
 8004c84:	d001      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8004c86:	2001      	movs	r0, #1
 8004c88:	e0a8      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	079b      	lsls	r3, r3, #30
 8004c8e:	d506      	bpl.n	8004c9e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c90:	4a55      	ldr	r2, [pc, #340]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004c92:	68d3      	ldr	r3, [r2, #12]
 8004c94:	21f0      	movs	r1, #240	; 0xf0
 8004c96:	438b      	bics	r3, r1
 8004c98:	68a1      	ldr	r1, [r4, #8]
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	07db      	lsls	r3, r3, #31
 8004ca2:	d564      	bpl.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca4:	6863      	ldr	r3, [r4, #4]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d025      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d029      	beq.n	8004d02 <HAL_RCC_ClockConfig+0xa2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d02d      	beq.n	8004d0e <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8004cb2:	4a4d      	ldr	r2, [pc, #308]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	0592      	lsls	r2, r2, #22
 8004cb8:	d400      	bmi.n	8004cbc <HAL_RCC_ClockConfig+0x5c>
 8004cba:	e090      	b.n	8004dde <HAL_RCC_ClockConfig+0x17e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cbc:	494a      	ldr	r1, [pc, #296]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004cbe:	68ca      	ldr	r2, [r1, #12]
 8004cc0:	2003      	movs	r0, #3
 8004cc2:	4382      	bics	r2, r0
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8004cc8:	f7ff f966 	bl	8003f98 <HAL_GetTick>
 8004ccc:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d022      	beq.n	8004d1a <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d02e      	beq.n	8004d36 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d03a      	beq.n	8004d52 <HAL_RCC_ClockConfig+0xf2>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cdc:	4b42      	ldr	r3, [pc, #264]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	220c      	movs	r2, #12
 8004ce2:	421a      	tst	r2, r3
 8004ce4:	d043      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce6:	f7ff f957 	bl	8003f98 <HAL_GetTick>
 8004cea:	1b80      	subs	r0, r0, r6
 8004cec:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCC_ClockConfig+0x18c>)
 8004cee:	4298      	cmp	r0, r3
 8004cf0:	d9f4      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	e072      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	4a3c      	ldr	r2, [pc, #240]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	0392      	lsls	r2, r2, #14
 8004cfc:	d4de      	bmi.n	8004cbc <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8004cfe:	2001      	movs	r0, #1
 8004d00:	e06c      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d02:	4a39      	ldr	r2, [pc, #228]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	0192      	lsls	r2, r2, #6
 8004d08:	d4d8      	bmi.n	8004cbc <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	e066      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0e:	4a36      	ldr	r2, [pc, #216]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	0752      	lsls	r2, r2, #29
 8004d14:	d4d2      	bmi.n	8004cbc <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8004d16:	2001      	movs	r0, #1
 8004d18:	e060      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d1a:	4b33      	ldr	r3, [pc, #204]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	230c      	movs	r3, #12
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d023      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d26:	f7ff f937 	bl	8003f98 <HAL_GetTick>
 8004d2a:	1b80      	subs	r0, r0, r6
 8004d2c:	4b2f      	ldr	r3, [pc, #188]	; (8004dec <HAL_RCC_ClockConfig+0x18c>)
 8004d2e:	4298      	cmp	r0, r3
 8004d30:	d9f3      	bls.n	8004d1a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8004d32:	2003      	movs	r0, #3
 8004d34:	e052      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d36:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d015      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d42:	f7ff f929 	bl	8003f98 <HAL_GetTick>
 8004d46:	1b80      	subs	r0, r0, r6
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_RCC_ClockConfig+0x18c>)
 8004d4a:	4298      	cmp	r0, r3
 8004d4c:	d9f3      	bls.n	8004d36 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8004d4e:	2003      	movs	r0, #3
 8004d50:	e044      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d52:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	230c      	movs	r3, #12
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d007      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d5e:	f7ff f91b 	bl	8003f98 <HAL_GetTick>
 8004d62:	1b80      	subs	r0, r0, r6
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCC_ClockConfig+0x18c>)
 8004d66:	4298      	cmp	r0, r3
 8004d68:	d9f3      	bls.n	8004d52 <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 8004d6a:	2003      	movs	r0, #3
 8004d6c:	e036      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004d6e:	4b1d      	ldr	r3, [pc, #116]	; (8004de4 <HAL_RCC_ClockConfig+0x184>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	2301      	movs	r3, #1
 8004d74:	4013      	ands	r3, r2
 8004d76:	429d      	cmp	r5, r3
 8004d78:	d20b      	bcs.n	8004d92 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	491a      	ldr	r1, [pc, #104]	; (8004de4 <HAL_RCC_ClockConfig+0x184>)
 8004d7c:	680b      	ldr	r3, [r1, #0]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4393      	bics	r3, r2
 8004d82:	432b      	orrs	r3, r5
 8004d84:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d86:	680b      	ldr	r3, [r1, #0]
 8004d88:	401a      	ands	r2, r3
 8004d8a:	4295      	cmp	r5, r2
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x132>
      return HAL_ERROR;
 8004d8e:	2001      	movs	r0, #1
 8004d90:	e024      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	075b      	lsls	r3, r3, #29
 8004d96:	d506      	bpl.n	8004da6 <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d98:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004d9a:	68d3      	ldr	r3, [r2, #12]
 8004d9c:	4914      	ldr	r1, [pc, #80]	; (8004df0 <HAL_RCC_ClockConfig+0x190>)
 8004d9e:	400b      	ands	r3, r1
 8004da0:	68e1      	ldr	r1, [r4, #12]
 8004da2:	430b      	orrs	r3, r1
 8004da4:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	071b      	lsls	r3, r3, #28
 8004daa:	d507      	bpl.n	8004dbc <HAL_RCC_ClockConfig+0x15c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dac:	490e      	ldr	r1, [pc, #56]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004dae:	68cb      	ldr	r3, [r1, #12]
 8004db0:	4a10      	ldr	r2, [pc, #64]	; (8004df4 <HAL_RCC_ClockConfig+0x194>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	00d2      	lsls	r2, r2, #3
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004dbc:	f7ff ff06 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_RCC_ClockConfig+0x188>)
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	0912      	lsrs	r2, r2, #4
 8004dc6:	230f      	movs	r3, #15
 8004dc8:	4013      	ands	r3, r2
 8004dca:	4a0b      	ldr	r2, [pc, #44]	; (8004df8 <HAL_RCC_ClockConfig+0x198>)
 8004dcc:	5cd3      	ldrb	r3, [r2, r3]
 8004dce:	40d8      	lsrs	r0, r3
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_ClockConfig+0x19c>)
 8004dd2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004dd4:	2003      	movs	r0, #3
 8004dd6:	f002 fd0d 	bl	80077f4 <HAL_InitTick>
  return HAL_OK;
 8004dda:	2000      	movs	r0, #0
}
 8004ddc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004dde:	2001      	movs	r0, #1
 8004de0:	e7fc      	b.n	8004ddc <HAL_RCC_ClockConfig+0x17c>
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	40022000 	.word	0x40022000
 8004de8:	40021000 	.word	0x40021000
 8004dec:	00001388 	.word	0x00001388
 8004df0:	fffff8ff 	.word	0xfffff8ff
 8004df4:	ffffc7ff 	.word	0xffffc7ff
 8004df8:	0800a450 	.word	0x0800a450
 8004dfc:	20000044 	.word	0x20000044

08004e00 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8004e00:	4b01      	ldr	r3, [pc, #4]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x8>)
 8004e02:	6818      	ldr	r0, [r3, #0]
}
 8004e04:	4770      	bx	lr
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	20000044 	.word	0x20000044

08004e0c <HAL_RCC_GetPCLK1Freq>:
{
 8004e0c:	b510      	push	{r4, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004e0e:	f7ff fff7 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8004e12:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	0a12      	lsrs	r2, r2, #8
 8004e18:	2307      	movs	r3, #7
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	4a02      	ldr	r2, [pc, #8]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004e1e:	5cd3      	ldrb	r3, [r2, r3]
 8004e20:	40d8      	lsrs	r0, r3
}    
 8004e22:	bd10      	pop	{r4, pc}
 8004e24:	40021000 	.word	0x40021000
 8004e28:	0800a460 	.word	0x0800a460

08004e2c <HAL_RCC_GetPCLK2Freq>:
{
 8004e2c:	b510      	push	{r4, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004e2e:	f7ff ffe7 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8004e32:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	0ad2      	lsrs	r2, r2, #11
 8004e38:	2307      	movs	r3, #7
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	4a02      	ldr	r2, [pc, #8]	; (8004e48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004e3e:	5cd3      	ldrb	r3, [r2, r3]
 8004e40:	40d8      	lsrs	r0, r3
} 
 8004e42:	bd10      	pop	{r4, pc}
 8004e44:	40021000 	.word	0x40021000
 8004e48:	0800a460 	.word	0x0800a460

08004e4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8004e50:	6803      	ldr	r3, [r0, #0]
 8004e52:	069b      	lsls	r3, r3, #26
 8004e54:	d550      	bpl.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e56:	4b6c      	ldr	r3, [pc, #432]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	d500      	bpl.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8004e5e:	e093      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e60:	4a69      	ldr	r2, [pc, #420]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e62:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	055b      	lsls	r3, r3, #21
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8004e6c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6e:	4b67      	ldr	r3, [pc, #412]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	05db      	lsls	r3, r3, #23
 8004e74:	d400      	bmi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8004e76:	e089      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004e78:	4b63      	ldr	r3, [pc, #396]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e7a:	6819      	ldr	r1, [r3, #0]
 8004e7c:	23c0      	movs	r3, #192	; 0xc0
 8004e7e:	039b      	lsls	r3, r3, #14
 8004e80:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004e82:	6862      	ldr	r2, [r4, #4]
 8004e84:	4013      	ands	r3, r2
 8004e86:	4299      	cmp	r1, r3
 8004e88:	d006      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x4c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e8a:	23c0      	movs	r3, #192	; 0xc0
 8004e8c:	029b      	lsls	r3, r3, #10
 8004e8e:	0011      	movs	r1, r2
 8004e90:	4019      	ands	r1, r3
 8004e92:	4299      	cmp	r1, r3
 8004e94:	d100      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8004e96:	e08e      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
        return HAL_ERROR; 
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004e98:	4b5b      	ldr	r3, [pc, #364]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9c:	21c0      	movs	r1, #192	; 0xc0
 8004e9e:	0289      	lsls	r1, r1, #10
 8004ea0:	400b      	ands	r3, r1
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004ea2:	d016      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	069b      	lsls	r3, r3, #26
 8004eae:	d510      	bpl.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004eb0:	4b55      	ldr	r3, [pc, #340]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eb2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004eb4:	4a56      	ldr	r2, [pc, #344]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004eb6:	4002      	ands	r2, r0
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	0309      	lsls	r1, r1, #12
 8004ebe:	4331      	orrs	r1, r6
 8004ec0:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ec4:	4e53      	ldr	r6, [pc, #332]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004ec6:	4031      	ands	r1, r6
 8004ec8:	6519      	str	r1, [r3, #80]	; 0x50
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004eca:	651a      	str	r2, [r3, #80]	; 0x50
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004ecc:	05c3      	lsls	r3, r0, #23
 8004ece:	d500      	bpl.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004ed0:	e078      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x178>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ed2:	6862      	ldr	r2, [r4, #4]
 8004ed4:	23c0      	movs	r3, #192	; 0xc0
 8004ed6:	029b      	lsls	r3, r3, #10
 8004ed8:	0011      	movs	r1, r2
 8004eda:	4019      	ands	r1, r3
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d100      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8004ee0:	e080      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004ee2:	4949      	ldr	r1, [pc, #292]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ee4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8004ee6:	22c0      	movs	r2, #192	; 0xc0
 8004ee8:	0292      	lsls	r2, r2, #10
 8004eea:	6860      	ldr	r0, [r4, #4]
 8004eec:	4002      	ands	r2, r0
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ef2:	2d01      	cmp	r5, #1
 8004ef4:	d100      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004ef6:	e07f      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	07db      	lsls	r3, r3, #31
 8004efc:	d506      	bpl.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004efe:	4a42      	ldr	r2, [pc, #264]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f00:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f02:	2103      	movs	r1, #3
 8004f04:	438b      	bics	r3, r1
 8004f06:	68a1      	ldr	r1, [r4, #8]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	079b      	lsls	r3, r3, #30
 8004f10:	d506      	bpl.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f12:	4a3d      	ldr	r2, [pc, #244]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f14:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f16:	210c      	movs	r1, #12
 8004f18:	438b      	bics	r3, r1
 8004f1a:	68e1      	ldr	r1, [r4, #12]
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	075b      	lsls	r3, r3, #29
 8004f24:	d506      	bpl.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f26:	4a38      	ldr	r2, [pc, #224]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f28:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f2a:	493b      	ldr	r1, [pc, #236]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f2c:	400b      	ands	r3, r1
 8004f2e:	6921      	ldr	r1, [r4, #16]
 8004f30:	430b      	orrs	r3, r1
 8004f32:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	071b      	lsls	r3, r3, #28
 8004f38:	d506      	bpl.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f3a:	4a33      	ldr	r2, [pc, #204]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f3c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f3e:	4937      	ldr	r1, [pc, #220]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f40:	400b      	ands	r3, r1
 8004f42:	6961      	ldr	r1, [r4, #20]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	05db      	lsls	r3, r3, #23
 8004f4c:	d506      	bpl.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f4e:	4a2e      	ldr	r2, [pc, #184]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f50:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f52:	492f      	ldr	r1, [pc, #188]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f54:	400b      	ands	r3, r1
 8004f56:	69a1      	ldr	r1, [r4, #24]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	065b      	lsls	r3, r3, #25
 8004f60:	d506      	bpl.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f62:	4a29      	ldr	r2, [pc, #164]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f64:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f66:	492e      	ldr	r1, [pc, #184]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f68:	400b      	ands	r3, r1
 8004f6a:	6a21      	ldr	r1, [r4, #32]
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	d546      	bpl.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004f76:	4a24      	ldr	r2, [pc, #144]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f78:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f7a:	492a      	ldr	r1, [pc, #168]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f7c:	400b      	ands	r3, r1
 8004f7e:	69e1      	ldr	r1, [r4, #28]
 8004f80:	430b      	orrs	r3, r1
 8004f82:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8004f84:	2000      	movs	r0, #0
}
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004f88:	2500      	movs	r5, #0
 8004f8a:	e770      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f8e:	6811      	ldr	r1, [r2, #0]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004f98:	f7fe fffe 	bl	8003f98 <HAL_GetTick>
 8004f9c:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	05db      	lsls	r3, r3, #23
 8004fa4:	d500      	bpl.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004fa6:	e767      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa8:	f7fe fff6 	bl	8003f98 <HAL_GetTick>
 8004fac:	1b80      	subs	r0, r0, r6
 8004fae:	2864      	cmp	r0, #100	; 0x64
 8004fb0:	d9f5      	bls.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x152>
          return HAL_TIMEOUT;
 8004fb2:	2003      	movs	r0, #3
 8004fb4:	e7e7      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fb6:	4b14      	ldr	r3, [pc, #80]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	039b      	lsls	r3, r3, #14
 8004fbc:	d400      	bmi.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004fbe:	e76b      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        return HAL_ERROR; 
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	e7e0      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8004fc4:	f7fe ffe8 	bl	8003f98 <HAL_GetTick>
 8004fc8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	059b      	lsls	r3, r3, #22
 8004fd0:	d500      	bpl.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004fd2:	e77e      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd4:	f7fe ffe0 	bl	8003f98 <HAL_GetTick>
 8004fd8:	1b80      	subs	r0, r0, r6
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fdc:	4298      	cmp	r0, r3
 8004fde:	d9f4      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x17e>
            return HAL_TIMEOUT;
 8004fe0:	2003      	movs	r0, #3
 8004fe2:	e7d0      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fe4:	4908      	ldr	r1, [pc, #32]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fe6:	680b      	ldr	r3, [r1, #0]
 8004fe8:	4810      	ldr	r0, [pc, #64]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fea:	4003      	ands	r3, r0
 8004fec:	20c0      	movs	r0, #192	; 0xc0
 8004fee:	0380      	lsls	r0, r0, #14
 8004ff0:	4002      	ands	r2, r0
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	600a      	str	r2, [r1, #0]
 8004ff6:	e774      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff8:	000a      	movs	r2, r1
 8004ffa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004ffc:	490c      	ldr	r1, [pc, #48]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ffe:	400b      	ands	r3, r1
 8005000:	6393      	str	r3, [r2, #56]	; 0x38
 8005002:	e779      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  return HAL_OK;
 8005004:	2000      	movs	r0, #0
 8005006:	e7be      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8005008:	40021000 	.word	0x40021000
 800500c:	40007000 	.word	0x40007000
 8005010:	fffcffff 	.word	0xfffcffff
 8005014:	fff7ffff 	.word	0xfff7ffff
 8005018:	fffff3ff 	.word	0xfffff3ff
 800501c:	ffffcfff 	.word	0xffffcfff
 8005020:	fbffffff 	.word	0xfbffffff
 8005024:	fff3ffff 	.word	0xfff3ffff
 8005028:	00001388 	.word	0x00001388
 800502c:	ffcfffff 	.word	0xffcfffff
 8005030:	efffffff 	.word	0xefffffff

08005034 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005034:	b510      	push	{r4, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8005036:	2808      	cmp	r0, #8
 8005038:	d100      	bne.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 800503a:	e108      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800503c:	d91b      	bls.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800503e:	2820      	cmp	r0, #32
 8005040:	d02d      	beq.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8005042:	d923      	bls.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005044:	2840      	cmp	r0, #64	; 0x40
 8005046:	d064      	beq.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4298      	cmp	r0, r3
 800504e:	d11b      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x54>

#if defined(RCC_CCIPR_I2C3SEL)
  case RCC_PERIPHCLK_I2C3:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005050:	4b98      	ldr	r3, [pc, #608]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005054:	22c0      	movs	r2, #192	; 0xc0
 8005056:	0292      	lsls	r2, r2, #10
 8005058:	4013      	ands	r3, r2

      /* Check if I2C3 clock selection is PCLK1 */
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800505a:	d100      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 800505c:	e116      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C3 clock selection is HSI */
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	0292      	lsls	r2, r2, #10
 8005062:	4293      	cmp	r3, r2
 8005064:	d100      	bne.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8005066:	e114      	b.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8005068:	2280      	movs	r2, #128	; 0x80
 800506a:	0252      	lsls	r2, r2, #9
 800506c:	4293      	cmp	r3, r2
 800506e:	d100      	bne.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005070:	e116      	b.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
        frequency = HAL_RCC_GetSysClockFreq();
      }
      /* Clock not enabled for I2C3*/
      else
      {
        frequency = 0U;
 8005072:	2000      	movs	r0, #0
  default: 
    {
      break;
    }
  }
  return(frequency);
 8005074:	e009      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
  switch (PeriphClk)
 8005076:	2802      	cmp	r0, #2
 8005078:	d100      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 800507a:	e09d      	b.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800507c:	2804      	cmp	r0, #4
 800507e:	d100      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8005080:	e0bc      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8005082:	2801      	cmp	r0, #1
 8005084:	d100      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8005086:	e075      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8005088:	2000      	movs	r0, #0
}
 800508a:	bd10      	pop	{r4, pc}
  switch (PeriphClk)
 800508c:	2810      	cmp	r0, #16
 800508e:	d1fb      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8005090:	4b88      	ldr	r3, [pc, #544]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	025b      	lsls	r3, r3, #9
 8005096:	d500      	bpl.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8005098:	e0f5      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
        frequency = 0U;
 800509a:	2000      	movs	r0, #0
 800509c:	e7f5      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      temp_reg = RCC->CSR;
 800509e:	4b85      	ldr	r3, [pc, #532]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80050a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80050a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a4:	22c0      	movs	r2, #192	; 0xc0
 80050a6:	0292      	lsls	r2, r2, #10
 80050a8:	4013      	ands	r3, r2
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80050aa:	2280      	movs	r2, #128	; 0x80
 80050ac:	0252      	lsls	r2, r2, #9
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80050b2:	2280      	movs	r2, #128	; 0x80
 80050b4:	0292      	lsls	r2, r2, #10
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00a      	beq.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80050ba:	22c0      	movs	r2, #192	; 0xc0
 80050bc:	0292      	lsls	r2, r2, #10
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = 0U;
 80050c2:	2000      	movs	r0, #0
 80050c4:	e7e1      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80050c6:	058a      	lsls	r2, r1, #22
 80050c8:	d5f3      	bpl.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSE_VALUE;
 80050ca:	2080      	movs	r0, #128	; 0x80
 80050cc:	0200      	lsls	r0, r0, #8
 80050ce:	e7dc      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80050d0:	078a      	lsls	r2, r1, #30
 80050d2:	d5f2      	bpl.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x86>
        frequency = LSI_VALUE;
 80050d4:	4878      	ldr	r0, [pc, #480]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80050d6:	e7d8      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80050d8:	4b76      	ldr	r3, [pc, #472]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	039b      	lsls	r3, r3, #14
 80050de:	d400      	bmi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 80050e0:	e0e1      	b.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 80050e2:	4b74      	ldr	r3, [pc, #464]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	22c0      	movs	r2, #192	; 0xc0
 80050e8:	0392      	lsls	r2, r2, #14
 80050ea:	4013      	ands	r3, r2
        switch (clkprediv)
 80050ec:	2280      	movs	r2, #128	; 0x80
 80050ee:	0392      	lsls	r2, r2, #14
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d100      	bne.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 80050f4:	e0d9      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80050f6:	22c0      	movs	r2, #192	; 0xc0
 80050f8:	0392      	lsls	r2, r2, #14
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d005      	beq.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80050fe:	2280      	movs	r2, #128	; 0x80
 8005100:	0352      	lsls	r2, r2, #13
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
            frequency = HSE_VALUE / 2U;
 8005106:	486d      	ldr	r0, [pc, #436]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
            break;
 8005108:	e7bf      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
            frequency = HSE_VALUE / 16U;
 800510a:	486d      	ldr	r0, [pc, #436]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800510c:	e7bd      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
            frequency = HSE_VALUE / 4U;
 800510e:	486d      	ldr	r0, [pc, #436]	; (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
            break;
 8005110:	e7bb      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005112:	4b68      	ldr	r3, [pc, #416]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	2280      	movs	r2, #128	; 0x80
 8005118:	04d2      	lsls	r2, r2, #19
 800511a:	4013      	ands	r3, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800511c:	d11f      	bne.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800511e:	4a65      	ldr	r2, [pc, #404]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	0192      	lsls	r2, r2, #6
 8005124:	d51b      	bpl.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8005126:	4b63      	ldr	r3, [pc, #396]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005128:	68d8      	ldr	r0, [r3, #12]
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800512a:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 800512c:	0c80      	lsrs	r0, r0, #18
 800512e:	220f      	movs	r2, #15
 8005130:	4002      	ands	r2, r0
 8005132:	4865      	ldr	r0, [pc, #404]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005134:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8005136:	0d8a      	lsrs	r2, r1, #22
 8005138:	2103      	movs	r1, #3
 800513a:	4011      	ands	r1, r2
 800513c:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	03db      	lsls	r3, r3, #15
 8005142:	d407      	bmi.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005144:	4b5b      	ldr	r3, [pc, #364]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	06db      	lsls	r3, r3, #27
 800514a:	d401      	bmi.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
                    pllvco =  HSI_VALUE;
 800514c:	4b5f      	ldr	r3, [pc, #380]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800514e:	e002      	b.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
                    pllvco =  (HSI_VALUE >> 2U);
 8005150:	4b5a      	ldr	r3, [pc, #360]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
                pllvco = HSE_VALUE;
 8005154:	4b5e      	ldr	r3, [pc, #376]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
            pllvco = (pllvco * pllmul);
 8005156:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 8005158:	f7fa ffe8 	bl	800012c <__udivsi3>
 800515c:	e795      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 800515e:	2b00      	cmp	r3, #0
 8005160:	d100      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8005162:	e0a4      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005164:	4b53      	ldr	r3, [pc, #332]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	079b      	lsls	r3, r3, #30
 800516a:	d501      	bpl.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = HSI48_VALUE;
 800516c:	4859      	ldr	r0, [pc, #356]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800516e:	e78c      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
            frequency = 0U;
 8005170:	2000      	movs	r0, #0
 8005172:	e78a      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005174:	4b4f      	ldr	r3, [pc, #316]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005178:	2303      	movs	r3, #3
 800517a:	4013      	ands	r3, r2
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800517c:	d007      	beq.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800517e:	2b02      	cmp	r3, #2
 8005180:	d008      	beq.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005182:	2b01      	cmp	r3, #1
 8005184:	d00c      	beq.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005186:	2b03      	cmp	r3, #3
 8005188:	d00d      	beq.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
        frequency = 0U;
 800518a:	2000      	movs	r0, #0
 800518c:	e77d      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetPCLK2Freq();
 800518e:	f7ff fe4d 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8005192:	e77a      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005194:	4a47      	ldr	r2, [pc, #284]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	0752      	lsls	r2, r2, #29
 800519a:	d5f2      	bpl.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        frequency = HSI_VALUE;
 800519c:	484b      	ldr	r0, [pc, #300]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800519e:	e774      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetSysClockFreq();
 80051a0:	f7ff fd14 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 80051a4:	e771      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80051a6:	4b43      	ldr	r3, [pc, #268]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	059b      	lsls	r3, r3, #22
 80051ac:	d502      	bpl.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
        frequency = LSE_VALUE;
 80051ae:	2080      	movs	r0, #128	; 0x80
 80051b0:	0200      	lsls	r0, r0, #8
 80051b2:	e76a      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = 0U;
 80051b4:	2000      	movs	r0, #0
 80051b6:	e768      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80051b8:	4b3e      	ldr	r3, [pc, #248]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80051ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051bc:	230c      	movs	r3, #12
 80051be:	4013      	ands	r3, r2
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80051c0:	d007      	beq.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d008      	beq.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d00c      	beq.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d00d      	beq.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        frequency = 0U;
 80051ce:	2000      	movs	r0, #0
 80051d0:	e75b      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetPCLK1Freq();
 80051d2:	f7ff fe1b 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80051d6:	e758      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80051d8:	4a36      	ldr	r2, [pc, #216]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	0752      	lsls	r2, r2, #29
 80051de:	d5f2      	bpl.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
        frequency = HSI_VALUE;
 80051e0:	483a      	ldr	r0, [pc, #232]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80051e2:	e752      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetSysClockFreq();
 80051e4:	f7ff fcf2 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 80051e8:	e74f      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80051ea:	4b32      	ldr	r3, [pc, #200]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	059b      	lsls	r3, r3, #22
 80051f0:	d502      	bpl.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
        frequency = LSE_VALUE;
 80051f2:	2080      	movs	r0, #128	; 0x80
 80051f4:	0200      	lsls	r0, r0, #8
 80051f6:	e748      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = 0U;
 80051f8:	2000      	movs	r0, #0
 80051fa:	e746      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80051fc:	4b2d      	ldr	r3, [pc, #180]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80051fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005200:	22c0      	movs	r2, #192	; 0xc0
 8005202:	0112      	lsls	r2, r2, #4
 8005204:	4013      	ands	r3, r2
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005206:	d00d      	beq.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005208:	2280      	movs	r2, #128	; 0x80
 800520a:	0112      	lsls	r2, r2, #4
 800520c:	4293      	cmp	r3, r2
 800520e:	d00c      	beq.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005210:	2280      	movs	r2, #128	; 0x80
 8005212:	00d2      	lsls	r2, r2, #3
 8005214:	4293      	cmp	r3, r2
 8005216:	d00e      	beq.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005218:	22c0      	movs	r2, #192	; 0xc0
 800521a:	0112      	lsls	r2, r2, #4
 800521c:	4293      	cmp	r3, r2
 800521e:	d00d      	beq.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
        frequency = 0U;
 8005220:	2000      	movs	r0, #0
 8005222:	e732      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005224:	f7ff fdf2 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8005228:	e72f      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800522a:	4a22      	ldr	r2, [pc, #136]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	0752      	lsls	r2, r2, #29
 8005230:	d5ee      	bpl.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        frequency = HSI_VALUE;
 8005232:	4826      	ldr	r0, [pc, #152]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005234:	e729      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetSysClockFreq();
 8005236:	f7ff fcc9 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 800523a:	e726      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 800523c:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800523e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005240:	059b      	lsls	r3, r3, #22
 8005242:	d502      	bpl.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
        frequency = LSE_VALUE;
 8005244:	2080      	movs	r0, #128	; 0x80
 8005246:	0200      	lsls	r0, r0, #8
 8005248:	e71f      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = 0U;
 800524a:	2000      	movs	r0, #0
 800524c:	e71d      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800524e:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005252:	22c0      	movs	r2, #192	; 0xc0
 8005254:	0192      	lsls	r2, r2, #6
 8005256:	4013      	ands	r3, r2
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005258:	d009      	beq.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800525a:	2280      	movs	r2, #128	; 0x80
 800525c:	0192      	lsls	r2, r2, #6
 800525e:	4293      	cmp	r3, r2
 8005260:	d008      	beq.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005262:	2280      	movs	r2, #128	; 0x80
 8005264:	0152      	lsls	r2, r2, #5
 8005266:	4293      	cmp	r3, r2
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
        frequency = 0U;
 800526a:	2000      	movs	r0, #0
 800526c:	e70d      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetPCLK1Freq();
 800526e:	f7ff fdcd 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8005272:	e70a      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005274:	4a0f      	ldr	r2, [pc, #60]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	0752      	lsls	r2, r2, #29
 800527a:	d5f2      	bpl.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        frequency = HSI_VALUE;
 800527c:	4813      	ldr	r0, [pc, #76]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800527e:	e704      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetSysClockFreq();
 8005280:	f7ff fca4 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8005284:	e701      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005286:	f7ff fdc1 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800528a:	e6fe      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetPCLK1Freq();
 800528c:	f7ff fdbe 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8005290:	e6fb      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005292:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	0752      	lsls	r2, r2, #29
 8005298:	d400      	bmi.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 800529a:	e6e5      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        frequency = HSI_VALUE;
 800529c:	480b      	ldr	r0, [pc, #44]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800529e:	e6f4      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = HAL_RCC_GetSysClockFreq();
 80052a0:	f7ff fc94 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 80052a4:	e6f1      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
        frequency = 0U;
 80052a6:	2000      	movs	r0, #0
 80052a8:	e6ef      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
            frequency = HSE_VALUE / 8U;
 80052aa:	480b      	ldr	r0, [pc, #44]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80052ac:	e6ed      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
            frequency = 0U;
 80052ae:	2000      	movs	r0, #0
 80052b0:	e6eb      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	40021000 	.word	0x40021000
 80052b8:	00009088 	.word	0x00009088
 80052bc:	003d0900 	.word	0x003d0900
 80052c0:	0007a120 	.word	0x0007a120
 80052c4:	001e8480 	.word	0x001e8480
 80052c8:	0800a444 	.word	0x0800a444
 80052cc:	00f42400 	.word	0x00f42400
 80052d0:	007a1200 	.word	0x007a1200
 80052d4:	02dc6c00 	.word	0x02dc6c00
 80052d8:	000f4240 	.word	0x000f4240

080052dc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052e0:	2320      	movs	r3, #32
 80052e2:	5cc3      	ldrb	r3, [r0, r3]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d060      	beq.n	80053aa <HAL_RTC_DeactivateAlarm+0xce>
 80052e8:	2201      	movs	r2, #1
 80052ea:	2320      	movs	r3, #32
 80052ec:	54c2      	strb	r2, [r0, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052ee:	3201      	adds	r2, #1
 80052f0:	3301      	adds	r3, #1
 80052f2:	54c2      	strb	r2, [r0, r3]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052f4:	6803      	ldr	r3, [r0, #0]
 80052f6:	32c8      	adds	r2, #200	; 0xc8
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24
 80052fa:	6803      	ldr	r3, [r0, #0]
 80052fc:	3a77      	subs	r2, #119	; 0x77
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4299      	cmp	r1, r3
 8005306:	d022      	beq.n	800534e <HAL_RTC_DeactivateAlarm+0x72>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005308:	6802      	ldr	r2, [r0, #0]
 800530a:	6893      	ldr	r3, [r2, #8]
 800530c:	4928      	ldr	r1, [pc, #160]	; (80053b0 <HAL_RTC_DeactivateAlarm+0xd4>)
 800530e:	400b      	ands	r3, r1
 8005310:	6093      	str	r3, [r2, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8005312:	6802      	ldr	r2, [r0, #0]
 8005314:	6893      	ldr	r3, [r2, #8]
 8005316:	4927      	ldr	r1, [pc, #156]	; (80053b4 <HAL_RTC_DeactivateAlarm+0xd8>)
 8005318:	400b      	ands	r3, r1
 800531a:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();
 800531c:	f7fe fe3c 	bl	8003f98 <HAL_GetTick>
 8005320:	0005      	movs	r5, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	079b      	lsls	r3, r3, #30
 8005328:	d434      	bmi.n	8005394 <HAL_RTC_DeactivateAlarm+0xb8>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800532a:	f7fe fe35 	bl	8003f98 <HAL_GetTick>
 800532e:	1b40      	subs	r0, r0, r5
 8005330:	23fa      	movs	r3, #250	; 0xfa
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4298      	cmp	r0, r3
 8005336:	d9f4      	bls.n	8005322 <HAL_RTC_DeactivateAlarm+0x46>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	22ff      	movs	r2, #255	; 0xff
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800533e:	3afc      	subs	r2, #252	; 0xfc
 8005340:	2321      	movs	r3, #33	; 0x21
 8005342:	54e2      	strb	r2, [r4, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005344:	2200      	movs	r2, #0
 8005346:	3b01      	subs	r3, #1
 8005348:	54e2      	strb	r2, [r4, r3]

        return HAL_TIMEOUT;
 800534a:	2003      	movs	r0, #3
 800534c:	e02e      	b.n	80053ac <HAL_RTC_DeactivateAlarm+0xd0>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800534e:	6802      	ldr	r2, [r0, #0]
 8005350:	6893      	ldr	r3, [r2, #8]
 8005352:	4919      	ldr	r1, [pc, #100]	; (80053b8 <HAL_RTC_DeactivateAlarm+0xdc>)
 8005354:	400b      	ands	r3, r1
 8005356:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005358:	6802      	ldr	r2, [r0, #0]
 800535a:	6893      	ldr	r3, [r2, #8]
 800535c:	4917      	ldr	r1, [pc, #92]	; (80053bc <HAL_RTC_DeactivateAlarm+0xe0>)
 800535e:	400b      	ands	r3, r1
 8005360:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005362:	f7fe fe19 	bl	8003f98 <HAL_GetTick>
 8005366:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	07db      	lsls	r3, r3, #31
 800536e:	d411      	bmi.n	8005394 <HAL_RTC_DeactivateAlarm+0xb8>
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005370:	f7fe fe12 	bl	8003f98 <HAL_GetTick>
 8005374:	1b40      	subs	r0, r0, r5
 8005376:	23fa      	movs	r3, #250	; 0xfa
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4298      	cmp	r0, r3
 800537c:	d9f4      	bls.n	8005368 <HAL_RTC_DeactivateAlarm+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005384:	3afc      	subs	r2, #252	; 0xfc
 8005386:	2321      	movs	r3, #33	; 0x21
 8005388:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800538a:	2200      	movs	r2, #0
 800538c:	3b01      	subs	r3, #1
 800538e:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8005390:	2003      	movs	r0, #3
 8005392:	e00b      	b.n	80053ac <HAL_RTC_DeactivateAlarm+0xd0>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	22ff      	movs	r2, #255	; 0xff
 8005398:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800539a:	3afe      	subs	r2, #254	; 0xfe
 800539c:	2321      	movs	r3, #33	; 0x21
 800539e:	54e2      	strb	r2, [r4, r3]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053a0:	2200      	movs	r2, #0
 80053a2:	3b01      	subs	r3, #1
 80053a4:	54e2      	strb	r2, [r4, r3]

  return HAL_OK; 
 80053a6:	2000      	movs	r0, #0
 80053a8:	e000      	b.n	80053ac <HAL_RTC_DeactivateAlarm+0xd0>
  __HAL_LOCK(hrtc);
 80053aa:	2002      	movs	r0, #2
}
 80053ac:	bd70      	pop	{r4, r5, r6, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	fffffdff 	.word	0xfffffdff
 80053b4:	ffffdfff 	.word	0xffffdfff
 80053b8:	fffffeff 	.word	0xfffffeff
 80053bc:	ffffefff 	.word	0xffffefff

080053c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053c4:	6802      	ldr	r2, [r0, #0]
 80053c6:	68d3      	ldr	r3, [r2, #12]
 80053c8:	21a0      	movs	r1, #160	; 0xa0
 80053ca:	438b      	bics	r3, r1
 80053cc:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80053ce:	f7fe fde3 	bl	8003f98 <HAL_GetTick>
 80053d2:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	069b      	lsls	r3, r3, #26
 80053da:	d408      	bmi.n	80053ee <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053dc:	f7fe fddc 	bl	8003f98 <HAL_GetTick>
 80053e0:	1b40      	subs	r0, r0, r5
 80053e2:	23fa      	movs	r3, #250	; 0xfa
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4298      	cmp	r0, r3
 80053e8:	d9f4      	bls.n	80053d4 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80053ea:	2003      	movs	r0, #3
 80053ec:	e000      	b.n	80053f0 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80053ee:	2000      	movs	r0, #0
}
 80053f0:	bd70      	pop	{r4, r5, r6, pc}

080053f2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80053f2:	b570      	push	{r4, r5, r6, lr}
 80053f4:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80053f6:	6803      	ldr	r3, [r0, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	0652      	lsls	r2, r2, #25
 80053fc:	d501      	bpl.n	8005402 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80053fe:	2000      	movs	r0, #0
}
 8005400:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005402:	2201      	movs	r2, #1
 8005404:	4252      	negs	r2, r2
 8005406:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005408:	f7fe fdc6 	bl	8003f98 <HAL_GetTick>
 800540c:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	065b      	lsls	r3, r3, #25
 8005414:	d408      	bmi.n	8005428 <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005416:	f7fe fdbf 	bl	8003f98 <HAL_GetTick>
 800541a:	1b40      	subs	r0, r0, r5
 800541c:	23fa      	movs	r3, #250	; 0xfa
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4298      	cmp	r0, r3
 8005422:	d9f4      	bls.n	800540e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8005424:	2003      	movs	r0, #3
 8005426:	e7eb      	b.n	8005400 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8005428:	2000      	movs	r0, #0
 800542a:	e7e9      	b.n	8005400 <RTC_EnterInitMode+0xe>

0800542c <HAL_RTC_Init>:
{
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8005430:	d04e      	beq.n	80054d0 <HAL_RTC_Init+0xa4>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005432:	2321      	movs	r3, #33	; 0x21
 8005434:	5cc3      	ldrb	r3, [r0, r3]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d03c      	beq.n	80054b4 <HAL_RTC_Init+0x88>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800543a:	2202      	movs	r2, #2
 800543c:	2321      	movs	r3, #33	; 0x21
 800543e:	54e2      	strb	r2, [r4, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	32c8      	adds	r2, #200	; 0xc8
 8005444:	625a      	str	r2, [r3, #36]	; 0x24
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	3a77      	subs	r2, #119	; 0x77
 800544a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800544c:	0020      	movs	r0, r4
 800544e:	f7ff ffd0 	bl	80053f2 <RTC_EnterInitMode>
 8005452:	2800      	cmp	r0, #0
 8005454:	d134      	bne.n	80054c0 <HAL_RTC_Init+0x94>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	6893      	ldr	r3, [r2, #8]
 800545a:	491e      	ldr	r1, [pc, #120]	; (80054d4 <HAL_RTC_Init+0xa8>)
 800545c:	400b      	ands	r3, r1
 800545e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005460:	6821      	ldr	r1, [r4, #0]
 8005462:	688a      	ldr	r2, [r1, #8]
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	6925      	ldr	r5, [r4, #16]
 8005468:	432b      	orrs	r3, r5
 800546a:	69a5      	ldr	r5, [r4, #24]
 800546c:	432b      	orrs	r3, r5
 800546e:	4313      	orrs	r3, r2
 8005470:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	68e2      	ldr	r2, [r4, #12]
 8005476:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005478:	6821      	ldr	r1, [r4, #0]
 800547a:	690b      	ldr	r3, [r1, #16]
 800547c:	68a2      	ldr	r2, [r4, #8]
 800547e:	0412      	lsls	r2, r2, #16
 8005480:	4313      	orrs	r3, r2
 8005482:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	68d3      	ldr	r3, [r2, #12]
 8005488:	2180      	movs	r1, #128	; 0x80
 800548a:	438b      	bics	r3, r1
 800548c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005492:	397d      	subs	r1, #125	; 0x7d
 8005494:	438b      	bics	r3, r1
 8005496:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005498:	6821      	ldr	r1, [r4, #0]
 800549a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800549c:	69e2      	ldr	r2, [r4, #28]
 800549e:	6965      	ldr	r5, [r4, #20]
 80054a0:	432a      	orrs	r2, r5
 80054a2:	4313      	orrs	r3, r2
 80054a4:	64cb      	str	r3, [r1, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	22ff      	movs	r2, #255	; 0xff
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80054ac:	3afe      	subs	r2, #254	; 0xfe
 80054ae:	2321      	movs	r3, #33	; 0x21
 80054b0:	54e2      	strb	r2, [r4, r3]
}
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80054b4:	2200      	movs	r2, #0
 80054b6:	3320      	adds	r3, #32
 80054b8:	54c2      	strb	r2, [r0, r3]
    HAL_RTC_MspInit(hrtc);
 80054ba:	f002 f9af 	bl	800781c <HAL_RTC_MspInit>
 80054be:	e7bc      	b.n	800543a <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	22ff      	movs	r2, #255	; 0xff
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054c6:	3afb      	subs	r2, #251	; 0xfb
 80054c8:	2321      	movs	r3, #33	; 0x21
 80054ca:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80054cc:	2001      	movs	r0, #1
 80054ce:	e7f0      	b.n	80054b2 <HAL_RTC_Init+0x86>
     return HAL_ERROR;
 80054d0:	2001      	movs	r0, #1
 80054d2:	e7ee      	b.n	80054b2 <HAL_RTC_Init+0x86>
 80054d4:	ff8fffbf 	.word	0xff8fffbf

080054d8 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80054d8:	2300      	movs	r3, #0

  while(Value >= 10U)
 80054da:	e002      	b.n	80054e2 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80054dc:	3301      	adds	r3, #1
    Value -= 10U;
 80054de:	380a      	subs	r0, #10
 80054e0:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 80054e2:	2809      	cmp	r0, #9
 80054e4:	d8fa      	bhi.n	80054dc <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	4318      	orrs	r0, r3
}
 80054ec:	4770      	bx	lr
	...

080054f0 <HAL_RTC_SetTime>:
{
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	0004      	movs	r4, r0
 80054f4:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80054f6:	2320      	movs	r3, #32
 80054f8:	5cc3      	ldrb	r3, [r0, r3]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d077      	beq.n	80055ee <HAL_RTC_SetTime+0xfe>
 80054fe:	2101      	movs	r1, #1
 8005500:	2320      	movs	r3, #32
 8005502:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005504:	3101      	adds	r1, #1
 8005506:	3301      	adds	r3, #1
 8005508:	54c1      	strb	r1, [r0, r3]
  if(Format == RTC_FORMAT_BIN)
 800550a:	2a00      	cmp	r2, #0
 800550c:	d143      	bne.n	8005596 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800550e:	6803      	ldr	r3, [r0, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	065b      	lsls	r3, r3, #25
 8005514:	d401      	bmi.n	800551a <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00U;
 8005516:	2300      	movs	r3, #0
 8005518:	70f3      	strb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800551a:	7830      	ldrb	r0, [r6, #0]
 800551c:	f7ff ffdc 	bl	80054d8 <RTC_ByteToBcd2>
 8005520:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005522:	7870      	ldrb	r0, [r6, #1]
 8005524:	f7ff ffd8 	bl	80054d8 <RTC_ByteToBcd2>
 8005528:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800552a:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800552c:	78b0      	ldrb	r0, [r6, #2]
 800552e:	f7ff ffd3 	bl	80054d8 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005532:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005534:	78f0      	ldrb	r0, [r6, #3]
 8005536:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005538:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	22ca      	movs	r2, #202	; 0xca
 800553e:	625a      	str	r2, [r3, #36]	; 0x24
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	3a77      	subs	r2, #119	; 0x77
 8005544:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005546:	0020      	movs	r0, r4
 8005548:	f7ff ff53 	bl	80053f2 <RTC_EnterInitMode>
 800554c:	1e07      	subs	r7, r0, #0
 800554e:	d133      	bne.n	80055b8 <HAL_RTC_SetTime+0xc8>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	4828      	ldr	r0, [pc, #160]	; (80055f4 <HAL_RTC_SetTime+0x104>)
 8005554:	4005      	ands	r5, r0
 8005556:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	6893      	ldr	r3, [r2, #8]
 800555c:	4926      	ldr	r1, [pc, #152]	; (80055f8 <HAL_RTC_SetTime+0x108>)
 800555e:	400b      	ands	r3, r1
 8005560:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005562:	6821      	ldr	r1, [r4, #0]
 8005564:	688b      	ldr	r3, [r1, #8]
 8005566:	68f2      	ldr	r2, [r6, #12]
 8005568:	6930      	ldr	r0, [r6, #16]
 800556a:	4302      	orrs	r2, r0
 800556c:	4313      	orrs	r3, r2
 800556e:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005570:	6822      	ldr	r2, [r4, #0]
 8005572:	68d3      	ldr	r3, [r2, #12]
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	438b      	bics	r3, r1
 8005578:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	069b      	lsls	r3, r3, #26
 8005580:	d525      	bpl.n	80055ce <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	22ff      	movs	r2, #255	; 0xff
 8005586:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8005588:	3afe      	subs	r2, #254	; 0xfe
 800558a:	2321      	movs	r3, #33	; 0x21
 800558c:	54e2      	strb	r2, [r4, r3]
   __HAL_UNLOCK(hrtc); 
 800558e:	2200      	movs	r2, #0
 8005590:	3b01      	subs	r3, #1
 8005592:	54e2      	strb	r2, [r4, r3]
   return HAL_OK;
 8005594:	e02c      	b.n	80055f0 <HAL_RTC_SetTime+0x100>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005596:	6803      	ldr	r3, [r0, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	065b      	lsls	r3, r3, #25
 800559c:	d401      	bmi.n	80055a2 <HAL_RTC_SetTime+0xb2>
      sTime->TimeFormat = 0x00U;
 800559e:	2300      	movs	r3, #0
 80055a0:	70f3      	strb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055a2:	7835      	ldrb	r5, [r6, #0]
 80055a4:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80055a6:	7870      	ldrb	r0, [r6, #1]
 80055a8:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055aa:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80055ac:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80055ae:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80055b0:	78f0      	ldrb	r0, [r6, #3]
 80055b2:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055b4:	4305      	orrs	r5, r0
 80055b6:	e7c0      	b.n	800553a <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	22ff      	movs	r2, #255	; 0xff
 80055bc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80055be:	3afb      	subs	r2, #251	; 0xfb
 80055c0:	2321      	movs	r3, #33	; 0x21
 80055c2:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 80055c4:	2200      	movs	r2, #0
 80055c6:	3b01      	subs	r3, #1
 80055c8:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80055ca:	2701      	movs	r7, #1
 80055cc:	e010      	b.n	80055f0 <HAL_RTC_SetTime+0x100>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055ce:	0020      	movs	r0, r4
 80055d0:	f7ff fef6 	bl	80053c0 <HAL_RTC_WaitForSynchro>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d0d4      	beq.n	8005582 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	22ff      	movs	r2, #255	; 0xff
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80055de:	3afb      	subs	r2, #251	; 0xfb
 80055e0:	2321      	movs	r3, #33	; 0x21
 80055e2:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 80055e4:	2200      	movs	r2, #0
 80055e6:	3b01      	subs	r3, #1
 80055e8:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80055ea:	2701      	movs	r7, #1
 80055ec:	e000      	b.n	80055f0 <HAL_RTC_SetTime+0x100>
  __HAL_LOCK(hrtc);
 80055ee:	2702      	movs	r7, #2
}
 80055f0:	0038      	movs	r0, r7
 80055f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f4:	007f7f7f 	.word	0x007f7f7f
 80055f8:	fffbffff 	.word	0xfffbffff

080055fc <HAL_RTC_SetDate>:
{
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	0004      	movs	r4, r0
 8005600:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8005602:	2320      	movs	r3, #32
 8005604:	5cc3      	ldrb	r3, [r0, r3]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d068      	beq.n	80056dc <HAL_RTC_SetDate+0xe0>
 800560a:	2101      	movs	r1, #1
 800560c:	2320      	movs	r3, #32
 800560e:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005610:	3101      	adds	r1, #1
 8005612:	3301      	adds	r3, #1
 8005614:	54c1      	strb	r1, [r0, r3]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005616:	2a00      	cmp	r2, #0
 8005618:	d106      	bne.n	8005628 <HAL_RTC_SetDate+0x2c>
 800561a:	7873      	ldrb	r3, [r6, #1]
 800561c:	06d9      	lsls	r1, r3, #27
 800561e:	d503      	bpl.n	8005628 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005620:	2110      	movs	r1, #16
 8005622:	438b      	bics	r3, r1
 8005624:	330a      	adds	r3, #10
 8005626:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 8005628:	2a00      	cmp	r2, #0
 800562a:	d131      	bne.n	8005690 <HAL_RTC_SetDate+0x94>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800562c:	78f0      	ldrb	r0, [r6, #3]
 800562e:	f7ff ff53 	bl	80054d8 <RTC_ByteToBcd2>
 8005632:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005634:	7870      	ldrb	r0, [r6, #1]
 8005636:	f7ff ff4f 	bl	80054d8 <RTC_ByteToBcd2>
 800563a:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800563c:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800563e:	78b0      	ldrb	r0, [r6, #2]
 8005640:	f7ff ff4a 	bl	80054d8 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005644:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));
 8005646:	7830      	ldrb	r0, [r6, #0]
 8005648:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800564a:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	22ca      	movs	r2, #202	; 0xca
 8005650:	625a      	str	r2, [r3, #36]	; 0x24
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	3a77      	subs	r2, #119	; 0x77
 8005656:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005658:	0020      	movs	r0, r4
 800565a:	f7ff feca 	bl	80053f2 <RTC_EnterInitMode>
 800565e:	1e06      	subs	r6, r0, #0
 8005660:	d121      	bne.n	80056a6 <HAL_RTC_SetDate+0xaa>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	481f      	ldr	r0, [pc, #124]	; (80056e4 <HAL_RTC_SetDate+0xe8>)
 8005666:	4005      	ands	r5, r0
 8005668:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	68d3      	ldr	r3, [r2, #12]
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	438b      	bics	r3, r1
 8005672:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	069b      	lsls	r3, r3, #26
 800567a:	d51f      	bpl.n	80056bc <HAL_RTC_SetDate+0xc0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	22ff      	movs	r2, #255	; 0xff
 8005680:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005682:	3afe      	subs	r2, #254	; 0xfe
 8005684:	2321      	movs	r3, #33	; 0x21
 8005686:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 8005688:	2200      	movs	r2, #0
 800568a:	3b01      	subs	r3, #1
 800568c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 800568e:	e026      	b.n	80056de <HAL_RTC_SetDate+0xe2>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8005690:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8005692:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005694:	78f5      	ldrb	r5, [r6, #3]
 8005696:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005698:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800569a:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8U) | \
 800569c:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));
 800569e:	7830      	ldrb	r0, [r6, #0]
 80056a0:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80056a2:	4305      	orrs	r5, r0
 80056a4:	e7d2      	b.n	800564c <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	22ff      	movs	r2, #255	; 0xff
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056ac:	3afb      	subs	r2, #251	; 0xfb
 80056ae:	2321      	movs	r3, #33	; 0x21
 80056b0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 80056b2:	2200      	movs	r2, #0
 80056b4:	3b01      	subs	r3, #1
 80056b6:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80056b8:	2601      	movs	r6, #1
 80056ba:	e010      	b.n	80056de <HAL_RTC_SetDate+0xe2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056bc:	0020      	movs	r0, r4
 80056be:	f7ff fe7f 	bl	80053c0 <HAL_RTC_WaitForSynchro>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d0da      	beq.n	800567c <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	22ff      	movs	r2, #255	; 0xff
 80056ca:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80056cc:	3afb      	subs	r2, #251	; 0xfb
 80056ce:	2321      	movs	r3, #33	; 0x21
 80056d0:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 80056d2:	2200      	movs	r2, #0
 80056d4:	3b01      	subs	r3, #1
 80056d6:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80056d8:	2601      	movs	r6, #1
 80056da:	e000      	b.n	80056de <HAL_RTC_SetDate+0xe2>
 __HAL_LOCK(hrtc);
 80056dc:	2602      	movs	r6, #2
}
 80056de:	0030      	movs	r0, r6
 80056e0:	bd70      	pop	{r4, r5, r6, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	00ffff3f 	.word	0x00ffff3f

080056e8 <HAL_RTC_SetAlarm_IT>:
{
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	0004      	movs	r4, r0
 80056ec:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80056ee:	2320      	movs	r3, #32
 80056f0:	5cc3      	ldrb	r3, [r0, r3]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d100      	bne.n	80056f8 <HAL_RTC_SetAlarm_IT+0x10>
 80056f6:	e0cb      	b.n	8005890 <HAL_RTC_SetAlarm_IT+0x1a8>
 80056f8:	2101      	movs	r1, #1
 80056fa:	2320      	movs	r3, #32
 80056fc:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056fe:	3101      	adds	r1, #1
 8005700:	3301      	adds	r3, #1
 8005702:	54c1      	strb	r1, [r0, r3]
  if(Format == RTC_FORMAT_BIN)
 8005704:	2a00      	cmp	r2, #0
 8005706:	d152      	bne.n	80057ae <HAL_RTC_SetAlarm_IT+0xc6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005708:	6803      	ldr	r3, [r0, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	065b      	lsls	r3, r3, #25
 800570e:	d401      	bmi.n	8005714 <HAL_RTC_SetAlarm_IT+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005710:	2300      	movs	r3, #0
 8005712:	70eb      	strb	r3, [r5, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005714:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005716:	7828      	ldrb	r0, [r5, #0]
 8005718:	f7ff fede 	bl	80054d8 <RTC_ByteToBcd2>
 800571c:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800571e:	7868      	ldrb	r0, [r5, #1]
 8005720:	f7ff feda 	bl	80054d8 <RTC_ByteToBcd2>
 8005724:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005726:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005728:	78a8      	ldrb	r0, [r5, #2]
 800572a:	f7ff fed5 	bl	80054d8 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800572e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005730:	78e8      	ldrb	r0, [r5, #3]
 8005732:	0400      	lsls	r0, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005734:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005736:	2320      	movs	r3, #32
 8005738:	5ce8      	ldrb	r0, [r5, r3]
 800573a:	f7ff fecd 	bl	80054d8 <RTC_ByteToBcd2>
 800573e:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005740:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005742:	433e      	orrs	r6, r7
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005744:	696b      	ldr	r3, [r5, #20]
 8005746:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005748:	686f      	ldr	r7, [r5, #4]
 800574a:	69ab      	ldr	r3, [r5, #24]
 800574c:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	22ca      	movs	r2, #202	; 0xca
 8005752:	625a      	str	r2, [r3, #36]	; 0x24
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	3a77      	subs	r2, #119	; 0x77
 8005758:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 800575a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	429a      	cmp	r2, r3
 8005762:	d03d      	beq.n	80057e0 <HAL_RTC_SetAlarm_IT+0xf8>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005764:	6822      	ldr	r2, [r4, #0]
 8005766:	6893      	ldr	r3, [r2, #8]
 8005768:	494a      	ldr	r1, [pc, #296]	; (8005894 <HAL_RTC_SetAlarm_IT+0x1ac>)
 800576a:	400b      	ands	r3, r1
 800576c:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800576e:	6821      	ldr	r1, [r4, #0]
 8005770:	68ca      	ldr	r2, [r1, #12]
 8005772:	23ff      	movs	r3, #255	; 0xff
 8005774:	401a      	ands	r2, r3
 8005776:	4b48      	ldr	r3, [pc, #288]	; (8005898 <HAL_RTC_SetAlarm_IT+0x1b0>)
 8005778:	4313      	orrs	r3, r2
 800577a:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 800577c:	f7fe fc0c 	bl	8003f98 <HAL_GetTick>
 8005780:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	0792      	lsls	r2, r2, #30
 8005788:	d45f      	bmi.n	800584a <HAL_RTC_SetAlarm_IT+0x162>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800578a:	f7fe fc05 	bl	8003f98 <HAL_GetTick>
 800578e:	1b40      	subs	r0, r0, r5
 8005790:	23fa      	movs	r3, #250	; 0xfa
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4298      	cmp	r0, r3
 8005796:	d9f4      	bls.n	8005782 <HAL_RTC_SetAlarm_IT+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	22ff      	movs	r2, #255	; 0xff
 800579c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800579e:	3afc      	subs	r2, #252	; 0xfc
 80057a0:	2321      	movs	r3, #33	; 0x21
 80057a2:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 80057a4:	2200      	movs	r2, #0
 80057a6:	3b01      	subs	r3, #1
 80057a8:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80057aa:	2003      	movs	r0, #3
 80057ac:	e071      	b.n	8005892 <HAL_RTC_SetAlarm_IT+0x1aa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80057ae:	6803      	ldr	r3, [r0, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	065b      	lsls	r3, r3, #25
 80057b4:	d401      	bmi.n	80057ba <HAL_RTC_SetAlarm_IT+0xd2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80057ba:	782e      	ldrb	r6, [r5, #0]
 80057bc:	0436      	lsls	r6, r6, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80057be:	786b      	ldrb	r3, [r5, #1]
 80057c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80057c2:	431e      	orrs	r6, r3
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80057c4:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80057c6:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80057c8:	78eb      	ldrb	r3, [r5, #3]
 80057ca:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80057cc:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80057ce:	2320      	movs	r3, #32
 80057d0:	5ceb      	ldrb	r3, [r5, r3]
 80057d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80057d4:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80057d6:	69eb      	ldr	r3, [r5, #28]
 80057d8:	431e      	orrs	r6, r3
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80057da:	696b      	ldr	r3, [r5, #20]
 80057dc:	431e      	orrs	r6, r3
 80057de:	e7b3      	b.n	8005748 <HAL_RTC_SetAlarm_IT+0x60>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	6893      	ldr	r3, [r2, #8]
 80057e4:	492d      	ldr	r1, [pc, #180]	; (800589c <HAL_RTC_SetAlarm_IT+0x1b4>)
 80057e6:	400b      	ands	r3, r1
 80057e8:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80057ea:	6821      	ldr	r1, [r4, #0]
 80057ec:	68ca      	ldr	r2, [r1, #12]
 80057ee:	23ff      	movs	r3, #255	; 0xff
 80057f0:	401a      	ands	r2, r3
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_RTC_SetAlarm_IT+0x1b8>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80057f8:	f7fe fbce 	bl	8003f98 <HAL_GetTick>
 80057fc:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	07d2      	lsls	r2, r2, #31
 8005804:	d411      	bmi.n	800582a <HAL_RTC_SetAlarm_IT+0x142>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005806:	f7fe fbc7 	bl	8003f98 <HAL_GetTick>
 800580a:	1b40      	subs	r0, r0, r5
 800580c:	23fa      	movs	r3, #250	; 0xfa
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4298      	cmp	r0, r3
 8005812:	d9f4      	bls.n	80057fe <HAL_RTC_SetAlarm_IT+0x116>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	22ff      	movs	r2, #255	; 0xff
 8005818:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800581a:	3afc      	subs	r2, #252	; 0xfc
 800581c:	2321      	movs	r3, #33	; 0x21
 800581e:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8005820:	2200      	movs	r2, #0
 8005822:	3b01      	subs	r3, #1
 8005824:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8005826:	2003      	movs	r0, #3
 8005828:	e033      	b.n	8005892 <HAL_RTC_SetAlarm_IT+0x1aa>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800582a:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	6891      	ldr	r1, [r2, #8]
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	430b      	orrs	r3, r1
 800583a:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	6891      	ldr	r1, [r2, #8]
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	015b      	lsls	r3, r3, #5
 8005844:	430b      	orrs	r3, r1
 8005846:	6093      	str	r3, [r2, #8]
 8005848:	e00e      	b.n	8005868 <HAL_RTC_SetAlarm_IT+0x180>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800584a:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005850:	6822      	ldr	r2, [r4, #0]
 8005852:	6891      	ldr	r1, [r2, #8]
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	430b      	orrs	r3, r1
 800585a:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	6891      	ldr	r1, [r2, #8]
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	019b      	lsls	r3, r3, #6
 8005864:	430b      	orrs	r3, r1
 8005866:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <HAL_RTC_SetAlarm_IT+0x1bc>)
 800586a:	6819      	ldr	r1, [r3, #0]
 800586c:	2280      	movs	r2, #128	; 0x80
 800586e:	0292      	lsls	r2, r2, #10
 8005870:	4311      	orrs	r1, r2
 8005872:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005874:	6899      	ldr	r1, [r3, #8]
 8005876:	430a      	orrs	r2, r1
 8005878:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	22ff      	movs	r2, #255	; 0xff
 800587e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 8005880:	3afe      	subs	r2, #254	; 0xfe
 8005882:	2321      	movs	r3, #33	; 0x21
 8005884:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 8005886:	2200      	movs	r2, #0
 8005888:	3b01      	subs	r3, #1
 800588a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800588c:	2000      	movs	r0, #0
 800588e:	e000      	b.n	8005892 <HAL_RTC_SetAlarm_IT+0x1aa>
  __HAL_LOCK(hrtc);
 8005890:	2002      	movs	r0, #2
}
 8005892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005894:	fffffdff 	.word	0xfffffdff
 8005898:	fffffd7f 	.word	0xfffffd7f
 800589c:	fffffeff 	.word	0xfffffeff
 80058a0:	fffffe7f 	.word	0xfffffe7f
 80058a4:	40010400 	.word	0x40010400

080058a8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80058a8:	0902      	lsrs	r2, r0, #4
 80058aa:	0093      	lsls	r3, r2, #2
 80058ac:	189b      	adds	r3, r3, r2
 80058ae:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 80058b0:	230f      	movs	r3, #15
 80058b2:	4018      	ands	r0, r3
 80058b4:	1880      	adds	r0, r0, r2
 80058b6:	b2c0      	uxtb	r0, r0
}
 80058b8:	4770      	bx	lr
	...

080058bc <HAL_RTC_GetTime>:
{
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80058c0:	6803      	ldr	r3, [r0, #0]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80058c6:	6803      	ldr	r3, [r0, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	045b      	lsls	r3, r3, #17
 80058cc:	0c5b      	lsrs	r3, r3, #17
 80058ce:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80058d0:	6803      	ldr	r3, [r0, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	490e      	ldr	r1, [pc, #56]	; (8005910 <HAL_RTC_GetTime+0x54>)
 80058d6:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80058d8:	0c1e      	lsrs	r6, r3, #16
 80058da:	203f      	movs	r0, #63	; 0x3f
 80058dc:	4030      	ands	r0, r6
 80058de:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80058e0:	0a1d      	lsrs	r5, r3, #8
 80058e2:	277f      	movs	r7, #127	; 0x7f
 80058e4:	403d      	ands	r5, r7
 80058e6:	7065      	strb	r5, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80058e8:	401f      	ands	r7, r3
 80058ea:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80058ec:	2140      	movs	r1, #64	; 0x40
 80058ee:	4031      	ands	r1, r6
 80058f0:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 80058f2:	2a00      	cmp	r2, #0
 80058f4:	d10a      	bne.n	800590c <HAL_RTC_GetTime+0x50>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80058f6:	f7ff ffd7 	bl	80058a8 <RTC_Bcd2ToByte>
 80058fa:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80058fc:	0028      	movs	r0, r5
 80058fe:	f7ff ffd3 	bl	80058a8 <RTC_Bcd2ToByte>
 8005902:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005904:	0038      	movs	r0, r7
 8005906:	f7ff ffcf 	bl	80058a8 <RTC_Bcd2ToByte>
 800590a:	70a0      	strb	r0, [r4, #2]
}
 800590c:	2000      	movs	r0, #0
 800590e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005910:	007f7f7f 	.word	0x007f7f7f

08005914 <HAL_RTC_GetDate>:
{
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005918:	6803      	ldr	r3, [r0, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	490e      	ldr	r1, [pc, #56]	; (8005958 <HAL_RTC_GetDate+0x44>)
 800591e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005920:	0c18      	lsrs	r0, r3, #16
 8005922:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005924:	0a19      	lsrs	r1, r3, #8
 8005926:	261f      	movs	r6, #31
 8005928:	400e      	ands	r6, r1
 800592a:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800592c:	253f      	movs	r5, #63	; 0x3f
 800592e:	401d      	ands	r5, r3
 8005930:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8005932:	0b5b      	lsrs	r3, r3, #13
 8005934:	2107      	movs	r1, #7
 8005936:	400b      	ands	r3, r1
 8005938:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 800593a:	2a00      	cmp	r2, #0
 800593c:	d10a      	bne.n	8005954 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800593e:	f7ff ffb3 	bl	80058a8 <RTC_Bcd2ToByte>
 8005942:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005944:	0030      	movs	r0, r6
 8005946:	f7ff ffaf 	bl	80058a8 <RTC_Bcd2ToByte>
 800594a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800594c:	0028      	movs	r0, r5
 800594e:	f7ff ffab 	bl	80058a8 <RTC_Bcd2ToByte>
 8005952:	70a0      	strb	r0, [r4, #2]
}
 8005954:	2000      	movs	r0, #0
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	00ffff3f 	.word	0x00ffff3f

0800595c <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 800595c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595e:	b083      	sub	sp, #12
 8005960:	0004      	movs	r4, r0
 8005962:	000d      	movs	r5, r1
 8005964:	9201      	str	r2, [sp, #4]
 8005966:	001e      	movs	r6, r3
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8005968:	2320      	movs	r3, #32
 800596a:	5cc3      	ldrb	r3, [r0, r3]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d039      	beq.n	80059e4 <HAL_RTCEx_SetSmoothCalib+0x88>
 8005970:	2201      	movs	r2, #1
 8005972:	2320      	movs	r3, #32
 8005974:	54c2      	strb	r2, [r0, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005976:	3201      	adds	r2, #1
 8005978:	3301      	adds	r3, #1
 800597a:	54c2      	strb	r2, [r0, r3]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800597c:	6803      	ldr	r3, [r0, #0]
 800597e:	32c8      	adds	r2, #200	; 0xc8
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
 8005982:	6803      	ldr	r3, [r0, #0]
 8005984:	3a77      	subs	r2, #119	; 0x77
 8005986:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8005988:	6803      	ldr	r3, [r0, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	03db      	lsls	r3, r3, #15
 800598e:	d410      	bmi.n	80059b2 <HAL_RTCEx_SetSmoothCalib+0x56>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	9a01      	ldr	r2, [sp, #4]
 8005994:	4315      	orrs	r5, r2
 8005996:	432e      	orrs	r6, r5
 8005998:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	22ff      	movs	r2, #255	; 0xff
 800599e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 80059a0:	3afe      	subs	r2, #254	; 0xfe
 80059a2:	2321      	movs	r3, #33	; 0x21
 80059a4:	54e2      	strb	r2, [r4, r3]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059a6:	2200      	movs	r2, #0
 80059a8:	3b01      	subs	r3, #1
 80059aa:	54e2      	strb	r2, [r4, r3]

  return HAL_OK;
 80059ac:	2000      	movs	r0, #0
}
 80059ae:	b003      	add	sp, #12
 80059b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 80059b2:	f7fe faf1 	bl	8003f98 <HAL_GetTick>
 80059b6:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	03db      	lsls	r3, r3, #15
 80059be:	d5e7      	bpl.n	8005990 <HAL_RTCEx_SetSmoothCalib+0x34>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80059c0:	f7fe faea 	bl	8003f98 <HAL_GetTick>
 80059c4:	1bc0      	subs	r0, r0, r7
 80059c6:	23fa      	movs	r3, #250	; 0xfa
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4298      	cmp	r0, r3
 80059cc:	d9f4      	bls.n	80059b8 <HAL_RTCEx_SetSmoothCalib+0x5c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	22ff      	movs	r2, #255	; 0xff
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80059d4:	3afc      	subs	r2, #252	; 0xfc
 80059d6:	2321      	movs	r3, #33	; 0x21
 80059d8:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 80059da:	2200      	movs	r2, #0
 80059dc:	3b01      	subs	r3, #1
 80059de:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80059e0:	2003      	movs	r0, #3
 80059e2:	e7e4      	b.n	80059ae <HAL_RTCEx_SetSmoothCalib+0x52>
  __HAL_LOCK(hrtc);
 80059e4:	2002      	movs	r0, #2
 80059e6:	e7e2      	b.n	80059ae <HAL_RTCEx_SetSmoothCalib+0x52>

080059e8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80059e8:	b530      	push	{r4, r5, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059ea:	2320      	movs	r3, #32
 80059ec:	5cc3      	ldrb	r3, [r0, r3]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d017      	beq.n	8005a22 <HAL_RTCEx_EnableBypassShadow+0x3a>
 80059f2:	2320      	movs	r3, #32
 80059f4:	2401      	movs	r4, #1
 80059f6:	54c4      	strb	r4, [r0, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f8:	2121      	movs	r1, #33	; 0x21
 80059fa:	2202      	movs	r2, #2
 80059fc:	5442      	strb	r2, [r0, r1]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059fe:	6802      	ldr	r2, [r0, #0]
 8005a00:	25ca      	movs	r5, #202	; 0xca
 8005a02:	6255      	str	r5, [r2, #36]	; 0x24
 8005a04:	6802      	ldr	r2, [r0, #0]
 8005a06:	3d77      	subs	r5, #119	; 0x77
 8005a08:	6255      	str	r5, [r2, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005a0a:	6805      	ldr	r5, [r0, #0]
 8005a0c:	68aa      	ldr	r2, [r5, #8]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	60aa      	str	r2, [r5, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a12:	6802      	ldr	r2, [r0, #0]
 8005a14:	25ff      	movs	r5, #255	; 0xff
 8005a16:	6255      	str	r5, [r2, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a18:	5444      	strb	r4, [r0, r1]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005a1e:	2000      	movs	r0, #0
}
 8005a20:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hrtc);
 8005a22:	2002      	movs	r0, #2
 8005a24:	e7fc      	b.n	8005a20 <HAL_RTCEx_EnableBypassShadow+0x38>
	...

08005a28 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8005a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2a:	46c6      	mov	lr, r8
 8005a2c:	b500      	push	{lr}
 8005a2e:	0006      	movs	r6, r0
 8005a30:	000c      	movs	r4, r1
 8005a32:	0017      	movs	r7, r2
 8005a34:	001d      	movs	r5, r3
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005a36:	f7fe faaf 	bl	8003f98 <HAL_GetTick>
 8005a3a:	4680      	mov	r8, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8005a3c:	2f00      	cmp	r7, #0
 8005a3e:	d031      	beq.n	8005aa4 <SPI_WaitOnFlagUntilTimeout+0x7c>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8005a40:	6833      	ldr	r3, [r6, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4023      	ands	r3, r4
 8005a46:	429c      	cmp	r4, r3
 8005a48:	d162      	bne.n	8005b10 <SPI_WaitOnFlagUntilTimeout+0xe8>
    {
      if(Timeout != HAL_MAX_DELAY)
 8005a4a:	1c6b      	adds	r3, r5, #1
 8005a4c:	d0f8      	beq.n	8005a40 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005a4e:	2d00      	cmp	r5, #0
 8005a50:	d005      	beq.n	8005a5e <SPI_WaitOnFlagUntilTimeout+0x36>
 8005a52:	f7fe faa1 	bl	8003f98 <HAL_GetTick>
 8005a56:	4643      	mov	r3, r8
 8005a58:	1ac0      	subs	r0, r0, r3
 8005a5a:	4285      	cmp	r5, r0
 8005a5c:	d2f0      	bcs.n	8005a40 <SPI_WaitOnFlagUntilTimeout+0x18>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a5e:	6832      	ldr	r2, [r6, #0]
 8005a60:	6853      	ldr	r3, [r2, #4]
 8005a62:	21e0      	movs	r1, #224	; 0xe0
 8005a64:	438b      	bics	r3, r1
 8005a66:	6053      	str	r3, [r2, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a68:	6832      	ldr	r2, [r6, #0]
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	39a0      	subs	r1, #160	; 0xa0
 8005a6e:	438b      	bics	r3, r1
 8005a70:	6013      	str	r3, [r2, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	019b      	lsls	r3, r3, #6
 8005a76:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d03d      	beq.n	8005af8 <SPI_WaitOnFlagUntilTimeout+0xd0>
          {
            SPI_RESET_CRC(hspi);
          }

          hspi->State= HAL_SPI_STATE_READY;
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	2351      	movs	r3, #81	; 0x51
 8005a80:	54f2      	strb	r2, [r6, r3]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005a82:	2200      	movs	r2, #0
 8005a84:	3b01      	subs	r3, #1
 8005a86:	54f2      	strb	r2, [r6, r3]

          return HAL_TIMEOUT;
 8005a88:	2003      	movs	r0, #3
 8005a8a:	e032      	b.n	8005af2 <SPI_WaitOnFlagUntilTimeout+0xca>
            SPI_RESET_CRC(hspi);
 8005a8c:	6832      	ldr	r2, [r6, #0]
 8005a8e:	6813      	ldr	r3, [r2, #0]
 8005a90:	4920      	ldr	r1, [pc, #128]	; (8005b14 <SPI_WaitOnFlagUntilTimeout+0xec>)
 8005a92:	400b      	ands	r3, r1
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	6832      	ldr	r2, [r6, #0]
 8005a98:	6811      	ldr	r1, [r2, #0]
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	e01d      	b.n	8005ae0 <SPI_WaitOnFlagUntilTimeout+0xb8>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8005aa4:	6833      	ldr	r3, [r6, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	4023      	ands	r3, r4
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d020      	beq.n	8005af0 <SPI_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8005aae:	1c6b      	adds	r3, r5, #1
 8005ab0:	d0f8      	beq.n	8005aa4 <SPI_WaitOnFlagUntilTimeout+0x7c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005ab2:	2d00      	cmp	r5, #0
 8005ab4:	d005      	beq.n	8005ac2 <SPI_WaitOnFlagUntilTimeout+0x9a>
 8005ab6:	f7fe fa6f 	bl	8003f98 <HAL_GetTick>
 8005aba:	4643      	mov	r3, r8
 8005abc:	1ac0      	subs	r0, r0, r3
 8005abe:	4285      	cmp	r5, r0
 8005ac0:	d2f0      	bcs.n	8005aa4 <SPI_WaitOnFlagUntilTimeout+0x7c>
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac2:	6832      	ldr	r2, [r6, #0]
 8005ac4:	6853      	ldr	r3, [r2, #4]
 8005ac6:	21e0      	movs	r1, #224	; 0xe0
 8005ac8:	438b      	bics	r3, r1
 8005aca:	6053      	str	r3, [r2, #4]
          __HAL_SPI_DISABLE(hspi);
 8005acc:	6832      	ldr	r2, [r6, #0]
 8005ace:	6813      	ldr	r3, [r2, #0]
 8005ad0:	39a0      	subs	r1, #160	; 0xa0
 8005ad2:	438b      	bics	r3, r1
 8005ad4:	6013      	str	r3, [r2, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ad6:	2380      	movs	r3, #128	; 0x80
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d0d5      	beq.n	8005a8c <SPI_WaitOnFlagUntilTimeout+0x64>
          hspi->State= HAL_SPI_STATE_READY;
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	2351      	movs	r3, #81	; 0x51
 8005ae4:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hspi);
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8005aec:	2003      	movs	r0, #3
 8005aee:	e000      	b.n	8005af2 <SPI_WaitOnFlagUntilTimeout+0xca>
        }
      }
    }
  }
  return HAL_OK;
 8005af0:	2000      	movs	r0, #0
}
 8005af2:	bc04      	pop	{r2}
 8005af4:	4690      	mov	r8, r2
 8005af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SPI_RESET_CRC(hspi);
 8005af8:	6832      	ldr	r2, [r6, #0]
 8005afa:	6813      	ldr	r3, [r2, #0]
 8005afc:	4905      	ldr	r1, [pc, #20]	; (8005b14 <SPI_WaitOnFlagUntilTimeout+0xec>)
 8005afe:	400b      	ands	r3, r1
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	6832      	ldr	r2, [r6, #0]
 8005b04:	6811      	ldr	r1, [r2, #0]
 8005b06:	2380      	movs	r3, #128	; 0x80
 8005b08:	019b      	lsls	r3, r3, #6
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e7b5      	b.n	8005a7c <SPI_WaitOnFlagUntilTimeout+0x54>
  return HAL_OK;
 8005b10:	2000      	movs	r0, #0
 8005b12:	e7ee      	b.n	8005af2 <SPI_WaitOnFlagUntilTimeout+0xca>
 8005b14:	ffffdfff 	.word	0xffffdfff

08005b18 <HAL_SPI_MspInit>:
}
 8005b18:	4770      	bx	lr
	...

08005b1c <HAL_SPI_Init>:
{
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	1e04      	subs	r4, r0, #0
  if(hspi == NULL)
 8005b20:	d03c      	beq.n	8005b9c <HAL_SPI_Init+0x80>
  if(hspi->State == HAL_SPI_STATE_RESET)
 8005b22:	2351      	movs	r3, #81	; 0x51
 8005b24:	5cc3      	ldrb	r3, [r0, r3]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d032      	beq.n	8005b90 <HAL_SPI_Init+0x74>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005b2a:	2151      	movs	r1, #81	; 0x51
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	5463      	strb	r3, [r4, r1]
  __HAL_SPI_DISABLE(hspi);
 8005b30:	6822      	ldr	r2, [r4, #0]
 8005b32:	6813      	ldr	r3, [r2, #0]
 8005b34:	2040      	movs	r0, #64	; 0x40
 8005b36:	4383      	bics	r3, r0
 8005b38:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	68a0      	ldr	r0, [r4, #8]
 8005b40:	4303      	orrs	r3, r0
 8005b42:	68e0      	ldr	r0, [r4, #12]
 8005b44:	4303      	orrs	r3, r0
 8005b46:	6920      	ldr	r0, [r4, #16]
 8005b48:	4303      	orrs	r3, r0
 8005b4a:	6960      	ldr	r0, [r4, #20]
 8005b4c:	4303      	orrs	r3, r0
 8005b4e:	2080      	movs	r0, #128	; 0x80
 8005b50:	0080      	lsls	r0, r0, #2
 8005b52:	69a5      	ldr	r5, [r4, #24]
 8005b54:	4028      	ands	r0, r5
 8005b56:	4303      	orrs	r3, r0
 8005b58:	69e0      	ldr	r0, [r4, #28]
 8005b5a:	4303      	orrs	r3, r0
 8005b5c:	6a20      	ldr	r0, [r4, #32]
 8005b5e:	4303      	orrs	r3, r0
 8005b60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b62:	4303      	orrs	r3, r0
 8005b64:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	8b60      	ldrh	r0, [r4, #26]
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	4003      	ands	r3, r0
 8005b6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b70:	4303      	orrs	r3, r0
 8005b72:	6053      	str	r3, [r2, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	69d3      	ldr	r3, [r2, #28]
 8005b7e:	4808      	ldr	r0, [pc, #32]	; (8005ba0 <HAL_SPI_Init+0x84>)
 8005b80:	4003      	ands	r3, r0
 8005b82:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005b88:	3301      	adds	r3, #1
 8005b8a:	5463      	strb	r3, [r4, r1]
  return HAL_OK;
 8005b8c:	2000      	movs	r0, #0
}
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005b90:	2200      	movs	r2, #0
 8005b92:	3350      	adds	r3, #80	; 0x50
 8005b94:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8005b96:	f7ff ffbf 	bl	8005b18 <HAL_SPI_MspInit>
 8005b9a:	e7c6      	b.n	8005b2a <HAL_SPI_Init+0xe>
    return HAL_ERROR;
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	e7f6      	b.n	8005b8e <HAL_SPI_Init+0x72>
 8005ba0:	fffff7ff 	.word	0xfffff7ff

08005ba4 <HAL_SPI_MspDeInit>:
}
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_SPI_DeInit>:
{
 8005ba6:	b570      	push	{r4, r5, r6, lr}
 8005ba8:	1e04      	subs	r4, r0, #0
  if(hspi == NULL)
 8005baa:	d010      	beq.n	8005bce <HAL_SPI_DeInit+0x28>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005bac:	2551      	movs	r5, #81	; 0x51
 8005bae:	2302      	movs	r3, #2
 8005bb0:	5543      	strb	r3, [r0, r5]
  __HAL_SPI_DISABLE(hspi);
 8005bb2:	6802      	ldr	r2, [r0, #0]
 8005bb4:	6813      	ldr	r3, [r2, #0]
 8005bb6:	2140      	movs	r1, #64	; 0x40
 8005bb8:	438b      	bics	r3, r1
 8005bba:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8005bbc:	f7ff fff2 	bl	8005ba4 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005bc4:	5563      	strb	r3, [r4, r5]
  __HAL_UNLOCK(hspi);
 8005bc6:	2250      	movs	r2, #80	; 0x50
 8005bc8:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005bca:	2000      	movs	r0, #0
}
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005bce:	2001      	movs	r0, #1
 8005bd0:	e7fc      	b.n	8005bcc <HAL_SPI_DeInit+0x26>
	...

08005bd4 <HAL_SPI_TransmitReceive>:
{
 8005bd4:	b530      	push	{r4, r5, lr}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 8005bda:	2500      	movs	r5, #0
 8005bdc:	4668      	mov	r0, sp
 8005bde:	80c5      	strh	r5, [r0, #6]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8005be0:	2051      	movs	r0, #81	; 0x51
 8005be2:	5c20      	ldrb	r0, [r4, r0]
 8005be4:	2801      	cmp	r0, #1
 8005be6:	d006      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0x22>
 8005be8:	2051      	movs	r0, #81	; 0x51
 8005bea:	5c20      	ldrb	r0, [r4, r0]
 8005bec:	2822      	cmp	r0, #34	; 0x22
 8005bee:	d002      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0x22>
    return HAL_BUSY;
 8005bf0:	2002      	movs	r0, #2
}
 8005bf2:	b003      	add	sp, #12
 8005bf4:	bd30      	pop	{r4, r5, pc}
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8005bf6:	2900      	cmp	r1, #0
 8005bf8:	d100      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x28>
 8005bfa:	e1a4      	b.n	8005f46 <HAL_SPI_TransmitReceive+0x372>
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	d100      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x2e>
 8005c00:	e1a3      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x376>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d100      	bne.n	8005c08 <HAL_SPI_TransmitReceive+0x34>
 8005c06:	e1a2      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x37a>
    __HAL_LOCK(hspi);
 8005c08:	2050      	movs	r0, #80	; 0x50
 8005c0a:	5c20      	ldrb	r0, [r4, r0]
 8005c0c:	2801      	cmp	r0, #1
 8005c0e:	d100      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x3e>
 8005c10:	e19f      	b.n	8005f52 <HAL_SPI_TransmitReceive+0x37e>
 8005c12:	2501      	movs	r5, #1
 8005c14:	2050      	movs	r0, #80	; 0x50
 8005c16:	5425      	strb	r5, [r4, r0]
    if(hspi->State == HAL_SPI_STATE_READY)
 8005c18:	3001      	adds	r0, #1
 8005c1a:	5c20      	ldrb	r0, [r4, r0]
 8005c1c:	2801      	cmp	r0, #1
 8005c1e:	d046      	beq.n	8005cae <HAL_SPI_TransmitReceive+0xda>
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c20:	2000      	movs	r0, #0
 8005c22:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->pRxBuffPtr  = pRxData;
 8005c24:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8005c26:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8005c28:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->pTxBuffPtr  = pTxData;
 8005c2a:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8005c2c:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8005c2e:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxISR = 0U;
 8005c30:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 8005c32:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	019b      	lsls	r3, r3, #6
 8005c38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d03b      	beq.n	8005cb6 <HAL_SPI_TransmitReceive+0xe2>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	0652      	lsls	r2, r2, #25
 8005c44:	d403      	bmi.n	8005c4e <HAL_SPI_TransmitReceive+0x7a>
      __HAL_SPI_ENABLE(hspi);
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	2140      	movs	r1, #64	; 0x40
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	68e2      	ldr	r2, [r4, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d03a      	beq.n	8005cce <HAL_SPI_TransmitReceive+0xfa>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8005c58:	6863      	ldr	r3, [r4, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <HAL_SPI_TransmitReceive+0x9a>
 8005c5e:	2282      	movs	r2, #130	; 0x82
 8005c60:	0052      	lsls	r2, r2, #1
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d10d      	bne.n	8005c82 <HAL_SPI_TransmitReceive+0xae>
 8005c66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d109      	bne.n	8005c82 <HAL_SPI_TransmitReceive+0xae>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c72:	1c59      	adds	r1, r3, #1
 8005c74:	6321      	str	r1, [r4, #48]	; 0x30
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005c7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 8005c82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d000      	beq.n	8005c8c <HAL_SPI_TransmitReceive+0xb8>
 8005c8a:	e0e6      	b.n	8005e5a <HAL_SPI_TransmitReceive+0x286>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	019b      	lsls	r3, r3, #6
 8005c90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d100      	bne.n	8005c98 <HAL_SPI_TransmitReceive+0xc4>
 8005c96:	e0ab      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x21c>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005c98:	9b06      	ldr	r3, [sp, #24]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	f7ff fec2 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d100      	bne.n	8005caa <HAL_SPI_TransmitReceive+0xd6>
 8005ca8:	e0a9      	b.n	8005dfe <HAL_SPI_TransmitReceive+0x22a>
          return HAL_TIMEOUT;
 8005caa:	2003      	movs	r0, #3
 8005cac:	e7a1      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cae:	3531      	adds	r5, #49	; 0x31
 8005cb0:	3050      	adds	r0, #80	; 0x50
 8005cb2:	5425      	strb	r5, [r4, r0]
 8005cb4:	e7b4      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x4c>
      SPI_RESET_CRC(hspi);
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	6813      	ldr	r3, [r2, #0]
 8005cba:	49ab      	ldr	r1, [pc, #684]	; (8005f68 <HAL_SPI_TransmitReceive+0x394>)
 8005cbc:	400b      	ands	r3, r1
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	6811      	ldr	r1, [r2, #0]
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	019b      	lsls	r3, r3, #6
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	e7b7      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x6a>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <HAL_SPI_TransmitReceive+0x110>
 8005cd4:	2282      	movs	r2, #130	; 0x82
 8005cd6:	0052      	lsls	r2, r2, #1
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d10e      	bne.n	8005cfa <HAL_SPI_TransmitReceive+0x126>
 8005cdc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d10a      	bne.n	8005cfa <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005ce8:	8812      	ldrh	r2, [r2, #0]
 8005cea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8005cec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005cee:	3302      	adds	r3, #2
 8005cf0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005cf2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 8005cfa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d135      	bne.n	8005d6e <HAL_SPI_TransmitReceive+0x19a>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	019b      	lsls	r3, r3, #6
 8005d06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d009      	beq.n	8005d20 <HAL_SPI_TransmitReceive+0x14c>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005d0c:	9b06      	ldr	r3, [sp, #24]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2101      	movs	r1, #1
 8005d12:	0020      	movs	r0, r4
 8005d14:	f7ff fe88 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x15a>
          return HAL_TIMEOUT;
 8005d1c:	2003      	movs	r0, #3
 8005d1e:	e768      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005d20:	6822      	ldr	r2, [r4, #0]
 8005d22:	6811      	ldr	r1, [r2, #0]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	015b      	lsls	r3, r3, #5
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	e7ee      	b.n	8005d0c <HAL_SPI_TransmitReceive+0x138>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d34:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr+=2U;
 8005d36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d38:	3302      	adds	r3, #2
 8005d3a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005d3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005d44:	e063      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x23a>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005d46:	9b06      	ldr	r3, [sp, #24]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	0020      	movs	r0, r4
 8005d4e:	f7ff fe6b 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d000      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x184>
 8005d56:	e100      	b.n	8005f5a <HAL_SPI_TransmitReceive+0x386>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d5e:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8005d60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d62:	3302      	adds	r3, #2
 8005d64:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8005d66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8005d6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d023      	beq.n	8005dbe <HAL_SPI_TransmitReceive+0x1ea>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005d76:	9b06      	ldr	r3, [sp, #24]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2102      	movs	r1, #2
 8005d7c:	0020      	movs	r0, r4
 8005d7e:	f7ff fe53 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d000      	beq.n	8005d88 <HAL_SPI_TransmitReceive+0x1b4>
 8005d86:	e0e6      	b.n	8005f56 <HAL_SPI_TransmitReceive+0x382>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d8c:	8812      	ldrh	r2, [r2, #0]
 8005d8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2U;
 8005d90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d92:	3302      	adds	r3, #2
 8005d94:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8005d96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005d9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1cf      	bne.n	8005d46 <HAL_SPI_TransmitReceive+0x172>
 8005da6:	2380      	movs	r3, #128	; 0x80
 8005da8:	019b      	lsls	r3, r3, #6
 8005daa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1ca      	bne.n	8005d46 <HAL_SPI_TransmitReceive+0x172>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	6811      	ldr	r1, [r2, #0]
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	015b      	lsls	r3, r3, #5
 8005db8:	430b      	orrs	r3, r1
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e7c3      	b.n	8005d46 <HAL_SPI_TransmitReceive+0x172>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8005dbe:	6863      	ldr	r3, [r4, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d124      	bne.n	8005e0e <HAL_SPI_TransmitReceive+0x23a>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005dc4:	9b06      	ldr	r3, [sp, #24]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2101      	movs	r1, #1
 8005dca:	0020      	movs	r0, r4
 8005dcc:	f7ff fe2c 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_SPI_TransmitReceive+0x204>
            return HAL_TIMEOUT;
 8005dd4:	2003      	movs	r0, #3
 8005dd6:	e70c      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005dde:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8005de0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005de2:	3302      	adds	r3, #2
 8005de4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8005de6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005dee:	e00e      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x23a>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	6811      	ldr	r1, [r2, #0]
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	015b      	lsls	r3, r3, #5
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	e74c      	b.n	8005c98 <HAL_SPI_TransmitReceive+0xc4>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e04:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8005e06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e0e:	2380      	movs	r3, #128	; 0x80
 8005e10:	019b      	lsls	r3, r3, #6
 8005e12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d05e      	beq.n	8005ed6 <HAL_SPI_TransmitReceive+0x302>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8005e18:	9b06      	ldr	r3, [sp, #24]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	2180      	movs	r1, #128	; 0x80
 8005e1e:	0020      	movs	r0, r4
 8005e20:	f7ff fe02 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d06b      	beq.n	8005f00 <HAL_SPI_TransmitReceive+0x32c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e30:	2003      	movs	r0, #3
 8005e32:	e6de      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005e34:	9b06      	ldr	r3, [sp, #24]
 8005e36:	2200      	movs	r2, #0
 8005e38:	2101      	movs	r1, #1
 8005e3a:	0020      	movs	r0, r4
 8005e3c:	f7ff fdf4 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d000      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x272>
 8005e44:	e08d      	b.n	8005f62 <HAL_SPI_TransmitReceive+0x38e>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8005e46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	63a2      	str	r2, [r4, #56]	; 0x38
 8005e4c:	6822      	ldr	r2, [r4, #0]
 8005e4e:	68d2      	ldr	r2, [r2, #12]
 8005e50:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8005e52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8005e5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d021      	beq.n	8005ea6 <HAL_SPI_TransmitReceive+0x2d2>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005e62:	9b06      	ldr	r3, [sp, #24]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2102      	movs	r1, #2
 8005e68:	0020      	movs	r0, r4
 8005e6a:	f7ff fddd 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d175      	bne.n	8005f5e <HAL_SPI_TransmitReceive+0x38a>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	6321      	str	r1, [r4, #48]	; 0x30
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8005e7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005e86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1d2      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x260>
 8005e8e:	2380      	movs	r3, #128	; 0x80
 8005e90:	019b      	lsls	r3, r3, #6
 8005e92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d1cd      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x260>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	6811      	ldr	r1, [r2, #0]
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	015b      	lsls	r3, r3, #5
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	e7c6      	b.n	8005e34 <HAL_SPI_TransmitReceive+0x260>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8005ea6:	6863      	ldr	r3, [r4, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1b0      	bne.n	8005e0e <HAL_SPI_TransmitReceive+0x23a>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005eac:	9b06      	ldr	r3, [sp, #24]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	f7ff fdb8 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d001      	beq.n	8005ec0 <HAL_SPI_TransmitReceive+0x2ec>
            return HAL_TIMEOUT;
 8005ebc:	2003      	movs	r0, #3
 8005ebe:	e698      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8005ec0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	63a2      	str	r2, [r4, #56]	; 0x38
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	68d2      	ldr	r2, [r2, #12]
 8005eca:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8005ecc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005ed4:	e79b      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x23a>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005ed6:	9b06      	ldr	r3, [sp, #24]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2101      	movs	r1, #1
 8005edc:	0020      	movs	r0, r4
 8005ede:	f7ff fda3 	bl	8005a28 <SPI_WaitOnFlagUntilTimeout>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_SPI_TransmitReceive+0x31e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005ee6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ee8:	2202      	movs	r2, #2
 8005eea:	4313      	orrs	r3, r2
 8005eec:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8005eee:	2003      	movs	r0, #3
 8005ef0:	e67f      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
      tmpreg = hspi->Instance->DR;
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	466a      	mov	r2, sp
 8005efa:	80d3      	strh	r3, [r2, #6]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8005efc:	88d3      	ldrh	r3, [r2, #6]
 8005efe:	e78b      	b.n	8005e18 <HAL_SPI_TransmitReceive+0x244>
    hspi->State = HAL_SPI_STATE_READY;
 8005f00:	2201      	movs	r2, #1
 8005f02:	2351      	movs	r3, #81	; 0x51
 8005f04:	54e2      	strb	r2, [r4, r3]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	019b      	lsls	r3, r3, #6
 8005f0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d003      	beq.n	8005f18 <HAL_SPI_TransmitReceive+0x344>
    __HAL_UNLOCK(hspi);
 8005f10:	2200      	movs	r2, #0
 8005f12:	2350      	movs	r3, #80	; 0x50
 8005f14:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8005f16:	e66c      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	06d2      	lsls	r2, r2, #27
 8005f1e:	d5f7      	bpl.n	8005f10 <HAL_SPI_TransmitReceive+0x33c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f22:	2102      	movs	r1, #2
 8005f24:	430a      	orrs	r2, r1
 8005f26:	6562      	str	r2, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	490f      	ldr	r1, [pc, #60]	; (8005f68 <HAL_SPI_TransmitReceive+0x394>)
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	6811      	ldr	r1, [r2, #0]
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	019b      	lsls	r3, r3, #6
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hspi);
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2350      	movs	r3, #80	; 0x50
 8005f40:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR; 
 8005f42:	2001      	movs	r0, #1
 8005f44:	e655      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
      return  HAL_ERROR;
 8005f46:	2001      	movs	r0, #1
 8005f48:	e653      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	e651      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
 8005f4e:	2001      	movs	r0, #1
 8005f50:	e64f      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
    __HAL_LOCK(hspi);
 8005f52:	2002      	movs	r0, #2
 8005f54:	e64d      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
            return HAL_TIMEOUT;
 8005f56:	2003      	movs	r0, #3
 8005f58:	e64b      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
            return HAL_TIMEOUT;
 8005f5a:	2003      	movs	r0, #3
 8005f5c:	e649      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
            return HAL_TIMEOUT;
 8005f5e:	2003      	movs	r0, #3
 8005f60:	e647      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
            return HAL_TIMEOUT;
 8005f62:	2003      	movs	r0, #3
 8005f64:	e645      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x1e>
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	ffffdfff 	.word	0xffffdfff

08005f6c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005f70:	d018      	beq.n	8005fa4 <HAL_UART_DeInit+0x38>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005f72:	2669      	movs	r6, #105	; 0x69
 8005f74:	2324      	movs	r3, #36	; 0x24
 8005f76:	5583      	strb	r3, [r0, r6]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005f78:	6802      	ldr	r2, [r0, #0]
 8005f7a:	6813      	ldr	r3, [r2, #0]
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	438b      	bics	r3, r1
 8005f80:	6013      	str	r3, [r2, #0]

  huart->Instance->CR1 = 0x0U;
 8005f82:	6803      	ldr	r3, [r0, #0]
 8005f84:	2500      	movs	r5, #0
 8005f86:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005f88:	6803      	ldr	r3, [r0, #0]
 8005f8a:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005f8c:	6803      	ldr	r3, [r0, #0]
 8005f8e:	609d      	str	r5, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005f90:	f001 ff66 	bl	8007e60 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f94:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 8005f96:	55a5      	strb	r5, [r4, r6]
  huart->RxState   = HAL_UART_STATE_RESET;
 8005f98:	236a      	movs	r3, #106	; 0x6a
 8005f9a:	54e5      	strb	r5, [r4, r3]

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005f9c:	3b02      	subs	r3, #2
 8005f9e:	54e5      	strb	r5, [r4, r3]

  return HAL_OK;
 8005fa0:	2000      	movs	r0, #0
}
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	e7fc      	b.n	8005fa2 <HAL_UART_DeInit+0x36>

08005fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	0005      	movs	r5, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8005fac:	6801      	ldr	r1, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fae:	6883      	ldr	r3, [r0, #8]
 8005fb0:	6902      	ldr	r2, [r0, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	6942      	ldr	r2, [r0, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	69c2      	ldr	r2, [r0, #28]
 8005fba:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005fbc:	680a      	ldr	r2, [r1, #0]
 8005fbe:	48bc      	ldr	r0, [pc, #752]	; (80062b0 <UART_SetConfig+0x308>)
 8005fc0:	4002      	ands	r2, r0
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc6:	682a      	ldr	r2, [r5, #0]
 8005fc8:	6853      	ldr	r3, [r2, #4]
 8005fca:	49ba      	ldr	r1, [pc, #744]	; (80062b4 <UART_SetConfig+0x30c>)
 8005fcc:	400b      	ands	r3, r1
 8005fce:	68e9      	ldr	r1, [r5, #12]
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fd4:	69ab      	ldr	r3, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fd6:	682a      	ldr	r2, [r5, #0]
 8005fd8:	49b7      	ldr	r1, [pc, #732]	; (80062b8 <UART_SetConfig+0x310>)
 8005fda:	428a      	cmp	r2, r1
 8005fdc:	d001      	beq.n	8005fe2 <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fde:	6a29      	ldr	r1, [r5, #32]
 8005fe0:	430b      	orrs	r3, r1
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005fe2:	6891      	ldr	r1, [r2, #8]
 8005fe4:	48b5      	ldr	r0, [pc, #724]	; (80062bc <UART_SetConfig+0x314>)
 8005fe6:	4001      	ands	r1, r0
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	4ab4      	ldr	r2, [pc, #720]	; (80062c0 <UART_SetConfig+0x318>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d020      	beq.n	8006036 <UART_SetConfig+0x8e>
 8005ff4:	4ab3      	ldr	r2, [pc, #716]	; (80062c4 <UART_SetConfig+0x31c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d031      	beq.n	800605e <UART_SetConfig+0xb6>
 8005ffa:	4ab3      	ldr	r2, [pc, #716]	; (80062c8 <UART_SetConfig+0x320>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d063      	beq.n	80060c8 <UART_SetConfig+0x120>
 8006000:	4ab2      	ldr	r2, [pc, #712]	; (80062cc <UART_SetConfig+0x324>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d062      	beq.n	80060cc <UART_SetConfig+0x124>
 8006006:	4aac      	ldr	r2, [pc, #688]	; (80062b8 <UART_SetConfig+0x310>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d03d      	beq.n	8006088 <UART_SetConfig+0xe0>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800600c:	2410      	movs	r4, #16
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800600e:	2002      	movs	r0, #2
 8006010:	f7ff f810 	bl	8005034 <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8006014:	682e      	ldr	r6, [r5, #0]
 8006016:	4ba8      	ldr	r3, [pc, #672]	; (80062b8 <UART_SetConfig+0x310>)
 8006018:	429e      	cmp	r6, r3
 800601a:	d05b      	beq.n	80060d4 <UART_SetConfig+0x12c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800601c:	2380      	movs	r3, #128	; 0x80
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	69ea      	ldr	r2, [r5, #28]
 8006022:	429a      	cmp	r2, r3
 8006024:	d100      	bne.n	8006028 <UART_SetConfig+0x80>
 8006026:	e094      	b.n	8006152 <UART_SetConfig+0x1aa>
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8006028:	2c08      	cmp	r4, #8
 800602a:	d900      	bls.n	800602e <UART_SetConfig+0x86>
 800602c:	e162      	b.n	80062f4 <UART_SetConfig+0x34c>
 800602e:	00a4      	lsls	r4, r4, #2
 8006030:	4ba7      	ldr	r3, [pc, #668]	; (80062d0 <UART_SetConfig+0x328>)
 8006032:	591b      	ldr	r3, [r3, r4]
 8006034:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006036:	4ba7      	ldr	r3, [pc, #668]	; (80062d4 <UART_SetConfig+0x32c>)
 8006038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800603a:	2303      	movs	r3, #3
 800603c:	4013      	ands	r3, r2
 800603e:	2b01      	cmp	r3, #1
 8006040:	d009      	beq.n	8006056 <UART_SetConfig+0xae>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <UART_SetConfig+0xaa>
 8006046:	2b02      	cmp	r3, #2
 8006048:	d03a      	beq.n	80060c0 <UART_SetConfig+0x118>
 800604a:	2b03      	cmp	r3, #3
 800604c:	d005      	beq.n	800605a <UART_SetConfig+0xb2>
 800604e:	2410      	movs	r4, #16
 8006050:	e7dd      	b.n	800600e <UART_SetConfig+0x66>
 8006052:	2401      	movs	r4, #1
 8006054:	e7db      	b.n	800600e <UART_SetConfig+0x66>
 8006056:	2404      	movs	r4, #4
 8006058:	e7d9      	b.n	800600e <UART_SetConfig+0x66>
 800605a:	2408      	movs	r4, #8
 800605c:	e7d7      	b.n	800600e <UART_SetConfig+0x66>
 800605e:	4b9d      	ldr	r3, [pc, #628]	; (80062d4 <UART_SetConfig+0x32c>)
 8006060:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006062:	230c      	movs	r3, #12
 8006064:	4013      	ands	r3, r2
 8006066:	2b04      	cmp	r3, #4
 8006068:	d00a      	beq.n	8006080 <UART_SetConfig+0xd8>
 800606a:	d905      	bls.n	8006078 <UART_SetConfig+0xd0>
 800606c:	2b08      	cmp	r3, #8
 800606e:	d029      	beq.n	80060c4 <UART_SetConfig+0x11c>
 8006070:	2b0c      	cmp	r3, #12
 8006072:	d107      	bne.n	8006084 <UART_SetConfig+0xdc>
 8006074:	2408      	movs	r4, #8
 8006076:	e7ca      	b.n	800600e <UART_SetConfig+0x66>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <UART_SetConfig+0xdc>
 800607c:	2400      	movs	r4, #0
 800607e:	e7c6      	b.n	800600e <UART_SetConfig+0x66>
 8006080:	2404      	movs	r4, #4
 8006082:	e7c4      	b.n	800600e <UART_SetConfig+0x66>
 8006084:	2410      	movs	r4, #16
 8006086:	e7c2      	b.n	800600e <UART_SetConfig+0x66>
 8006088:	4b92      	ldr	r3, [pc, #584]	; (80062d4 <UART_SetConfig+0x32c>)
 800608a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608c:	22c0      	movs	r2, #192	; 0xc0
 800608e:	0112      	lsls	r2, r2, #4
 8006090:	4013      	ands	r3, r2
 8006092:	2280      	movs	r2, #128	; 0x80
 8006094:	00d2      	lsls	r2, r2, #3
 8006096:	4293      	cmp	r3, r2
 8006098:	d00e      	beq.n	80060b8 <UART_SetConfig+0x110>
 800609a:	d909      	bls.n	80060b0 <UART_SetConfig+0x108>
 800609c:	2280      	movs	r2, #128	; 0x80
 800609e:	0112      	lsls	r2, r2, #4
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d015      	beq.n	80060d0 <UART_SetConfig+0x128>
 80060a4:	22c0      	movs	r2, #192	; 0xc0
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d107      	bne.n	80060bc <UART_SetConfig+0x114>
 80060ac:	2408      	movs	r4, #8
 80060ae:	e7ae      	b.n	800600e <UART_SetConfig+0x66>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <UART_SetConfig+0x114>
 80060b4:	2400      	movs	r4, #0
 80060b6:	e7aa      	b.n	800600e <UART_SetConfig+0x66>
 80060b8:	2404      	movs	r4, #4
 80060ba:	e7a8      	b.n	800600e <UART_SetConfig+0x66>
 80060bc:	2410      	movs	r4, #16
 80060be:	e7a6      	b.n	800600e <UART_SetConfig+0x66>
 80060c0:	2402      	movs	r4, #2
 80060c2:	e7a4      	b.n	800600e <UART_SetConfig+0x66>
 80060c4:	2402      	movs	r4, #2
 80060c6:	e7a2      	b.n	800600e <UART_SetConfig+0x66>
 80060c8:	2400      	movs	r4, #0
 80060ca:	e7a0      	b.n	800600e <UART_SetConfig+0x66>
 80060cc:	2400      	movs	r4, #0
 80060ce:	e79e      	b.n	800600e <UART_SetConfig+0x66>
 80060d0:	2402      	movs	r4, #2
 80060d2:	e79c      	b.n	800600e <UART_SetConfig+0x66>
    switch (clocksource)
 80060d4:	2c02      	cmp	r4, #2
 80060d6:	d02b      	beq.n	8006130 <UART_SetConfig+0x188>
 80060d8:	d924      	bls.n	8006124 <UART_SetConfig+0x17c>
 80060da:	2c04      	cmp	r4, #4
 80060dc:	d02f      	beq.n	800613e <UART_SetConfig+0x196>
 80060de:	2c08      	cmp	r4, #8
 80060e0:	d131      	bne.n	8006146 <UART_SetConfig+0x19e>
  HAL_StatusTypeDef ret               = HAL_OK;
 80060e2:	2400      	movs	r4, #0
      tmpreg = (uint32_t) LSE_VALUE;
 80060e4:	2080      	movs	r0, #128	; 0x80
 80060e6:	0200      	lsls	r0, r0, #8
    if (tmpreg != 0)
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d04b      	beq.n	8006184 <UART_SetConfig+0x1dc>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80060ec:	686a      	ldr	r2, [r5, #4]
 80060ee:	0053      	lsls	r3, r2, #1
 80060f0:	189b      	adds	r3, r3, r2
 80060f2:	4298      	cmp	r0, r3
 80060f4:	d200      	bcs.n	80060f8 <UART_SetConfig+0x150>
 80060f6:	e0d5      	b.n	80062a4 <UART_SetConfig+0x2fc>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 80060f8:	0313      	lsls	r3, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80060fa:	4298      	cmp	r0, r3
 80060fc:	d900      	bls.n	8006100 <UART_SetConfig+0x158>
 80060fe:	e0d3      	b.n	80062a8 <UART_SetConfig+0x300>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8006100:	0e07      	lsrs	r7, r0, #24
 8006102:	0206      	lsls	r6, r0, #8
 8006104:	0850      	lsrs	r0, r2, #1
 8006106:	2100      	movs	r1, #0
 8006108:	1980      	adds	r0, r0, r6
 800610a:	4179      	adcs	r1, r7
 800610c:	2300      	movs	r3, #0
 800610e:	f7fa f9c1 	bl	8000494 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8006112:	4b71      	ldr	r3, [pc, #452]	; (80062d8 <UART_SetConfig+0x330>)
 8006114:	18c2      	adds	r2, r0, r3
 8006116:	4b71      	ldr	r3, [pc, #452]	; (80062dc <UART_SetConfig+0x334>)
 8006118:	429a      	cmp	r2, r3
 800611a:	d900      	bls.n	800611e <UART_SetConfig+0x176>
 800611c:	e0c6      	b.n	80062ac <UART_SetConfig+0x304>
           huart->Instance->BRR = tmpreg;
 800611e:	682b      	ldr	r3, [r5, #0]
 8006120:	60d8      	str	r0, [r3, #12]
 8006122:	e02f      	b.n	8006184 <UART_SetConfig+0x1dc>
    switch (clocksource)
 8006124:	2c00      	cmp	r4, #0
 8006126:	d10e      	bne.n	8006146 <UART_SetConfig+0x19e>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8006128:	f7fe fe70 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 800612c:	2400      	movs	r4, #0
      break;
 800612e:	e7db      	b.n	80060e8 <UART_SetConfig+0x140>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006130:	4b68      	ldr	r3, [pc, #416]	; (80062d4 <UART_SetConfig+0x32c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	06db      	lsls	r3, r3, #27
 8006136:	d509      	bpl.n	800614c <UART_SetConfig+0x1a4>
  HAL_StatusTypeDef ret               = HAL_OK;
 8006138:	2400      	movs	r4, #0
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 800613a:	4869      	ldr	r0, [pc, #420]	; (80062e0 <UART_SetConfig+0x338>)
 800613c:	e7d4      	b.n	80060e8 <UART_SetConfig+0x140>
      tmpreg = HAL_RCC_GetSysClockFreq();
 800613e:	f7fe fd45 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8006142:	2400      	movs	r4, #0
      break;
 8006144:	e7d0      	b.n	80060e8 <UART_SetConfig+0x140>
        ret = HAL_ERROR;
 8006146:	2401      	movs	r4, #1
    tmpreg = 0;
 8006148:	2000      	movs	r0, #0
 800614a:	e7cd      	b.n	80060e8 <UART_SetConfig+0x140>
  HAL_StatusTypeDef ret               = HAL_OK;
 800614c:	2400      	movs	r4, #0
        tmpreg = (uint32_t) HSI_VALUE;
 800614e:	4865      	ldr	r0, [pc, #404]	; (80062e4 <UART_SetConfig+0x33c>)
 8006150:	e7ca      	b.n	80060e8 <UART_SetConfig+0x140>
    switch (clocksource)
 8006152:	2c08      	cmp	r4, #8
 8006154:	d856      	bhi.n	8006204 <UART_SetConfig+0x25c>
 8006156:	00a4      	lsls	r4, r4, #2
 8006158:	4b63      	ldr	r3, [pc, #396]	; (80062e8 <UART_SetConfig+0x340>)
 800615a:	591b      	ldr	r3, [r3, r4]
 800615c:	469f      	mov	pc, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 800615e:	0040      	lsls	r0, r0, #1
 8006160:	686b      	ldr	r3, [r5, #4]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	18c0      	adds	r0, r0, r3
 8006166:	6869      	ldr	r1, [r5, #4]
 8006168:	f7f9 ffe0 	bl	800012c <__udivsi3>
 800616c:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800616e:	2400      	movs	r4, #0
    brrtemp = usartdiv & 0xFFF0U;
 8006170:	230f      	movs	r3, #15
 8006172:	0002      	movs	r2, r0
 8006174:	439a      	bics	r2, r3
 8006176:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8006178:	1040      	asrs	r0, r0, #1
 800617a:	2207      	movs	r2, #7
 800617c:	4010      	ands	r0, r2
 800617e:	4318      	orrs	r0, r3
    huart->Instance->BRR = brrtemp;
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	60d8      	str	r0, [r3, #12]
    }
  }

  return ret;

}
 8006184:	0020      	movs	r0, r4
 8006186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006188:	f7fe fe50 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 800618c:	0040      	lsls	r0, r0, #1
 800618e:	686b      	ldr	r3, [r5, #4]
 8006190:	085b      	lsrs	r3, r3, #1
 8006192:	18c0      	adds	r0, r0, r3
 8006194:	6869      	ldr	r1, [r5, #4]
 8006196:	f7f9 ffc9 	bl	800012c <__udivsi3>
 800619a:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800619c:	2400      	movs	r4, #0
      break;
 800619e:	e7e7      	b.n	8006170 <UART_SetConfig+0x1c8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061a0:	4b4c      	ldr	r3, [pc, #304]	; (80062d4 <UART_SetConfig+0x32c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	06db      	lsls	r3, r3, #27
 80061a6:	d50a      	bpl.n	80061be <UART_SetConfig+0x216>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80061a8:	686b      	ldr	r3, [r5, #4]
 80061aa:	0858      	lsrs	r0, r3, #1
 80061ac:	4b4f      	ldr	r3, [pc, #316]	; (80062ec <UART_SetConfig+0x344>)
 80061ae:	469c      	mov	ip, r3
 80061b0:	4460      	add	r0, ip
 80061b2:	6869      	ldr	r1, [r5, #4]
 80061b4:	f7f9 ffba 	bl	800012c <__udivsi3>
 80061b8:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80061ba:	2400      	movs	r4, #0
 80061bc:	e7d8      	b.n	8006170 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 80061be:	686b      	ldr	r3, [r5, #4]
 80061c0:	0858      	lsrs	r0, r3, #1
 80061c2:	4b4b      	ldr	r3, [pc, #300]	; (80062f0 <UART_SetConfig+0x348>)
 80061c4:	469c      	mov	ip, r3
 80061c6:	4460      	add	r0, ip
 80061c8:	6869      	ldr	r1, [r5, #4]
 80061ca:	f7f9 ffaf 	bl	800012c <__udivsi3>
 80061ce:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d0:	2400      	movs	r4, #0
 80061d2:	e7cd      	b.n	8006170 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80061d4:	f7fe fcfa 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 80061d8:	0040      	lsls	r0, r0, #1
 80061da:	686b      	ldr	r3, [r5, #4]
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	18c0      	adds	r0, r0, r3
 80061e0:	6869      	ldr	r1, [r5, #4]
 80061e2:	f7f9 ffa3 	bl	800012c <__udivsi3>
 80061e6:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80061e8:	2400      	movs	r4, #0
      break;
 80061ea:	e7c1      	b.n	8006170 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80061ec:	686b      	ldr	r3, [r5, #4]
 80061ee:	0858      	lsrs	r0, r3, #1
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	025b      	lsls	r3, r3, #9
 80061f4:	469c      	mov	ip, r3
 80061f6:	4460      	add	r0, ip
 80061f8:	6869      	ldr	r1, [r5, #4]
 80061fa:	f7f9 ff97 	bl	800012c <__udivsi3>
 80061fe:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8006200:	2400      	movs	r4, #0
      break;
 8006202:	e7b5      	b.n	8006170 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
 8006204:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 8006206:	2000      	movs	r0, #0
 8006208:	e7b2      	b.n	8006170 <UART_SetConfig+0x1c8>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800620a:	f7fe fdff 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800620e:	6869      	ldr	r1, [r5, #4]
 8006210:	084b      	lsrs	r3, r1, #1
 8006212:	18c0      	adds	r0, r0, r3
 8006214:	f7f9 ff8a 	bl	800012c <__udivsi3>
 8006218:	0400      	lsls	r0, r0, #16
 800621a:	0c00      	lsrs	r0, r0, #16
 800621c:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800621e:	2400      	movs	r4, #0
      break;
 8006220:	e7b0      	b.n	8006184 <UART_SetConfig+0x1dc>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006222:	f7fe fe03 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8006226:	6869      	ldr	r1, [r5, #4]
 8006228:	084b      	lsrs	r3, r1, #1
 800622a:	18c0      	adds	r0, r0, r3
 800622c:	f7f9 ff7e 	bl	800012c <__udivsi3>
 8006230:	0400      	lsls	r0, r0, #16
 8006232:	0c00      	lsrs	r0, r0, #16
 8006234:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006236:	2400      	movs	r4, #0
      break;
 8006238:	e7a4      	b.n	8006184 <UART_SetConfig+0x1dc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800623a:	4b26      	ldr	r3, [pc, #152]	; (80062d4 <UART_SetConfig+0x32c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	06db      	lsls	r3, r3, #27
 8006240:	d50b      	bpl.n	800625a <UART_SetConfig+0x2b2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006242:	6869      	ldr	r1, [r5, #4]
 8006244:	0848      	lsrs	r0, r1, #1
 8006246:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <UART_SetConfig+0x338>)
 8006248:	469c      	mov	ip, r3
 800624a:	4460      	add	r0, ip
 800624c:	f7f9 ff6e 	bl	800012c <__udivsi3>
 8006250:	0400      	lsls	r0, r0, #16
 8006252:	0c00      	lsrs	r0, r0, #16
 8006254:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006256:	2400      	movs	r4, #0
 8006258:	e794      	b.n	8006184 <UART_SetConfig+0x1dc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800625a:	6869      	ldr	r1, [r5, #4]
 800625c:	0848      	lsrs	r0, r1, #1
 800625e:	4b21      	ldr	r3, [pc, #132]	; (80062e4 <UART_SetConfig+0x33c>)
 8006260:	469c      	mov	ip, r3
 8006262:	4460      	add	r0, ip
 8006264:	f7f9 ff62 	bl	800012c <__udivsi3>
 8006268:	0400      	lsls	r0, r0, #16
 800626a:	0c00      	lsrs	r0, r0, #16
 800626c:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800626e:	2400      	movs	r4, #0
 8006270:	e788      	b.n	8006184 <UART_SetConfig+0x1dc>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006272:	f7fe fcab 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8006276:	6869      	ldr	r1, [r5, #4]
 8006278:	084b      	lsrs	r3, r1, #1
 800627a:	18c0      	adds	r0, r0, r3
 800627c:	f7f9 ff56 	bl	800012c <__udivsi3>
 8006280:	0400      	lsls	r0, r0, #16
 8006282:	0c00      	lsrs	r0, r0, #16
 8006284:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006286:	2400      	movs	r4, #0
      break;
 8006288:	e77c      	b.n	8006184 <UART_SetConfig+0x1dc>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800628a:	6869      	ldr	r1, [r5, #4]
 800628c:	0848      	lsrs	r0, r1, #1
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	469c      	mov	ip, r3
 8006294:	4460      	add	r0, ip
 8006296:	f7f9 ff49 	bl	800012c <__udivsi3>
 800629a:	0400      	lsls	r0, r0, #16
 800629c:	0c00      	lsrs	r0, r0, #16
 800629e:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a0:	2400      	movs	r4, #0
      break;
 80062a2:	e76f      	b.n	8006184 <UART_SetConfig+0x1dc>
        ret = HAL_ERROR;
 80062a4:	2401      	movs	r4, #1
 80062a6:	e76d      	b.n	8006184 <UART_SetConfig+0x1dc>
 80062a8:	2401      	movs	r4, #1
 80062aa:	e76b      	b.n	8006184 <UART_SetConfig+0x1dc>
          ret = HAL_ERROR;
 80062ac:	2401      	movs	r4, #1
 80062ae:	e769      	b.n	8006184 <UART_SetConfig+0x1dc>
 80062b0:	efff69f3 	.word	0xefff69f3
 80062b4:	ffffcfff 	.word	0xffffcfff
 80062b8:	40004800 	.word	0x40004800
 80062bc:	fffff4ff 	.word	0xfffff4ff
 80062c0:	40013800 	.word	0x40013800
 80062c4:	40004400 	.word	0x40004400
 80062c8:	40004c00 	.word	0x40004c00
 80062cc:	40005000 	.word	0x40005000
 80062d0:	0800a468 	.word	0x0800a468
 80062d4:	40021000 	.word	0x40021000
 80062d8:	fffffd00 	.word	0xfffffd00
 80062dc:	000ffcff 	.word	0x000ffcff
 80062e0:	003d0900 	.word	0x003d0900
 80062e4:	00f42400 	.word	0x00f42400
 80062e8:	0800a48c 	.word	0x0800a48c
 80062ec:	007a1200 	.word	0x007a1200
 80062f0:	01e84800 	.word	0x01e84800
        ret = HAL_ERROR;
 80062f4:	2401      	movs	r4, #1
 80062f6:	e745      	b.n	8006184 <UART_SetConfig+0x1dc>

080062f8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80062fa:	07db      	lsls	r3, r3, #31
 80062fc:	d506      	bpl.n	800630c <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062fe:	6802      	ldr	r2, [r0, #0]
 8006300:	6853      	ldr	r3, [r2, #4]
 8006302:	492c      	ldr	r1, [pc, #176]	; (80063b4 <UART_AdvFeatureConfig+0xbc>)
 8006304:	400b      	ands	r3, r1
 8006306:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006308:	430b      	orrs	r3, r1
 800630a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800630c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800630e:	079b      	lsls	r3, r3, #30
 8006310:	d506      	bpl.n	8006320 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006312:	6802      	ldr	r2, [r0, #0]
 8006314:	6853      	ldr	r3, [r2, #4]
 8006316:	4928      	ldr	r1, [pc, #160]	; (80063b8 <UART_AdvFeatureConfig+0xc0>)
 8006318:	400b      	ands	r3, r1
 800631a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800631c:	430b      	orrs	r3, r1
 800631e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006320:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006322:	075b      	lsls	r3, r3, #29
 8006324:	d506      	bpl.n	8006334 <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006326:	6802      	ldr	r2, [r0, #0]
 8006328:	6853      	ldr	r3, [r2, #4]
 800632a:	4924      	ldr	r1, [pc, #144]	; (80063bc <UART_AdvFeatureConfig+0xc4>)
 800632c:	400b      	ands	r3, r1
 800632e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006330:	430b      	orrs	r3, r1
 8006332:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006334:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006336:	071b      	lsls	r3, r3, #28
 8006338:	d506      	bpl.n	8006348 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800633a:	6802      	ldr	r2, [r0, #0]
 800633c:	6853      	ldr	r3, [r2, #4]
 800633e:	4920      	ldr	r1, [pc, #128]	; (80063c0 <UART_AdvFeatureConfig+0xc8>)
 8006340:	400b      	ands	r3, r1
 8006342:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006344:	430b      	orrs	r3, r1
 8006346:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006348:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800634a:	06db      	lsls	r3, r3, #27
 800634c:	d506      	bpl.n	800635c <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800634e:	6802      	ldr	r2, [r0, #0]
 8006350:	6893      	ldr	r3, [r2, #8]
 8006352:	491c      	ldr	r1, [pc, #112]	; (80063c4 <UART_AdvFeatureConfig+0xcc>)
 8006354:	400b      	ands	r3, r1
 8006356:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006358:	430b      	orrs	r3, r1
 800635a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800635c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800635e:	069b      	lsls	r3, r3, #26
 8006360:	d506      	bpl.n	8006370 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006362:	6802      	ldr	r2, [r0, #0]
 8006364:	6893      	ldr	r3, [r2, #8]
 8006366:	4918      	ldr	r1, [pc, #96]	; (80063c8 <UART_AdvFeatureConfig+0xd0>)
 8006368:	400b      	ands	r3, r1
 800636a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800636c:	430b      	orrs	r3, r1
 800636e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006370:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006372:	065b      	lsls	r3, r3, #25
 8006374:	d50b      	bpl.n	800638e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006376:	6802      	ldr	r2, [r0, #0]
 8006378:	6853      	ldr	r3, [r2, #4]
 800637a:	4914      	ldr	r1, [pc, #80]	; (80063cc <UART_AdvFeatureConfig+0xd4>)
 800637c:	400b      	ands	r3, r1
 800637e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006380:	430b      	orrs	r3, r1
 8006382:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006384:	2380      	movs	r3, #128	; 0x80
 8006386:	035b      	lsls	r3, r3, #13
 8006388:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800638a:	429a      	cmp	r2, r3
 800638c:	d00a      	beq.n	80063a4 <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800638e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	d506      	bpl.n	80063a2 <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006394:	6802      	ldr	r2, [r0, #0]
 8006396:	6853      	ldr	r3, [r2, #4]
 8006398:	490d      	ldr	r1, [pc, #52]	; (80063d0 <UART_AdvFeatureConfig+0xd8>)
 800639a:	400b      	ands	r3, r1
 800639c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800639e:	430b      	orrs	r3, r1
 80063a0:	6053      	str	r3, [r2, #4]
  }
}
 80063a2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063a4:	6802      	ldr	r2, [r0, #0]
 80063a6:	6853      	ldr	r3, [r2, #4]
 80063a8:	490a      	ldr	r1, [pc, #40]	; (80063d4 <UART_AdvFeatureConfig+0xdc>)
 80063aa:	400b      	ands	r3, r1
 80063ac:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80063ae:	430b      	orrs	r3, r1
 80063b0:	6053      	str	r3, [r2, #4]
 80063b2:	e7ec      	b.n	800638e <UART_AdvFeatureConfig+0x96>
 80063b4:	fffdffff 	.word	0xfffdffff
 80063b8:	fffeffff 	.word	0xfffeffff
 80063bc:	fffbffff 	.word	0xfffbffff
 80063c0:	ffff7fff 	.word	0xffff7fff
 80063c4:	ffffefff 	.word	0xffffefff
 80063c8:	ffffdfff 	.word	0xffffdfff
 80063cc:	ffefffff 	.word	0xffefffff
 80063d0:	fff7ffff 	.word	0xfff7ffff
 80063d4:	ff9fffff 	.word	0xff9fffff

080063d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80063d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063da:	46c6      	mov	lr, r8
 80063dc:	b500      	push	{lr}
 80063de:	0005      	movs	r5, r0
 80063e0:	000f      	movs	r7, r1
 80063e2:	0016      	movs	r6, r2
 80063e4:	4698      	mov	r8, r3
 80063e6:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	003a      	movs	r2, r7
 80063ee:	439a      	bics	r2, r3
 80063f0:	0013      	movs	r3, r2
 80063f2:	425a      	negs	r2, r3
 80063f4:	4153      	adcs	r3, r2
 80063f6:	42b3      	cmp	r3, r6
 80063f8:	d11e      	bne.n	8006438 <UART_WaitOnFlagUntilTimeout+0x60>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80063fa:	1c63      	adds	r3, r4, #1
 80063fc:	d0f4      	beq.n	80063e8 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80063fe:	2c00      	cmp	r4, #0
 8006400:	d005      	beq.n	800640e <UART_WaitOnFlagUntilTimeout+0x36>
 8006402:	f7fd fdc9 	bl	8003f98 <HAL_GetTick>
 8006406:	4643      	mov	r3, r8
 8006408:	1ac0      	subs	r0, r0, r3
 800640a:	4284      	cmp	r4, r0
 800640c:	d2ec      	bcs.n	80063e8 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800640e:	682a      	ldr	r2, [r5, #0]
 8006410:	6813      	ldr	r3, [r2, #0]
 8006412:	490b      	ldr	r1, [pc, #44]	; (8006440 <UART_WaitOnFlagUntilTimeout+0x68>)
 8006414:	400b      	ands	r3, r1
 8006416:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006418:	682a      	ldr	r2, [r5, #0]
 800641a:	6893      	ldr	r3, [r2, #8]
 800641c:	31a3      	adds	r1, #163	; 0xa3
 800641e:	31ff      	adds	r1, #255	; 0xff
 8006420:	438b      	bics	r3, r1
 8006422:	6093      	str	r3, [r2, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8006424:	2320      	movs	r3, #32
 8006426:	2269      	movs	r2, #105	; 0x69
 8006428:	54ab      	strb	r3, [r5, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800642a:	3201      	adds	r2, #1
 800642c:	54ab      	strb	r3, [r5, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800642e:	2200      	movs	r2, #0
 8006430:	3348      	adds	r3, #72	; 0x48
 8006432:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 8006434:	2003      	movs	r0, #3
 8006436:	e000      	b.n	800643a <UART_WaitOnFlagUntilTimeout+0x62>
      }
    }
  }
  return HAL_OK;
 8006438:	2000      	movs	r0, #0
}
 800643a:	bc04      	pop	{r2}
 800643c:	4690      	mov	r8, r2
 800643e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006440:	fffffe5f 	.word	0xfffffe5f

08006444 <HAL_UART_Transmit>:
{
 8006444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006446:	b085      	sub	sp, #20
 8006448:	0004      	movs	r4, r0
 800644a:	000f      	movs	r7, r1
 800644c:	0016      	movs	r6, r2
 800644e:	001d      	movs	r5, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8006450:	2369      	movs	r3, #105	; 0x69
 8006452:	5cc3      	ldrb	r3, [r0, r3]
 8006454:	2b20      	cmp	r3, #32
 8006456:	d002      	beq.n	800645e <HAL_UART_Transmit+0x1a>
    return HAL_BUSY;
 8006458:	2002      	movs	r0, #2
}
 800645a:	b005      	add	sp, #20
 800645c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 800645e:	2900      	cmp	r1, #0
 8006460:	d05b      	beq.n	800651a <HAL_UART_Transmit+0xd6>
 8006462:	2a00      	cmp	r2, #0
 8006464:	d05b      	beq.n	800651e <HAL_UART_Transmit+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	015b      	lsls	r3, r3, #5
 800646a:	6882      	ldr	r2, [r0, #8]
 800646c:	429a      	cmp	r2, r3
 800646e:	d005      	beq.n	800647c <HAL_UART_Transmit+0x38>
    __HAL_LOCK(huart);
 8006470:	2368      	movs	r3, #104	; 0x68
 8006472:	5ce3      	ldrb	r3, [r4, r3]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d108      	bne.n	800648a <HAL_UART_Transmit+0x46>
 8006478:	2002      	movs	r0, #2
 800647a:	e7ee      	b.n	800645a <HAL_UART_Transmit+0x16>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800647c:	6903      	ldr	r3, [r0, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f6      	bne.n	8006470 <HAL_UART_Transmit+0x2c>
      if((((uint32_t)pData)&1) != 0)
 8006482:	07cb      	lsls	r3, r1, #31
 8006484:	d5f4      	bpl.n	8006470 <HAL_UART_Transmit+0x2c>
        return  HAL_ERROR;
 8006486:	2001      	movs	r0, #1
 8006488:	e7e7      	b.n	800645a <HAL_UART_Transmit+0x16>
    __HAL_LOCK(huart);
 800648a:	2201      	movs	r2, #1
 800648c:	2368      	movs	r3, #104	; 0x68
 800648e:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	2300      	movs	r3, #0
 8006492:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006494:	3220      	adds	r2, #32
 8006496:	3369      	adds	r3, #105	; 0x69
 8006498:	54e2      	strb	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800649a:	f7fd fd7d 	bl	8003f98 <HAL_GetTick>
 800649e:	9003      	str	r0, [sp, #12]
    huart->TxXferSize = Size;
 80064a0:	2350      	movs	r3, #80	; 0x50
 80064a2:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 80064a4:	3302      	adds	r3, #2
 80064a6:	52e6      	strh	r6, [r4, r3]
    while(huart->TxXferCount > 0U)
 80064a8:	e003      	b.n	80064b2 <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	783a      	ldrb	r2, [r7, #0]
 80064ae:	629a      	str	r2, [r3, #40]	; 0x28
 80064b0:	3701      	adds	r7, #1
    while(huart->TxXferCount > 0U)
 80064b2:	2352      	movs	r3, #82	; 0x52
 80064b4:	5ae3      	ldrh	r3, [r4, r3]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01c      	beq.n	80064f6 <HAL_UART_Transmit+0xb2>
      huart->TxXferCount--;
 80064bc:	2252      	movs	r2, #82	; 0x52
 80064be:	5aa3      	ldrh	r3, [r4, r2]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	52a3      	strh	r3, [r4, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c6:	9500      	str	r5, [sp, #0]
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	0020      	movs	r0, r4
 80064d0:	f7ff ff82 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d124      	bne.n	8006522 <HAL_UART_Transmit+0xde>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	015b      	lsls	r3, r3, #5
 80064dc:	68a2      	ldr	r2, [r4, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d1e3      	bne.n	80064aa <HAL_UART_Transmit+0x66>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e0      	bne.n	80064aa <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	883b      	ldrh	r3, [r7, #0]
 80064ec:	05db      	lsls	r3, r3, #23
 80064ee:	0ddb      	lsrs	r3, r3, #23
 80064f0:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2U;
 80064f2:	3702      	adds	r7, #2
 80064f4:	e7dd      	b.n	80064b2 <HAL_UART_Transmit+0x6e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064f6:	9500      	str	r5, [sp, #0]
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	2140      	movs	r1, #64	; 0x40
 80064fe:	0020      	movs	r0, r4
 8006500:	f7ff ff6a 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 8006504:	2800      	cmp	r0, #0
 8006506:	d001      	beq.n	800650c <HAL_UART_Transmit+0xc8>
      return HAL_TIMEOUT;
 8006508:	2003      	movs	r0, #3
 800650a:	e7a6      	b.n	800645a <HAL_UART_Transmit+0x16>
    huart->gState = HAL_UART_STATE_READY;
 800650c:	2220      	movs	r2, #32
 800650e:	2369      	movs	r3, #105	; 0x69
 8006510:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8006512:	2200      	movs	r2, #0
 8006514:	3b01      	subs	r3, #1
 8006516:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8006518:	e79f      	b.n	800645a <HAL_UART_Transmit+0x16>
      return  HAL_ERROR;
 800651a:	2001      	movs	r0, #1
 800651c:	e79d      	b.n	800645a <HAL_UART_Transmit+0x16>
 800651e:	2001      	movs	r0, #1
 8006520:	e79b      	b.n	800645a <HAL_UART_Transmit+0x16>
        return HAL_TIMEOUT;
 8006522:	2003      	movs	r0, #3
 8006524:	e799      	b.n	800645a <HAL_UART_Transmit+0x16>
	...

08006528 <UART_CheckIdleState>:
{
 8006528:	b530      	push	{r4, r5, lr}
 800652a:	b083      	sub	sp, #12
 800652c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652e:	2300      	movs	r3, #0
 8006530:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8006532:	f7fd fd31 	bl	8003f98 <HAL_GetTick>
 8006536:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	071b      	lsls	r3, r3, #28
 800653e:	d40e      	bmi.n	800655e <UART_CheckIdleState+0x36>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	075b      	lsls	r3, r3, #29
 8006546:	d417      	bmi.n	8006578 <UART_CheckIdleState+0x50>
  huart->gState  = HAL_UART_STATE_READY;
 8006548:	2320      	movs	r3, #32
 800654a:	2269      	movs	r2, #105	; 0x69
 800654c:	54a3      	strb	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800654e:	3201      	adds	r2, #1
 8006550:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(huart);
 8006552:	2200      	movs	r2, #0
 8006554:	3348      	adds	r3, #72	; 0x48
 8006556:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8006558:	2000      	movs	r0, #0
}
 800655a:	b003      	add	sp, #12
 800655c:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <UART_CheckIdleState+0x6c>)
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	0003      	movs	r3, r0
 8006564:	2200      	movs	r2, #0
 8006566:	2180      	movs	r1, #128	; 0x80
 8006568:	0389      	lsls	r1, r1, #14
 800656a:	0020      	movs	r0, r4
 800656c:	f7ff ff34 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 8006570:	2800      	cmp	r0, #0
 8006572:	d0e5      	beq.n	8006540 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006574:	2003      	movs	r0, #3
 8006576:	e7f0      	b.n	800655a <UART_CheckIdleState+0x32>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <UART_CheckIdleState+0x6c>)
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	002b      	movs	r3, r5
 800657e:	2200      	movs	r2, #0
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	03c9      	lsls	r1, r1, #15
 8006584:	0020      	movs	r0, r4
 8006586:	f7ff ff27 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 800658a:	2800      	cmp	r0, #0
 800658c:	d0dc      	beq.n	8006548 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800658e:	2003      	movs	r0, #3
 8006590:	e7e3      	b.n	800655a <UART_CheckIdleState+0x32>
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	01ffffff 	.word	0x01ffffff

08006598 <HAL_UART_Init>:
{
 8006598:	b510      	push	{r4, lr}
 800659a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800659c:	d030      	beq.n	8006600 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 800659e:	2369      	movs	r3, #105	; 0x69
 80065a0:	5cc3      	ldrb	r3, [r0, r3]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d022      	beq.n	80065ec <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80065a6:	2224      	movs	r2, #36	; 0x24
 80065a8:	2369      	movs	r3, #105	; 0x69
 80065aa:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	6813      	ldr	r3, [r2, #0]
 80065b0:	2101      	movs	r1, #1
 80065b2:	438b      	bics	r3, r1
 80065b4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d11d      	bne.n	80065f8 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065bc:	0020      	movs	r0, r4
 80065be:	f7ff fcf3 	bl	8005fa8 <UART_SetConfig>
 80065c2:	2801      	cmp	r0, #1
 80065c4:	d011      	beq.n	80065ea <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c6:	6822      	ldr	r2, [r4, #0]
 80065c8:	6853      	ldr	r3, [r2, #4]
 80065ca:	490e      	ldr	r1, [pc, #56]	; (8006604 <HAL_UART_Init+0x6c>)
 80065cc:	400b      	ands	r3, r1
 80065ce:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	6893      	ldr	r3, [r2, #8]
 80065d4:	212a      	movs	r1, #42	; 0x2a
 80065d6:	438b      	bics	r3, r1
 80065d8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80065da:	6822      	ldr	r2, [r4, #0]
 80065dc:	6813      	ldr	r3, [r2, #0]
 80065de:	3929      	subs	r1, #41	; 0x29
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80065e4:	0020      	movs	r0, r4
 80065e6:	f7ff ff9f 	bl	8006528 <UART_CheckIdleState>
}
 80065ea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80065ec:	2200      	movs	r2, #0
 80065ee:	3368      	adds	r3, #104	; 0x68
 80065f0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80065f2:	f001 fc0b 	bl	8007e0c <HAL_UART_MspInit>
 80065f6:	e7d6      	b.n	80065a6 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80065f8:	0020      	movs	r0, r4
 80065fa:	f7ff fe7d 	bl	80062f8 <UART_AdvFeatureConfig>
 80065fe:	e7dd      	b.n	80065bc <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8006600:	2001      	movs	r0, #1
 8006602:	e7f2      	b.n	80065ea <HAL_UART_Init+0x52>
 8006604:	ffffb7ff 	.word	0xffffb7ff

08006608 <DelayMs>:
/* Includes ------------------------------------------------------------------*/
#include "hw.h"
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 8006608:	b510      	push	{r4, lr}
  HW_RTC_DelayMs( ms );
 800660a:	f000 fd07 	bl	800701c <HW_RTC_DelayMs>

}
 800660e:	bd10      	pop	{r4, pc}

08006610 <LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006610:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006614:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8006616:	2900      	cmp	r1, #0
 8006618:	d008      	beq.n	800662c <LPM_SetOffMode+0x1c>
 800661a:	2901      	cmp	r1, #1
 800661c:	d103      	bne.n	8006626 <LPM_SetOffMode+0x16>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 800661e:	4a06      	ldr	r2, [pc, #24]	; (8006638 <LPM_SetOffMode+0x28>)
 8006620:	6811      	ldr	r1, [r2, #0]
 8006622:	4308      	orrs	r0, r1
 8006624:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006626:	f383 8810 	msr	PRIMASK, r3
  }
  
  RESTORE_PRIMASK( );

  return;
}
 800662a:	4770      	bx	lr
      OffModeDisable &= ~(uint32_t)id;
 800662c:	4902      	ldr	r1, [pc, #8]	; (8006638 <LPM_SetOffMode+0x28>)
 800662e:	680a      	ldr	r2, [r1, #0]
 8006630:	4382      	bics	r2, r0
 8006632:	600a      	str	r2, [r1, #0]
      break;
 8006634:	e7f7      	b.n	8006626 <LPM_SetOffMode+0x16>
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	2000034c 	.word	0x2000034c

0800663c <LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800663c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006640:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8006642:	2900      	cmp	r1, #0
 8006644:	d008      	beq.n	8006658 <LPM_SetStopMode+0x1c>
 8006646:	2901      	cmp	r1, #1
 8006648:	d103      	bne.n	8006652 <LPM_SetStopMode+0x16>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 800664a:	4a06      	ldr	r2, [pc, #24]	; (8006664 <LPM_SetStopMode+0x28>)
 800664c:	6851      	ldr	r1, [r2, #4]
 800664e:	4308      	orrs	r0, r1
 8006650:	6050      	str	r0, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006652:	f383 8810 	msr	PRIMASK, r3
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 8006656:	4770      	bx	lr
      StopModeDisable &= ~(uint32_t)id;
 8006658:	4902      	ldr	r1, [pc, #8]	; (8006664 <LPM_SetStopMode+0x28>)
 800665a:	684a      	ldr	r2, [r1, #4]
 800665c:	4382      	bics	r2, r0
 800665e:	604a      	str	r2, [r1, #4]
      break;
 8006660:	e7f7      	b.n	8006652 <LPM_SetStopMode+0x16>
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	2000034c 	.word	0x2000034c

08006668 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006668:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800666c:	b672      	cpsid	i

  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 800666e:	4a08      	ldr	r2, [pc, #32]	; (8006690 <LPM_GetMode+0x28>)
 8006670:	6852      	ldr	r2, [r2, #4]
 8006672:	2a00      	cmp	r2, #0
 8006674:	d109      	bne.n	800668a <LPM_GetMode+0x22>
  {
    mode_selected = LPM_SleepMode;
  }
  else
  {
    if(OffModeDisable)
 8006676:	4a06      	ldr	r2, [pc, #24]	; (8006690 <LPM_GetMode+0x28>)
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	2a00      	cmp	r2, #0
 800667c:	d103      	bne.n	8006686 <LPM_GetMode+0x1e>
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 800667e:	2002      	movs	r0, #2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006680:	f383 8810 	msr	PRIMASK, r3
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 8006684:	4770      	bx	lr
      mode_selected = LPM_StopMode;
 8006686:	2001      	movs	r0, #1
 8006688:	e7fa      	b.n	8006680 <LPM_GetMode+0x18>
    mode_selected = LPM_SleepMode;
 800668a:	2000      	movs	r0, #0
 800668c:	e7f8      	b.n	8006680 <LPM_GetMode+0x18>
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	2000034c 	.word	0x2000034c

08006694 <LPM_ExitSleepMode>:

__weak void LPM_EnterSleepMode(void) {}
__weak void LPM_ExitSleepMode(void) {}
 8006694:	4770      	bx	lr

08006696 <LPM_EnterOffMode>:
__weak void LPM_EnterStopMode(void) {}
__weak void LPM_ExitStopMode(void) {}
__weak void LPM_EnterOffMode(void) {}
 8006696:	4770      	bx	lr

08006698 <LPM_ExitOffMode>:
__weak void LPM_ExitOffMode(void) {}
 8006698:	4770      	bx	lr
	...

0800669c <LPM_EnterLowPower>:
{
 800669c:	b510      	push	{r4, lr}
  if( StopModeDisable )
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <LPM_EnterLowPower+0x30>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d108      	bne.n	80066b8 <LPM_EnterLowPower+0x1c>
    if( OffModeDisable )
 80066a6:	4b09      	ldr	r3, [pc, #36]	; (80066cc <LPM_EnterLowPower+0x30>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <LPM_EnterLowPower+0x26>
      LPM_EnterOffMode();
 80066ae:	f7ff fff2 	bl	8006696 <LPM_EnterOffMode>
      LPM_ExitOffMode();
 80066b2:	f7ff fff1 	bl	8006698 <LPM_ExitOffMode>
}
 80066b6:	bd10      	pop	{r4, pc}
    LPM_EnterSleepMode();
 80066b8:	f001 fa4a 	bl	8007b50 <LPM_EnterSleepMode>
    LPM_ExitSleepMode();
 80066bc:	f7ff ffea 	bl	8006694 <LPM_ExitSleepMode>
 80066c0:	e7f9      	b.n	80066b6 <LPM_EnterLowPower+0x1a>
      LPM_EnterStopMode();
 80066c2:	f001 fa07 	bl	8007ad4 <LPM_EnterStopMode>
      LPM_ExitStopMode();
 80066c6:	f001 fa19 	bl	8007afc <LPM_ExitStopMode>
 80066ca:	e7f4      	b.n	80066b6 <LPM_EnterLowPower+0x1a>
 80066cc:	2000034c 	.word	0x2000034c

080066d0 <TimerInsertTimer>:
  }
  RESTORE_PRIMASK( );
}

static void TimerInsertTimer( TimerEvent_t *obj)
{
 80066d0:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 80066d2:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <TimerInsertTimer+0x2c>)
 80066d4:	681a      	ldr	r2, [r3, #0]
  TimerEvent_t* next = TimerListHead->Next;
 80066d6:	6913      	ldr	r3, [r2, #16]

  while (cur->Next != NULL )
 80066d8:	6911      	ldr	r1, [r2, #16]
 80066da:	2900      	cmp	r1, #0
 80066dc:	d009      	beq.n	80066f2 <TimerInsertTimer+0x22>
  {  
    if( obj->Timestamp  > next->Timestamp )
 80066de:	6801      	ldr	r1, [r0, #0]
 80066e0:	681c      	ldr	r4, [r3, #0]
 80066e2:	42a1      	cmp	r1, r4
 80066e4:	d902      	bls.n	80066ec <TimerInsertTimer+0x1c>
    {
        cur = next;
 80066e6:	001a      	movs	r2, r3
        next = next->Next;
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	e7f5      	b.n	80066d8 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = obj;
 80066ec:	6110      	str	r0, [r2, #16]
        obj->Next = next;
 80066ee:	6103      	str	r3, [r0, #16]
        return;
 80066f0:	e002      	b.n	80066f8 <TimerInsertTimer+0x28>

    }
  }
  cur->Next = obj;
 80066f2:	6110      	str	r0, [r2, #16]
  obj->Next = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	6103      	str	r3, [r0, #16]
}
 80066f8:	bd10      	pop	{r4, pc}
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	20000354 	.word	0x20000354

08006700 <TimerExists>:
  RESTORE_PRIMASK( );
}  
  
static bool TimerExists( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <TimerExists+0x18>)
 8006702:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <TimerExists+0x10>
  {
    if( cur == obj )
 8006708:	4283      	cmp	r3, r0
 800670a:	d003      	beq.n	8006714 <TimerExists+0x14>
    {
      return true;
    }
    cur = cur->Next;
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	e7f9      	b.n	8006704 <TimerExists+0x4>
  }
  return false;
 8006710:	2000      	movs	r0, #0
}
 8006712:	4770      	bx	lr
      return true;
 8006714:	2001      	movs	r0, #1
 8006716:	e7fc      	b.n	8006712 <TimerExists+0x12>
 8006718:	20000354 	.word	0x20000354

0800671c <TimerSetTimeout>:
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8006720:	f000 fb14 	bl	8006d4c <HW_RTC_GetMinimumTimeout>
 8006724:	0005      	movs	r5, r0
  obj->IsRunning = true; 
 8006726:	2301      	movs	r3, #1
 8006728:	7223      	strb	r3, [r4, #8]

  //in case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 800672a:	6826      	ldr	r6, [r4, #0]
 800672c:	f000 fb50 	bl	8006dd0 <HW_RTC_GetTimerElapsedTime>
 8006730:	1828      	adds	r0, r5, r0
 8006732:	4286      	cmp	r6, r0
 8006734:	d303      	bcc.n	800673e <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	f000 fc2a 	bl	8006f90 <HW_RTC_SetAlarm>
}
 800673c:	bd70      	pop	{r4, r5, r6, pc}
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 800673e:	f000 fb47 	bl	8006dd0 <HW_RTC_GetTimerElapsedTime>
 8006742:	182d      	adds	r5, r5, r0
 8006744:	6025      	str	r5, [r4, #0]
 8006746:	e7f6      	b.n	8006736 <TimerSetTimeout+0x1a>

08006748 <TimerInsertNewHeadTimer>:
{
 8006748:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <TimerInsertNewHeadTimer+0x1c>)
 800674c:	681b      	ldr	r3, [r3, #0]
  if( cur != NULL )
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <TimerInsertNewHeadTimer+0xe>
    cur->IsRunning = false;
 8006752:	2200      	movs	r2, #0
 8006754:	721a      	strb	r2, [r3, #8]
  obj->Next = cur;
 8006756:	6103      	str	r3, [r0, #16]
  TimerListHead = obj;
 8006758:	4b02      	ldr	r3, [pc, #8]	; (8006764 <TimerInsertNewHeadTimer+0x1c>)
 800675a:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800675c:	f7ff ffde 	bl	800671c <TimerSetTimeout>
}
 8006760:	bd10      	pop	{r4, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	20000354 	.word	0x20000354

08006768 <TimerInit>:
  obj->Timestamp = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 800676c:	6043      	str	r3, [r0, #4]
  obj->IsRunning = false;
 800676e:	7203      	strb	r3, [r0, #8]
  obj->Callback = callback;
 8006770:	60c1      	str	r1, [r0, #12]
  obj->Next = NULL;
 8006772:	6103      	str	r3, [r0, #16]
}
 8006774:	4770      	bx	lr
	...

08006778 <TimerStart>:
{
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800677c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006780:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006782:	2800      	cmp	r0, #0
 8006784:	d01c      	beq.n	80067c0 <TimerStart+0x48>
 8006786:	f7ff ffbb 	bl	8006700 <TimerExists>
 800678a:	2800      	cmp	r0, #0
 800678c:	d118      	bne.n	80067c0 <TimerStart+0x48>
  obj->Timestamp = obj->ReloadValue;
 800678e:	6863      	ldr	r3, [r4, #4]
 8006790:	6023      	str	r3, [r4, #0]
  obj->IsRunning = false;
 8006792:	2300      	movs	r3, #0
 8006794:	7223      	strb	r3, [r4, #8]
  if( TimerListHead == NULL )
 8006796:	4b11      	ldr	r3, [pc, #68]	; (80067dc <TimerStart+0x64>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d013      	beq.n	80067c6 <TimerStart+0x4e>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 800679e:	f000 fb17 	bl	8006dd0 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	469c      	mov	ip, r3
 80067a6:	4460      	add	r0, ip
 80067a8:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 80067aa:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <TimerStart+0x64>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4298      	cmp	r0, r3
 80067b2:	d20e      	bcs.n	80067d2 <TimerStart+0x5a>
      TimerInsertNewHeadTimer( obj);
 80067b4:	0020      	movs	r0, r4
 80067b6:	f7ff ffc7 	bl	8006748 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ba:	f385 8810 	msr	PRIMASK, r5
 80067be:	e001      	b.n	80067c4 <TimerStart+0x4c>
 80067c0:	f385 8810 	msr	PRIMASK, r5
}
 80067c4:	bd70      	pop	{r4, r5, r6, pc}
    HW_RTC_SetTimerContext( );
 80067c6:	f000 fc39 	bl	800703c <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 80067ca:	0020      	movs	r0, r4
 80067cc:	f7ff ffbc 	bl	8006748 <TimerInsertNewHeadTimer>
 80067d0:	e7f3      	b.n	80067ba <TimerStart+0x42>
      TimerInsertTimer( obj);
 80067d2:	0020      	movs	r0, r4
 80067d4:	f7ff ff7c 	bl	80066d0 <TimerInsertTimer>
 80067d8:	e7ef      	b.n	80067ba <TimerStart+0x42>
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	20000354 	.word	0x20000354

080067e0 <TimerIrqHandler>:
{
 80067e0:	b510      	push	{r4, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 80067e2:	f000 fc4b 	bl	800707c <HW_RTC_GetTimerContext>
 80067e6:	0004      	movs	r4, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 80067e8:	f000 fc28 	bl	800703c <HW_RTC_SetTimerContext>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 80067ec:	1b00      	subs	r0, r0, r4
  if ( TimerListHead != NULL )
 80067ee:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <TimerIrqHandler+0x80>)
 80067f0:	681c      	ldr	r4, [r3, #0]
 80067f2:	2c00      	cmp	r4, #0
 80067f4:	d00d      	beq.n	8006812 <TimerIrqHandler+0x32>
 80067f6:	0022      	movs	r2, r4
 80067f8:	e002      	b.n	8006800 <TimerIrqHandler+0x20>
        next->Timestamp = 0 ;
 80067fa:	2100      	movs	r1, #0
 80067fc:	6019      	str	r1, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 80067fe:	6912      	ldr	r2, [r2, #16]
 8006800:	6913      	ldr	r3, [r2, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <TimerIrqHandler+0x32>
      if (next->Timestamp > DeltaContext)
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	4288      	cmp	r0, r1
 800680a:	d2f6      	bcs.n	80067fa <TimerIrqHandler+0x1a>
        next->Timestamp -= DeltaContext;
 800680c:	1a09      	subs	r1, r1, r0
 800680e:	6019      	str	r1, [r3, #0]
 8006810:	e7f5      	b.n	80067fe <TimerIrqHandler+0x1e>
  if ( TimerListHead != NULL )
 8006812:	2c00      	cmp	r4, #0
 8006814:	d006      	beq.n	8006824 <TimerIrqHandler+0x44>
    TimerListHead = TimerListHead->Next;
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <TimerIrqHandler+0x80>)
 8006818:	6922      	ldr	r2, [r4, #16]
 800681a:	601a      	str	r2, [r3, #0]
    exec_cb( cur->Callback );
 800681c:	68e3      	ldr	r3, [r4, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d012      	beq.n	8006848 <TimerIrqHandler+0x68>
 8006822:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8006824:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <TimerIrqHandler+0x80>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00f      	beq.n	800684c <TimerIrqHandler+0x6c>
 800682c:	681c      	ldr	r4, [r3, #0]
 800682e:	f000 facf 	bl	8006dd0 <HW_RTC_GetTimerElapsedTime>
 8006832:	4284      	cmp	r4, r0
 8006834:	d20a      	bcs.n	800684c <TimerIrqHandler+0x6c>
   cur = TimerListHead;
 8006836:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <TimerIrqHandler+0x80>)
 8006838:	6813      	ldr	r3, [r2, #0]
   TimerListHead = TimerListHead->Next;
 800683a:	6919      	ldr	r1, [r3, #16]
 800683c:	6011      	str	r1, [r2, #0]
   exec_cb( cur->Callback );
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <TimerIrqHandler+0x6a>
 8006844:	4798      	blx	r3
 8006846:	e7ed      	b.n	8006824 <TimerIrqHandler+0x44>
 8006848:	e7fe      	b.n	8006848 <TimerIrqHandler+0x68>
 800684a:	e7fe      	b.n	800684a <TimerIrqHandler+0x6a>
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 800684c:	4b04      	ldr	r3, [pc, #16]	; (8006860 <TimerIrqHandler+0x80>)
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	2800      	cmp	r0, #0
 8006852:	d004      	beq.n	800685e <TimerIrqHandler+0x7e>
 8006854:	7a03      	ldrb	r3, [r0, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <TimerIrqHandler+0x7e>
    TimerSetTimeout( TimerListHead );
 800685a:	f7ff ff5f 	bl	800671c <TimerSetTimeout>
}
 800685e:	bd10      	pop	{r4, pc}
 8006860:	20000354 	.word	0x20000354

08006864 <TimerStop>:
{
 8006864:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006866:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800686a:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 800686c:	4b1c      	ldr	r3, [pc, #112]	; (80068e0 <TimerStop+0x7c>)
 800686e:	681a      	ldr	r2, [r3, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8006870:	2a00      	cmp	r2, #0
 8006872:	d00b      	beq.n	800688c <TimerStop+0x28>
 8006874:	2800      	cmp	r0, #0
 8006876:	d009      	beq.n	800688c <TimerStop+0x28>
  if( TimerListHead == obj ) // Stop the Head                  
 8006878:	4282      	cmp	r2, r0
 800687a:	d00a      	beq.n	8006892 <TimerStop+0x2e>
 800687c:	0013      	movs	r3, r2
    while( cur != NULL )
 800687e:	2b00      	cmp	r3, #0
 8006880:	d028      	beq.n	80068d4 <TimerStop+0x70>
      if( cur == obj )
 8006882:	4283      	cmp	r3, r0
 8006884:	d022      	beq.n	80068cc <TimerStop+0x68>
        prev = cur;
 8006886:	001a      	movs	r2, r3
        cur = cur->Next;
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	e7f8      	b.n	800687e <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688c:	f384 8810 	msr	PRIMASK, r4
 8006890:	e022      	b.n	80068d8 <TimerStop+0x74>
    if( TimerListHead->IsRunning == true ) // The head is already running 
 8006892:	7a13      	ldrb	r3, [r2, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00f      	beq.n	80068b8 <TimerStop+0x54>
      if( TimerListHead->Next != NULL )
 8006898:	6910      	ldr	r0, [r2, #16]
 800689a:	2800      	cmp	r0, #0
 800689c:	d006      	beq.n	80068ac <TimerStop+0x48>
        TimerListHead->IsRunning = false;
 800689e:	2300      	movs	r3, #0
 80068a0:	7213      	strb	r3, [r2, #8]
        TimerListHead = TimerListHead->Next;
 80068a2:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <TimerStop+0x7c>)
 80068a4:	6018      	str	r0, [r3, #0]
        TimerSetTimeout( TimerListHead );
 80068a6:	f7ff ff39 	bl	800671c <TimerSetTimeout>
 80068aa:	e013      	b.n	80068d4 <TimerStop+0x70>
        HW_RTC_StopAlarm( );
 80068ac:	f000 faa6 	bl	8006dfc <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 80068b0:	2200      	movs	r2, #0
 80068b2:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <TimerStop+0x7c>)
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e00d      	b.n	80068d4 <TimerStop+0x70>
      if( TimerListHead->Next != NULL )   
 80068b8:	6913      	ldr	r3, [r2, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <TimerStop+0x60>
        TimerListHead = TimerListHead->Next;
 80068be:	4a08      	ldr	r2, [pc, #32]	; (80068e0 <TimerStop+0x7c>)
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	e007      	b.n	80068d4 <TimerStop+0x70>
        TimerListHead = NULL;
 80068c4:	2200      	movs	r2, #0
 80068c6:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <TimerStop+0x7c>)
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e003      	b.n	80068d4 <TimerStop+0x70>
        if( cur->Next != NULL )
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <TimerStop+0x76>
          prev->Next = cur;
 80068d2:	6113      	str	r3, [r2, #16]
 80068d4:	f384 8810 	msr	PRIMASK, r4
}  
 80068d8:	bd10      	pop	{r4, pc}
          prev->Next = cur;
 80068da:	2300      	movs	r3, #0
 80068dc:	6113      	str	r3, [r2, #16]
 80068de:	e7f9      	b.n	80068d4 <TimerStop+0x70>
 80068e0:	20000354 	.word	0x20000354

080068e4 <TimerSetValue>:
{
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	0004      	movs	r4, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 80068e8:	0008      	movs	r0, r1
 80068ea:	f000 fa31 	bl	8006d50 <HW_RTC_ms2Tick>
 80068ee:	0005      	movs	r5, r0
  TimerStop( obj );
 80068f0:	0020      	movs	r0, r4
 80068f2:	f7ff ffb7 	bl	8006864 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 80068f6:	f000 fa29 	bl	8006d4c <HW_RTC_GetMinimumTimeout>
  if( ticks < minValue )
 80068fa:	4285      	cmp	r5, r0
 80068fc:	d202      	bcs.n	8006904 <TimerSetValue+0x20>
  obj->Timestamp = ticks;
 80068fe:	6020      	str	r0, [r4, #0]
  obj->ReloadValue = ticks;
 8006900:	6060      	str	r0, [r4, #4]
}
 8006902:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8006904:	0028      	movs	r0, r5
 8006906:	e7fa      	b.n	80068fe <TimerSetValue+0x1a>

08006908 <TimerSetValueFloat>:
{
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	0004      	movs	r4, r0
  uint32_t ticks = HW_RTC_ms2TickFloat( value );
 800690c:	0010      	movs	r0, r2
 800690e:	0019      	movs	r1, r3
 8006910:	f000 fa26 	bl	8006d60 <HW_RTC_ms2TickFloat>
 8006914:	0005      	movs	r5, r0
  TimerStop( obj );
 8006916:	0020      	movs	r0, r4
 8006918:	f7ff ffa4 	bl	8006864 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 800691c:	f000 fa16 	bl	8006d4c <HW_RTC_GetMinimumTimeout>
  if( ticks < minValue )
 8006920:	4285      	cmp	r5, r0
 8006922:	d202      	bcs.n	800692a <TimerSetValueFloat+0x22>
  obj->Timestamp = ticks;
 8006924:	6020      	str	r0, [r4, #0]
  obj->ReloadValue = ticks;
 8006926:	6060      	str	r0, [r4, #4]
}
 8006928:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t ticks = HW_RTC_ms2TickFloat( value );
 800692a:	0028      	movs	r0, r5
 800692c:	e7fa      	b.n	8006924 <TimerSetValueFloat+0x1c>

0800692e <TimerGetCurrentTime>:
{
 800692e:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 8006930:	f000 fa5c 	bl	8006dec <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 8006934:	f000 fa2a 	bl	8006d8c <HW_RTC_Tick2ms>
}
 8006938:	bd10      	pop	{r4, pc}

0800693a <TimerGetCurrentTimeFloat>:
{
 800693a:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 800693c:	f000 fa56 	bl	8006dec <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2msFloat(now);
 8006940:	f000 fa36 	bl	8006db0 <HW_RTC_Tick2msFloat>
}
 8006944:	bd10      	pop	{r4, pc}

08006946 <TimerGetElapsedTime>:
{
 8006946:	b570      	push	{r4, r5, r6, lr}
 8006948:	0005      	movs	r5, r0
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 800694a:	f000 fa4f 	bl	8006dec <HW_RTC_GetTimerValue>
 800694e:	0004      	movs	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 8006950:	0028      	movs	r0, r5
 8006952:	f000 f9fd 	bl	8006d50 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 8006956:	1a20      	subs	r0, r4, r0
 8006958:	f000 fa18 	bl	8006d8c <HW_RTC_Tick2ms>
}
 800695c:	bd70      	pop	{r4, r5, r6, pc}

0800695e <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800695e:	e004      	b.n	800696a <memcpy1+0xc>
    {
        *dst++ = *src++;
 8006960:	780a      	ldrb	r2, [r1, #0]
 8006962:	7002      	strb	r2, [r0, #0]
    while( size-- )
 8006964:	001a      	movs	r2, r3
        *dst++ = *src++;
 8006966:	3101      	adds	r1, #1
 8006968:	3001      	adds	r0, #1
    while( size-- )
 800696a:	1e53      	subs	r3, r2, #1
 800696c:	b29b      	uxth	r3, r3
 800696e:	2a00      	cmp	r2, #0
 8006970:	d1f6      	bne.n	8006960 <memcpy1+0x2>
    }
}
 8006972:	4770      	bx	lr

08006974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006974:	480d      	ldr	r0, [pc, #52]	; (80069ac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006976:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006978:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800697a:	e003      	b.n	8006984 <LoopCopyDataInit>

0800697c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800697c:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800697e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006980:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006982:	3104      	adds	r1, #4

08006984 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006984:	480b      	ldr	r0, [pc, #44]	; (80069b4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8006988:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800698a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800698c:	d3f6      	bcc.n	800697c <CopyDataInit>
  ldr  r2, =_sbss
 800698e:	4a0b      	ldr	r2, [pc, #44]	; (80069bc <LoopForever+0x12>)
  b  LoopFillZerobss
 8006990:	e002      	b.n	8006998 <LoopFillZerobss>

08006992 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006992:	2300      	movs	r3, #0
  str  r3, [r2]
 8006994:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006996:	3204      	adds	r2, #4

08006998 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006998:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <LoopForever+0x16>)
  cmp  r2, r3
 800699a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800699c:	d3f9      	bcc.n	8006992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800699e:	f7fd fab5 	bl	8003f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80069a2:	f001 fa61 	bl	8007e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80069a6:	f000 fd8b 	bl	80074c0 <main>

080069aa <LoopForever>:

LoopForever:
    b LoopForever
 80069aa:	e7fe      	b.n	80069aa <LoopForever>
   ldr   r0, =_estack
 80069ac:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80069b0:	0800a9b0 	.word	0x0800a9b0
  ldr  r0, =_sdata
 80069b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80069b8:	20000224 	.word	0x20000224
  ldr  r2, =_sbss
 80069bc:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 80069c0:	2000084c 	.word	0x2000084c

080069c4 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80069c4:	e7fe      	b.n	80069c4 <DMA1_Channel1_IRQHandler>
	...

080069c8 <DBG_Init>:
  * @brief Initializes the debug
  * @param None
  * @retval None
  */
void DBG_Init( void )
{
 80069c8:	b530      	push	{r4, r5, lr}
 80069ca:	b087      	sub	sp, #28
#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80069cc:	2214      	movs	r2, #20
 80069ce:	2100      	movs	r1, #0
 80069d0:	a801      	add	r0, sp, #4
 80069d2:	f001 fa76 	bl	8007ec2 <memset>
  
  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069d6:	4c1d      	ldr	r4, [pc, #116]	; (8006a4c <DBG_Init+0x84>)
 80069d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069da:	2302      	movs	r3, #2
 80069dc:	431a      	orrs	r2, r3
 80069de:	62e2      	str	r2, [r4, #44]	; 0x2c
 80069e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069e2:	4013      	ands	r3, r2
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	9b00      	ldr	r3, [sp, #0]

  /* Configure the GPIO pin */  
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80069e8:	2301      	movs	r3, #1
 80069ea:	9302      	str	r3, [sp, #8]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 80069ec:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 80069ee:	3302      	adds	r3, #2
 80069f0:	9304      	str	r3, [sp, #16]
  
  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13| GPIO_PIN_14 | GPIO_PIN_15);
 80069f2:	23f0      	movs	r3, #240	; 0xf0
 80069f4:	021b      	lsls	r3, r3, #8
 80069f6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80069f8:	4d15      	ldr	r5, [pc, #84]	; (8006a50 <DBG_Init+0x88>)
 80069fa:	a901      	add	r1, sp, #4
 80069fc:	0028      	movs	r0, r5
 80069fe:	f7fd fc5b 	bl	80042b8 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006a02:	2200      	movs	r2, #0
 8006a04:	2180      	movs	r1, #128	; 0x80
 8006a06:	0149      	lsls	r1, r1, #5
 8006a08:	0028      	movs	r0, r5
 8006a0a:	f7fd fd27 	bl	800445c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	0189      	lsls	r1, r1, #6
 8006a14:	0028      	movs	r0, r5
 8006a16:	f7fd fd21 	bl	800445c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2180      	movs	r1, #128	; 0x80
 8006a1e:	01c9      	lsls	r1, r1, #7
 8006a20:	0028      	movs	r0, r5
 8006a22:	f7fd fd1b 	bl	800445c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8006a26:	2200      	movs	r2, #0
 8006a28:	2180      	movs	r1, #128	; 0x80
 8006a2a:	0209      	lsls	r1, r1, #8
 8006a2c:	0028      	movs	r0, r5
 8006a2e:	f7fd fd15 	bl	800445c <HAL_GPIO_WritePin>
#if 0
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);  
#endif

  __HAL_RCC_DBGMCU_CLK_ENABLE( );
 8006a32:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006a34:	2380      	movs	r3, #128	; 0x80
 8006a36:	03db      	lsls	r3, r3, #15
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	6363      	str	r3, [r4, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode( );
 8006a3c:	f7fd fab2 	bl	8003fa4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode( );
 8006a40:	f7fd fab8 	bl	8003fb4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode( );
 8006a44:	f7fd fabe 	bl	8003fc4 <HAL_DBGMCU_EnableDBGStandbyMode>
  HAL_DBGMCU_DisableDBGSleepMode( );
  HAL_DBGMCU_DisableDBGStopMode( );
  HAL_DBGMCU_DisableDBGStandbyMode( );
  __HAL_RCC_DBGMCU_CLK_DISABLE( );
#endif
}
 8006a48:	b007      	add	sp, #28
 8006a4a:	bd30      	pop	{r4, r5, pc}
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	50000400 	.word	0x50000400

08006a54 <Error_Handler>:
  * @brief Error_Handler
  * @param None
  * @retval None
  */
void Error_Handler(void)
{
 8006a54:	e7fe      	b.n	8006a54 <Error_Handler>

08006a56 <initQueue>:
 */

#include "ev_queue.h"

bool initQueue(EventQueue* pQueue) {
    if (!pQueue) {
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d005      	beq.n	8006a66 <initQueue+0x10>
        return false;
    }

    pQueue->head = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	6143      	str	r3, [r0, #20]
    pQueue->tail = 0;
 8006a5e:	6183      	str	r3, [r0, #24]
    pQueue->size = 0;
 8006a60:	61c3      	str	r3, [r0, #28]
    return true;
 8006a62:	2001      	movs	r0, #1
}
 8006a64:	4770      	bx	lr
        return false;
 8006a66:	2000      	movs	r0, #0
 8006a68:	e7fc      	b.n	8006a64 <initQueue+0xe>

08006a6a <isEmpty>:

bool isEmpty(EventQueue* pQueue) {
    return pQueue && pQueue->size == 0;
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d004      	beq.n	8006a78 <isEmpty+0xe>
 8006a6e:	69c3      	ldr	r3, [r0, #28]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <isEmpty+0x12>
 8006a74:	2000      	movs	r0, #0
}
 8006a76:	4770      	bx	lr
    return pQueue && pQueue->size == 0;
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e7fc      	b.n	8006a76 <isEmpty+0xc>
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	e7fa      	b.n	8006a76 <isEmpty+0xc>

08006a80 <enqueue>:

bool enqueue(EventQueue* pQueue, Queue_Events_t item) {
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	1e04      	subs	r4, r0, #0
    if (!pQueue || pQueue->size == QUEUE_CAPACITY) // when queue is full
 8006a84:	d00d      	beq.n	8006aa2 <enqueue+0x22>
 8006a86:	69c5      	ldr	r5, [r0, #28]
 8006a88:	2d14      	cmp	r5, #20
 8006a8a:	d00c      	beq.n	8006aa6 <enqueue+0x26>
    {
        return false;
    }

    pQueue->events[pQueue->tail] = item;
 8006a8c:	6980      	ldr	r0, [r0, #24]
 8006a8e:	5421      	strb	r1, [r4, r0]
    pQueue->tail = (pQueue->tail + 1) % QUEUE_CAPACITY;
 8006a90:	3001      	adds	r0, #1
 8006a92:	2114      	movs	r1, #20
 8006a94:	f7f9 fbd0 	bl	8000238 <__aeabi_uidivmod>
 8006a98:	61a1      	str	r1, [r4, #24]
    pQueue->size++;
 8006a9a:	3501      	adds	r5, #1
 8006a9c:	61e5      	str	r5, [r4, #28]
    return true;
 8006a9e:	2001      	movs	r0, #1
}
 8006aa0:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e7fc      	b.n	8006aa0 <enqueue+0x20>
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e7fa      	b.n	8006aa0 <enqueue+0x20>

08006aaa <dequeue>:

Queue_Events_t dequeue(EventQueue* pQueue) {
 8006aaa:	b570      	push	{r4, r5, r6, lr}
 8006aac:	1e04      	subs	r4, r0, #0
    // Return NULL when queue is empty
    // Return (void*)item at the head otherwise.
    Queue_Events_t item;

    if (!pQueue || isEmpty(pQueue)) {
 8006aae:	d00f      	beq.n	8006ad0 <dequeue+0x26>
 8006ab0:	f7ff ffdb 	bl	8006a6a <isEmpty>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d10d      	bne.n	8006ad4 <dequeue+0x2a>
        return EVENT_NO_EVENT;
    }

    item = pQueue->events[pQueue->head];
 8006ab8:	6960      	ldr	r0, [r4, #20]
 8006aba:	5c25      	ldrb	r5, [r4, r0]
    pQueue->head = (pQueue->head + 1) % QUEUE_CAPACITY;
 8006abc:	3001      	adds	r0, #1
 8006abe:	2114      	movs	r1, #20
 8006ac0:	f7f9 fbba 	bl	8000238 <__aeabi_uidivmod>
 8006ac4:	6161      	str	r1, [r4, #20]
    pQueue->size--;
 8006ac6:	69e3      	ldr	r3, [r4, #28]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	61e3      	str	r3, [r4, #28]
    return item;
}
 8006acc:	0028      	movs	r0, r5
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
        return EVENT_NO_EVENT;
 8006ad0:	2500      	movs	r5, #0
 8006ad2:	e7fb      	b.n	8006acc <dequeue+0x22>
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	e7f9      	b.n	8006acc <dequeue+0x22>

08006ad8 <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos=0;
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8006ad8:	23ff      	movs	r3, #255	; 0xff
 8006ada:	0002      	movs	r2, r0
 8006adc:	439a      	bics	r2, r3
 8006ade:	1e13      	subs	r3, r2, #0
 8006ae0:	d000      	beq.n	8006ae4 <HW_GPIO_GetBitPos+0xc>
 8006ae2:	2308      	movs	r3, #8
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8006ae4:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <HW_GPIO_GetBitPos+0x34>)
 8006ae6:	4210      	tst	r0, r2
 8006ae8:	d002      	beq.n	8006af0 <HW_GPIO_GetBitPos+0x18>
 8006aea:	2204      	movs	r2, #4
 8006aec:	4313      	orrs	r3, r2
 8006aee:	b2db      	uxtb	r3, r3
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 8006af0:	4a07      	ldr	r2, [pc, #28]	; (8006b10 <HW_GPIO_GetBitPos+0x38>)
 8006af2:	4210      	tst	r0, r2
 8006af4:	d002      	beq.n	8006afc <HW_GPIO_GetBitPos+0x24>
 8006af6:	2202      	movs	r2, #2
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b2db      	uxtb	r3, r3
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8006afc:	4a05      	ldr	r2, [pc, #20]	; (8006b14 <HW_GPIO_GetBitPos+0x3c>)
 8006afe:	4210      	tst	r0, r2
 8006b00:	d002      	beq.n	8006b08 <HW_GPIO_GetBitPos+0x30>
 8006b02:	2001      	movs	r0, #1
 8006b04:	4303      	orrs	r3, r0
 8006b06:	b2db      	uxtb	r3, r3
  
  return PinPos;
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	4770      	bx	lr
 8006b0c:	fffff0f0 	.word	0xfffff0f0
 8006b10:	ffffcccc 	.word	0xffffcccc
 8006b14:	ffffaaaa 	.word	0xffffaaaa

08006b18 <HW_GPIO_Init>:
{
 8006b18:	b530      	push	{r4, r5, lr}
 8006b1a:	b087      	sub	sp, #28
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8006b1c:	4c22      	ldr	r4, [pc, #136]	; (8006ba8 <HW_GPIO_Init+0x90>)
 8006b1e:	42a0      	cmp	r0, r4
 8006b20:	d023      	beq.n	8006b6a <HW_GPIO_Init+0x52>
 8006b22:	d90f      	bls.n	8006b44 <HW_GPIO_Init+0x2c>
 8006b24:	4c21      	ldr	r4, [pc, #132]	; (8006bac <HW_GPIO_Init+0x94>)
 8006b26:	42a0      	cmp	r0, r4
 8006b28:	d029      	beq.n	8006b7e <HW_GPIO_Init+0x66>
 8006b2a:	4c21      	ldr	r4, [pc, #132]	; (8006bb0 <HW_GPIO_Init+0x98>)
 8006b2c:	42a0      	cmp	r0, r4
 8006b2e:	d130      	bne.n	8006b92 <HW_GPIO_Init+0x7a>
 8006b30:	4c20      	ldr	r4, [pc, #128]	; (8006bb4 <HW_GPIO_Init+0x9c>)
 8006b32:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006b34:	2308      	movs	r3, #8
 8006b36:	431d      	orrs	r5, r3
 8006b38:	62e5      	str	r5, [r4, #44]	; 0x2c
 8006b3a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8006b3c:	4023      	ands	r3, r4
 8006b3e:	9304      	str	r3, [sp, #16]
 8006b40:	9b04      	ldr	r3, [sp, #16]
 8006b42:	e00c      	b.n	8006b5e <HW_GPIO_Init+0x46>
 8006b44:	24a0      	movs	r4, #160	; 0xa0
 8006b46:	05e4      	lsls	r4, r4, #23
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d122      	bne.n	8006b92 <HW_GPIO_Init+0x7a>
 8006b4c:	4c19      	ldr	r4, [pc, #100]	; (8006bb4 <HW_GPIO_Init+0x9c>)
 8006b4e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006b50:	2301      	movs	r3, #1
 8006b52:	431d      	orrs	r5, r3
 8006b54:	62e5      	str	r5, [r4, #44]	; 0x2c
 8006b56:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8006b58:	4023      	ands	r3, r4
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 8006b5e:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init( port, initStruct );
 8006b60:	0011      	movs	r1, r2
 8006b62:	f7fd fba9 	bl	80042b8 <HAL_GPIO_Init>
}
 8006b66:	b007      	add	sp, #28
 8006b68:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8006b6a:	4c12      	ldr	r4, [pc, #72]	; (8006bb4 <HW_GPIO_Init+0x9c>)
 8006b6c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006b6e:	2302      	movs	r3, #2
 8006b70:	431d      	orrs	r5, r3
 8006b72:	62e5      	str	r5, [r4, #44]	; 0x2c
 8006b74:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8006b76:	4023      	ands	r3, r4
 8006b78:	9302      	str	r3, [sp, #8]
 8006b7a:	9b02      	ldr	r3, [sp, #8]
 8006b7c:	e7ef      	b.n	8006b5e <HW_GPIO_Init+0x46>
 8006b7e:	4c0d      	ldr	r4, [pc, #52]	; (8006bb4 <HW_GPIO_Init+0x9c>)
 8006b80:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006b82:	2304      	movs	r3, #4
 8006b84:	431d      	orrs	r5, r3
 8006b86:	62e5      	str	r5, [r4, #44]	; 0x2c
 8006b88:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8006b8a:	4023      	ands	r3, r4
 8006b8c:	9303      	str	r3, [sp, #12]
 8006b8e:	9b03      	ldr	r3, [sp, #12]
 8006b90:	e7e5      	b.n	8006b5e <HW_GPIO_Init+0x46>
 8006b92:	4c08      	ldr	r4, [pc, #32]	; (8006bb4 <HW_GPIO_Init+0x9c>)
 8006b94:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006b96:	2380      	movs	r3, #128	; 0x80
 8006b98:	431d      	orrs	r5, r3
 8006b9a:	62e5      	str	r5, [r4, #44]	; 0x2c
 8006b9c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8006b9e:	4023      	ands	r3, r4
 8006ba0:	9305      	str	r3, [sp, #20]
 8006ba2:	9b05      	ldr	r3, [sp, #20]
 8006ba4:	e7db      	b.n	8006b5e <HW_GPIO_Init+0x46>
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	50000400 	.word	0x50000400
 8006bac:	50000800 	.word	0x50000800
 8006bb0:	50000c00 	.word	0x50000c00
 8006bb4:	40021000 	.word	0x40021000

08006bb8 <HW_GPIO_SetIrq>:
{
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	000c      	movs	r4, r1
 8006bbc:	0015      	movs	r5, r2
 8006bbe:	001e      	movs	r6, r3
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 8006bc0:	0008      	movs	r0, r1
 8006bc2:	f7ff ff89 	bl	8006ad8 <HW_GPIO_GetBitPos>
  if ( irqHandler != NULL)
 8006bc6:	2e00      	cmp	r6, #0
 8006bc8:	d00e      	beq.n	8006be8 <HW_GPIO_SetIrq+0x30>
    GpioIrq[ BitPos ] = irqHandler;
 8006bca:	0080      	lsls	r0, r0, #2
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <HW_GPIO_SetIrq+0x3c>)
 8006bce:	50c6      	str	r6, [r0, r3]
    IRQnb = MSP_GetIRQn( GPIO_Pin );
 8006bd0:	0020      	movs	r0, r4
 8006bd2:	f000 fe5b 	bl	800788c <MSP_GetIRQn>
 8006bd6:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8006bd8:	2200      	movs	r2, #0
 8006bda:	0029      	movs	r1, r5
 8006bdc:	f7fd fb18 	bl	8004210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 8006be0:	0020      	movs	r0, r4
 8006be2:	f7fd fb47 	bl	8004274 <HAL_NVIC_EnableIRQ>
}
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
    GpioIrq[ BitPos ] = NULL;
 8006be8:	0080      	lsls	r0, r0, #2
 8006bea:	2200      	movs	r2, #0
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <HW_GPIO_SetIrq+0x3c>)
 8006bee:	50c2      	str	r2, [r0, r3]
}
 8006bf0:	e7f9      	b.n	8006be6 <HW_GPIO_SetIrq+0x2e>
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	20000358 	.word	0x20000358

08006bf8 <HW_GPIO_IrqHandler>:
{
 8006bf8:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 8006bfa:	f7ff ff6d 	bl	8006ad8 <HW_GPIO_GetBitPos>
  if ( GpioIrq[ BitPos ]  != NULL)
 8006bfe:	0080      	lsls	r0, r0, #2
 8006c00:	4b02      	ldr	r3, [pc, #8]	; (8006c0c <HW_GPIO_IrqHandler+0x14>)
 8006c02:	58c3      	ldr	r3, [r0, r3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d000      	beq.n	8006c0a <HW_GPIO_IrqHandler+0x12>
    GpioIrq[ BitPos ] ( );
 8006c08:	4798      	blx	r3
}
 8006c0a:	bd10      	pop	{r4, pc}
 8006c0c:	20000358 	.word	0x20000358

08006c10 <HW_GPIO_Write>:
{
 8006c10:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	f7fd fc22 	bl	800445c <HAL_GPIO_WritePin>
}
 8006c18:	bd10      	pop	{r4, pc}
	...

08006c1c <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig( void )
{
 8006c1c:	b530      	push	{r4, r5, lr}
 8006c1e:	b087      	sub	sp, #28
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 8006c20:	4d18      	ldr	r5, [pc, #96]	; (8006c84 <HW_RTC_SetConfig+0x68>)
 8006c22:	4b19      	ldr	r3, [pc, #100]	; (8006c88 <HW_RTC_SetConfig+0x6c>)
 8006c24:	602b      	str	r3, [r5, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8006c26:	2400      	movs	r4, #0
 8006c28:	606c      	str	r4, [r5, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8006c2a:	60ac      	str	r4, [r5, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8006c2c:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <HW_RTC_SetConfig+0x70>)
 8006c2e:	60eb      	str	r3, [r5, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8006c30:	612c      	str	r4, [r5, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006c32:	61ac      	str	r4, [r5, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006c34:	61ec      	str	r4, [r5, #28]

  HAL_RTC_Init( &RtcHandle );
 8006c36:	0028      	movs	r0, r5
 8006c38:	f7fe fbf8 	bl	800542c <HAL_RTC_Init>
  
  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 0;
 8006c3c:	466b      	mov	r3, sp
 8006c3e:	70dc      	strb	r4, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8006c40:	2301      	movs	r3, #1
 8006c42:	466a      	mov	r2, sp
 8006c44:	7053      	strb	r3, [r2, #1]
  RTC_DateStruct.Date = 1;
 8006c46:	7093      	strb	r3, [r2, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8006c48:	7013      	strb	r3, [r2, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	4669      	mov	r1, sp
 8006c4e:	0028      	movs	r0, r5
 8006c50:	f7fe fcd4 	bl	80055fc <HAL_RTC_SetDate>
  
  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8006c54:	a901      	add	r1, sp, #4
 8006c56:	700c      	strb	r4, [r1, #0]
  RTC_TimeStruct.Minutes = 0;
 8006c58:	704c      	strb	r4, [r1, #1]

  RTC_TimeStruct.Seconds = 0;
 8006c5a:	708c      	strb	r4, [r1, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8006c5c:	70cc      	strb	r4, [r1, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8006c5e:	604c      	str	r4, [r1, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8006c60:	610c      	str	r4, [r1, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8006c62:	60cc      	str	r4, [r1, #12]
  
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 8006c64:	2200      	movs	r2, #0
 8006c66:	0028      	movs	r0, r5
 8006c68:	f7fe fc42 	bl	80054f0 <HAL_RTC_SetTime>
  
 /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 8006c6c:	0028      	movs	r0, r5
 8006c6e:	f7fe febb 	bl	80059e8 <HAL_RTCEx_EnableBypassShadow>

  //Reset smooth calibration settings
  HAL_RTCEx_SetSmoothCalib(&RtcHandle,RTC_SMOOTHCALIB_PERIOD_32SEC,RTC_SMOOTHCALIB_PLUSPULSES_RESET,0);
 8006c72:	2300      	movs	r3, #0
 8006c74:	2200      	movs	r2, #0
 8006c76:	2100      	movs	r1, #0
 8006c78:	0028      	movs	r0, r5
 8006c7a:	f7fe fe6f 	bl	800595c <HAL_RTCEx_SetSmoothCalib>
}
 8006c7e:	b007      	add	sp, #28
 8006c80:	bd30      	pop	{r4, r5, pc}
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	20000398 	.word	0x20000398
 8006c88:	40002800 	.word	0x40002800
 8006c8c:	00007fff 	.word	0x00007fff

08006c90 <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig( void )
{
 8006c90:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8006c92:	2180      	movs	r1, #128	; 0x80
 8006c94:	0049      	lsls	r1, r1, #1
 8006c96:	4802      	ldr	r0, [pc, #8]	; (8006ca0 <HW_RTC_SetAlarmConfig+0x10>)
 8006c98:	f7fe fb20 	bl	80052dc <HAL_RTC_DeactivateAlarm>
}
 8006c9c:	bd10      	pop	{r4, pc}
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	20000398 	.word	0x20000398

08006ca4 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static TimerTime_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	0006      	movs	r6, r0
 8006ca8:	000c      	movs	r4, r1
  TimerTime_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8006caa:	2200      	movs	r2, #0
 8006cac:	4821      	ldr	r0, [pc, #132]	; (8006d34 <HW_RTC_GetCalendarValue+0x90>)
 8006cae:	f7fe fe05 	bl	80058bc <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
    first_read = RTC_TimeStruct->SubSeconds;
 8006cb2:	6867      	ldr	r7, [r4, #4]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 8006cb4:	4d1f      	ldr	r5, [pc, #124]	; (8006d34 <HW_RTC_GetCalendarValue+0x90>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	0031      	movs	r1, r6
 8006cba:	0028      	movs	r0, r5
 8006cbc:	f7fe fe2a 	bl	8005914 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	0021      	movs	r1, r4
 8006cc4:	0028      	movs	r0, r5
 8006cc6:	f7fe fdf9 	bl	80058bc <HAL_RTC_GetTime>
  } while (first_read != RTC_TimeStruct->SubSeconds);
 8006cca:	6860      	ldr	r0, [r4, #4]
 8006ccc:	4287      	cmp	r7, r0
 8006cce:	d1f0      	bne.n	8006cb2 <HW_RTC_GetCalendarValue+0xe>
 
  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 8006cd0:	78f2      	ldrb	r2, [r6, #3]
 8006cd2:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <HW_RTC_GetCalendarValue+0x94>)
 8006cd4:	4353      	muls	r3, r2
 8006cd6:	3303      	adds	r3, #3
 8006cd8:	089b      	lsrs	r3, r3, #2

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8006cda:	0792      	lsls	r2, r2, #30
 8006cdc:	d027      	beq.n	8006d2e <HW_RTC_GetCalendarValue+0x8a>
 8006cde:	4f17      	ldr	r7, [pc, #92]	; (8006d3c <HW_RTC_GetCalendarValue+0x98>)
 
  calendarValue +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 8006ce0:	7871      	ldrb	r1, [r6, #1]
 8006ce2:	3901      	subs	r1, #1
 8006ce4:	010a      	lsls	r2, r1, #4
 8006ce6:	1a52      	subs	r2, r2, r1
 8006ce8:	0092      	lsls	r2, r2, #2
 8006cea:	1852      	adds	r2, r2, r1
 8006cec:	3201      	adds	r2, #1
 8006cee:	0fd5      	lsrs	r5, r2, #31
 8006cf0:	18ad      	adds	r5, r5, r2
 8006cf2:	106d      	asrs	r5, r5, #1
 8006cf4:	0049      	lsls	r1, r1, #1
 8006cf6:	40cf      	lsrs	r7, r1
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	4017      	ands	r7, r2
 8006cfc:	1bed      	subs	r5, r5, r7
 8006cfe:	195b      	adds	r3, r3, r5

  calendarValue += (RTC_DateStruct->Date -1);
 8006d00:	78b2      	ldrb	r2, [r6, #2]
 8006d02:	18d2      	adds	r2, r2, r3
 8006d04:	3a01      	subs	r2, #1
  
  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY; 
 8006d06:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <HW_RTC_GetCalendarValue+0x9c>)
 8006d08:	4353      	muls	r3, r2

  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 8006d0a:	78a5      	ldrb	r5, [r4, #2]
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
                     ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 8006d0c:	7821      	ldrb	r1, [r4, #0]
 8006d0e:	22e1      	movs	r2, #225	; 0xe1
 8006d10:	0112      	lsls	r2, r2, #4
 8006d12:	434a      	muls	r2, r1
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 8006d14:	7864      	ldrb	r4, [r4, #1]
 8006d16:	0121      	lsls	r1, r4, #4
 8006d18:	1b09      	subs	r1, r1, r4
 8006d1a:	008c      	lsls	r4, r1, #2
 8006d1c:	1912      	adds	r2, r2, r4
 8006d1e:	1952      	adds	r2, r2, r5
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 8006d20:	189b      	adds	r3, r3, r2


  
  calendarValue = (calendarValue<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 8006d22:	03db      	lsls	r3, r3, #15
 8006d24:	1a18      	subs	r0, r3, r0
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <HW_RTC_GetCalendarValue+0xa0>)
 8006d28:	469c      	mov	ip, r3
 8006d2a:	4460      	add	r0, ip

  return( calendarValue );
}
 8006d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8006d2e:	4f06      	ldr	r7, [pc, #24]	; (8006d48 <HW_RTC_GetCalendarValue+0xa4>)
 8006d30:	e7d6      	b.n	8006ce0 <HW_RTC_GetCalendarValue+0x3c>
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	20000398 	.word	0x20000398
 8006d38:	000005b5 	.word	0x000005b5
 8006d3c:	0099aaa0 	.word	0x0099aaa0
 8006d40:	00015180 	.word	0x00015180
 8006d44:	00007fff 	.word	0x00007fff
 8006d48:	00445550 	.word	0x00445550

08006d4c <HW_RTC_GetMinimumTimeout>:
}
 8006d4c:	2003      	movs	r0, #3
 8006d4e:	4770      	bx	lr

08006d50 <HW_RTC_ms2Tick>:
{
 8006d50:	b510      	push	{r4, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMicroSec) * CONV_DENOM ) / CONV_NUMER );
 8006d52:	0d01      	lsrs	r1, r0, #20
 8006d54:	0300      	lsls	r0, r0, #12
 8006d56:	227d      	movs	r2, #125	; 0x7d
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f7f9 fb9b 	bl	8000494 <__aeabi_uldivmod>
}
 8006d5e:	bd10      	pop	{r4, pc}

08006d60 <HW_RTC_ms2TickFloat>:
{
 8006d60:	b510      	push	{r4, lr}
  return  (uint32_t)round((timeMicroSec * (double)(CONV_DENOM))) / ((double)(CONV_NUMER));
 8006d62:	2200      	movs	r2, #0
 8006d64:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <HW_RTC_ms2TickFloat+0x24>)
 8006d66:	f7fa fbd7 	bl	8001518 <__aeabi_dmul>
 8006d6a:	f003 fa49 	bl	800a200 <round>
 8006d6e:	f7f9 fbb1 	bl	80004d4 <__aeabi_d2uiz>
 8006d72:	f7fb f9fd 	bl	8002170 <__aeabi_ui2d>
 8006d76:	2200      	movs	r2, #0
 8006d78:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <HW_RTC_ms2TickFloat+0x28>)
 8006d7a:	f7f9 ff99 	bl	8000cb0 <__aeabi_ddiv>
 8006d7e:	f7f9 fba9 	bl	80004d4 <__aeabi_d2uiz>
}
 8006d82:	bd10      	pop	{r4, pc}
 8006d84:	40b00000 	.word	0x40b00000
 8006d88:	405f4000 	.word	0x405f4000

08006d8c <HW_RTC_Tick2ms>:
{
 8006d8c:	b570      	push	{r4, r5, r6, lr}
  return  ( ( (uint64_t)( tick )* CONV_NUMER ) / CONV_DENOM );
 8006d8e:	0004      	movs	r4, r0
 8006d90:	2500      	movs	r5, #0
 8006d92:	0ec3      	lsrs	r3, r0, #27
 8006d94:	0142      	lsls	r2, r0, #5
 8006d96:	1b12      	subs	r2, r2, r4
 8006d98:	41ab      	sbcs	r3, r5
 8006d9a:	0f96      	lsrs	r6, r2, #30
 8006d9c:	0099      	lsls	r1, r3, #2
 8006d9e:	4331      	orrs	r1, r6
 8006da0:	0090      	lsls	r0, r2, #2
 8006da2:	1900      	adds	r0, r0, r4
 8006da4:	4169      	adcs	r1, r5
 8006da6:	050b      	lsls	r3, r1, #20
 8006da8:	0b00      	lsrs	r0, r0, #12
 8006daa:	4318      	orrs	r0, r3
}
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
	...

08006db0 <HW_RTC_Tick2msFloat>:
{
 8006db0:	b510      	push	{r4, lr}
    return  (((double)(tick) * (double)(CONV_NUMER))) / (double)(CONV_DENOM);
 8006db2:	f7fb f9dd 	bl	8002170 <__aeabi_ui2d>
 8006db6:	2200      	movs	r2, #0
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <HW_RTC_Tick2msFloat+0x18>)
 8006dba:	f7fa fbad 	bl	8001518 <__aeabi_dmul>
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4b02      	ldr	r3, [pc, #8]	; (8006dcc <HW_RTC_Tick2msFloat+0x1c>)
 8006dc2:	f7fa fba9 	bl	8001518 <__aeabi_dmul>
}
 8006dc6:	bd10      	pop	{r4, pc}
 8006dc8:	405f4000 	.word	0x405f4000
 8006dcc:	3f300000 	.word	0x3f300000

08006dd0 <HW_RTC_GetTimerElapsedTime>:
{
 8006dd0:	b500      	push	{lr}
 8006dd2:	b087      	sub	sp, #28
  TimerTime_t CalendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8006dd4:	a901      	add	r1, sp, #4
 8006dd6:	4668      	mov	r0, sp
 8006dd8:	f7ff ff64 	bl	8006ca4 <HW_RTC_GetCalendarValue>
  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 8006ddc:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <HW_RTC_GetTimerElapsedTime+0x18>)
 8006dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de0:	1ac0      	subs	r0, r0, r3
}
 8006de2:	b007      	add	sp, #28
 8006de4:	bd00      	pop	{pc}
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	20000398 	.word	0x20000398

08006dec <HW_RTC_GetTimerValue>:
{
 8006dec:	b500      	push	{lr}
 8006dee:	b087      	sub	sp, #28
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8006df0:	a901      	add	r1, sp, #4
 8006df2:	4668      	mov	r0, sp
 8006df4:	f7ff ff56 	bl	8006ca4 <HW_RTC_GetCalendarValue>
}
 8006df8:	b007      	add	sp, #28
 8006dfa:	bd00      	pop	{pc}

08006dfc <HW_RTC_StopAlarm>:
{
 8006dfc:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 8006dfe:	4806      	ldr	r0, [pc, #24]	; (8006e18 <HW_RTC_StopAlarm+0x1c>)
 8006e00:	6801      	ldr	r1, [r0, #0]
 8006e02:	68ca      	ldr	r2, [r1, #12]
 8006e04:	23ff      	movs	r3, #255	; 0xff
 8006e06:	401a      	ands	r2, r3
 8006e08:	4b04      	ldr	r3, [pc, #16]	; (8006e1c <HW_RTC_StopAlarm+0x20>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8006e0e:	2180      	movs	r1, #128	; 0x80
 8006e10:	0049      	lsls	r1, r1, #1
 8006e12:	f7fe fa63 	bl	80052dc <HAL_RTC_DeactivateAlarm>
}
 8006e16:	bd10      	pop	{r4, pc}
 8006e18:	20000398 	.word	0x20000398
 8006e1c:	fffffe7f 	.word	0xfffffe7f

08006e20 <HW_RTC_StartWakeUpAlarm>:
{
 8006e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e22:	b087      	sub	sp, #28
 8006e24:	0004      	movs	r4, r0
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8006e26:	ad01      	add	r5, sp, #4
 8006e28:	4950      	ldr	r1, [pc, #320]	; (8006f6c <HW_RTC_StartWakeUpAlarm+0x14c>)
 8006e2a:	002a      	movs	r2, r5
 8006e2c:	000b      	movs	r3, r1
 8006e2e:	3358      	adds	r3, #88	; 0x58
 8006e30:	cbc1      	ldmia	r3!, {r0, r6, r7}
 8006e32:	c2c1      	stmia	r2!, {r0, r6, r7}
 8006e34:	cb41      	ldmia	r3!, {r0, r6}
 8006e36:	c241      	stmia	r2!, {r0, r6}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8006e38:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 8006e3a:	9300      	str	r3, [sp, #0]
  HW_RTC_StopAlarm( );
 8006e3c:	f7ff ffde 	bl	8006dfc <HW_RTC_StopAlarm>
  DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
 8006e40:	2280      	movs	r2, #128	; 0x80
 8006e42:	0192      	lsls	r2, r2, #6
 8006e44:	4b4a      	ldr	r3, [pc, #296]	; (8006f70 <HW_RTC_StartWakeUpAlarm+0x150>)
 8006e46:	619a      	str	r2, [r3, #24]
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8006e48:	88ab      	ldrh	r3, [r5, #4]
 8006e4a:	4f4a      	ldr	r7, [pc, #296]	; (8006f74 <HW_RTC_StartWakeUpAlarm+0x154>)
 8006e4c:	1aff      	subs	r7, r7, r3
 8006e4e:	b2bf      	uxth	r7, r7
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8006e50:	0463      	lsls	r3, r4, #17
 8006e52:	0c5b      	lsrs	r3, r3, #17
 8006e54:	18ff      	adds	r7, r7, r3
 8006e56:	b2bf      	uxth	r7, r7
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 8006e58:	0be3      	lsrs	r3, r4, #15
  rtcAlarmDays =  RTC_DateStruct.Date;
 8006e5a:	466a      	mov	r2, sp
 8006e5c:	7892      	ldrb	r2, [r2, #2]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8006e5e:	e004      	b.n	8006e6a <HW_RTC_StartWakeUpAlarm+0x4a>
    timeoutValue -= SECONDS_IN_1DAY;
 8006e60:	4945      	ldr	r1, [pc, #276]	; (8006f78 <HW_RTC_StartWakeUpAlarm+0x158>)
 8006e62:	468c      	mov	ip, r1
 8006e64:	4463      	add	r3, ip
    rtcAlarmDays++;
 8006e66:	3201      	adds	r2, #1
 8006e68:	b292      	uxth	r2, r2
  while (timeoutValue >= SECONDS_IN_1DAY)
 8006e6a:	4944      	ldr	r1, [pc, #272]	; (8006f7c <HW_RTC_StartWakeUpAlarm+0x15c>)
 8006e6c:	428b      	cmp	r3, r1
 8006e6e:	d8f7      	bhi.n	8006e60 <HW_RTC_StartWakeUpAlarm+0x40>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8006e70:	a901      	add	r1, sp, #4
 8006e72:	780c      	ldrb	r4, [r1, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8006e74:	e004      	b.n	8006e80 <HW_RTC_StartWakeUpAlarm+0x60>
    timeoutValue -= SECONDS_IN_1HOUR;
 8006e76:	4942      	ldr	r1, [pc, #264]	; (8006f80 <HW_RTC_StartWakeUpAlarm+0x160>)
 8006e78:	468c      	mov	ip, r1
 8006e7a:	4463      	add	r3, ip
    rtcAlarmHours++;
 8006e7c:	3401      	adds	r4, #1
 8006e7e:	b2a4      	uxth	r4, r4
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8006e80:	4940      	ldr	r1, [pc, #256]	; (8006f84 <HW_RTC_StartWakeUpAlarm+0x164>)
 8006e82:	428b      	cmp	r3, r1
 8006e84:	d8f7      	bhi.n	8006e76 <HW_RTC_StartWakeUpAlarm+0x56>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8006e86:	a901      	add	r1, sp, #4
 8006e88:	784d      	ldrb	r5, [r1, #1]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8006e8a:	e002      	b.n	8006e92 <HW_RTC_StartWakeUpAlarm+0x72>
    timeoutValue -= SECONDS_IN_1MINUTE;
 8006e8c:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 8006e8e:	3501      	adds	r5, #1
 8006e90:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8006e92:	2b3b      	cmp	r3, #59	; 0x3b
 8006e94:	d8fa      	bhi.n	8006e8c <HW_RTC_StartWakeUpAlarm+0x6c>
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8006e96:	a901      	add	r1, sp, #4
 8006e98:	788e      	ldrb	r6, [r1, #2]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	18f6      	adds	r6, r6, r3
 8006e9e:	b2b6      	uxth	r6, r6
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8006ea0:	e005      	b.n	8006eae <HW_RTC_StartWakeUpAlarm+0x8e>
    rtcAlarmSubSeconds -= (PREDIV_S+1);
 8006ea2:	4b39      	ldr	r3, [pc, #228]	; (8006f88 <HW_RTC_StartWakeUpAlarm+0x168>)
 8006ea4:	469c      	mov	ip, r3
 8006ea6:	4467      	add	r7, ip
 8006ea8:	b2bf      	uxth	r7, r7
    rtcAlarmSeconds++;
 8006eaa:	3601      	adds	r6, #1
 8006eac:	b2b6      	uxth	r6, r6
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8006eae:	b23b      	sxth	r3, r7
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	dbf6      	blt.n	8006ea2 <HW_RTC_StartWakeUpAlarm+0x82>
 8006eb4:	e003      	b.n	8006ebe <HW_RTC_StartWakeUpAlarm+0x9e>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006eb6:	3e3c      	subs	r6, #60	; 0x3c
 8006eb8:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 8006eba:	3501      	adds	r5, #1
 8006ebc:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8006ebe:	2e3b      	cmp	r6, #59	; 0x3b
 8006ec0:	d8f9      	bhi.n	8006eb6 <HW_RTC_StartWakeUpAlarm+0x96>
 8006ec2:	e003      	b.n	8006ecc <HW_RTC_StartWakeUpAlarm+0xac>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006ec4:	3d3c      	subs	r5, #60	; 0x3c
 8006ec6:	b2ad      	uxth	r5, r5
    rtcAlarmHours++;
 8006ec8:	3401      	adds	r4, #1
 8006eca:	b2a4      	uxth	r4, r4
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8006ecc:	2d3b      	cmp	r5, #59	; 0x3b
 8006ece:	d8f9      	bhi.n	8006ec4 <HW_RTC_StartWakeUpAlarm+0xa4>
 8006ed0:	e003      	b.n	8006eda <HW_RTC_StartWakeUpAlarm+0xba>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8006ed2:	3c18      	subs	r4, #24
 8006ed4:	b2a4      	uxth	r4, r4
    rtcAlarmDays++;
 8006ed6:	3201      	adds	r2, #1
 8006ed8:	b292      	uxth	r2, r2
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8006eda:	2c17      	cmp	r4, #23
 8006edc:	d8f9      	bhi.n	8006ed2 <HW_RTC_StartWakeUpAlarm+0xb2>
  if( RTC_DateStruct.Year % 4 == 0 ) 
 8006ede:	466b      	mov	r3, sp
 8006ee0:	78db      	ldrb	r3, [r3, #3]
 8006ee2:	079b      	lsls	r3, r3, #30
 8006ee4:	d10d      	bne.n	8006f02 <HW_RTC_StartWakeUpAlarm+0xe2>
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 8006ee6:	466b      	mov	r3, sp
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	4927      	ldr	r1, [pc, #156]	; (8006f8c <HW_RTC_StartWakeUpAlarm+0x16c>)
 8006eee:	5cc9      	ldrb	r1, [r1, r3]
 8006ef0:	428a      	cmp	r2, r1
 8006ef2:	d913      	bls.n	8006f1c <HW_RTC_StartWakeUpAlarm+0xfc>
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8006ef4:	4925      	ldr	r1, [pc, #148]	; (8006f8c <HW_RTC_StartWakeUpAlarm+0x16c>)
 8006ef6:	5cc9      	ldrb	r1, [r1, r3]
 8006ef8:	0010      	movs	r0, r2
 8006efa:	f7f9 fa87 	bl	800040c <__aeabi_idivmod>
 8006efe:	b28a      	uxth	r2, r1
 8006f00:	e00c      	b.n	8006f1c <HW_RTC_StartWakeUpAlarm+0xfc>
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 8006f02:	466b      	mov	r3, sp
 8006f04:	7859      	ldrb	r1, [r3, #1]
 8006f06:	3901      	subs	r1, #1
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <HW_RTC_StartWakeUpAlarm+0x16c>)
 8006f0a:	185b      	adds	r3, r3, r1
 8006f0c:	7b19      	ldrb	r1, [r3, #12]
 8006f0e:	b28b      	uxth	r3, r1
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d903      	bls.n	8006f1c <HW_RTC_StartWakeUpAlarm+0xfc>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8006f14:	0010      	movs	r0, r2
 8006f16:	f7f9 fa79 	bl	800040c <__aeabi_idivmod>
 8006f1a:	b28a      	uxth	r2, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 8006f1c:	4b15      	ldr	r3, [pc, #84]	; (8006f74 <HW_RTC_StartWakeUpAlarm+0x154>)
 8006f1e:	1bdf      	subs	r7, r3, r7
 8006f20:	4812      	ldr	r0, [pc, #72]	; (8006f6c <HW_RTC_StartWakeUpAlarm+0x14c>)
 8006f22:	62c7      	str	r7, [r0, #44]	; 0x2c
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 8006f24:	23f0      	movs	r3, #240	; 0xf0
 8006f26:	051b      	lsls	r3, r3, #20
 8006f28:	6403      	str	r3, [r0, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8006f2a:	0001      	movs	r1, r0
 8006f2c:	3128      	adds	r1, #40	; 0x28
 8006f2e:	708e      	strb	r6, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8006f30:	704d      	strb	r5, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8006f32:	2328      	movs	r3, #40	; 0x28
 8006f34:	54c4      	strb	r4, [r0, r3]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 8006f36:	0004      	movs	r4, r0
 8006f38:	3448      	adds	r4, #72	; 0x48
 8006f3a:	7022      	strb	r2, [r4, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8006f3c:	ac01      	add	r4, sp, #4
 8006f3e:	78e2      	ldrb	r2, [r4, #3]
 8006f40:	70ca      	strb	r2, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8006f42:	2300      	movs	r3, #0
 8006f44:	6443      	str	r3, [r0, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8006f46:	63c3      	str	r3, [r0, #60]	; 0x3c
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006f48:	2280      	movs	r2, #128	; 0x80
 8006f4a:	0052      	lsls	r2, r2, #1
 8006f4c:	64c2      	str	r2, [r0, #76]	; 0x4c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006f4e:	6343      	str	r3, [r0, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006f50:	6383      	str	r3, [r0, #56]	; 0x38
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8006f52:	2200      	movs	r2, #0
 8006f54:	f7fe fbc8 	bl	80056e8 <HAL_RTC_SetAlarm_IT>
  DBG( HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct ); );
 8006f58:	0021      	movs	r1, r4
 8006f5a:	4668      	mov	r0, sp
 8006f5c:	f7ff fea2 	bl	8006ca4 <HW_RTC_GetCalendarValue>
  DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
 8006f60:	2280      	movs	r2, #128	; 0x80
 8006f62:	0192      	lsls	r2, r2, #6
 8006f64:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <HW_RTC_StartWakeUpAlarm+0x150>)
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f68:	b007      	add	sp, #28
 8006f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f6c:	20000398 	.word	0x20000398
 8006f70:	50000400 	.word	0x50000400
 8006f74:	00007fff 	.word	0x00007fff
 8006f78:	fffeae80 	.word	0xfffeae80
 8006f7c:	0001517f 	.word	0x0001517f
 8006f80:	fffff1f0 	.word	0xfffff1f0
 8006f84:	00000e0f 	.word	0x00000e0f
 8006f88:	ffff8000 	.word	0xffff8000
 8006f8c:	0800a4b0 	.word	0x0800a4b0

08006f90 <HW_RTC_SetAlarm>:
{
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	0005      	movs	r5, r0
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 8006f94:	2350      	movs	r3, #80	; 0x50
 8006f96:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <HW_RTC_SetAlarm+0x44>)
 8006f98:	5ed4      	ldrsh	r4, [r2, r3]
 8006f9a:	3403      	adds	r4, #3
 8006f9c:	f7ff ff18 	bl	8006dd0 <HW_RTC_GetTimerElapsedTime>
 8006fa0:	1a28      	subs	r0, r5, r0
 8006fa2:	4284      	cmp	r4, r0
 8006fa4:	d20b      	bcs.n	8006fbe <HW_RTC_SetAlarm+0x2e>
    LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2004      	movs	r0, #4
 8006faa:	f7ff fb47 	bl	800663c <LPM_SetStopMode>
  if( LPM_GetMode() == LPM_StopMode )
 8006fae:	f7ff fb5b 	bl	8006668 <LPM_GetMode>
 8006fb2:	2801      	cmp	r0, #1
 8006fb4:	d008      	beq.n	8006fc8 <HW_RTC_SetAlarm+0x38>
  HW_RTC_StartWakeUpAlarm( timeout );
 8006fb6:	0028      	movs	r0, r5
 8006fb8:	f7ff ff32 	bl	8006e20 <HW_RTC_StartWakeUpAlarm>
}
 8006fbc:	bd70      	pop	{r4, r5, r6, pc}
    LPM_SetStopMode(LPM_RTC_Id , LPM_Disable );
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	2004      	movs	r0, #4
 8006fc2:	f7ff fb3b 	bl	800663c <LPM_SetStopMode>
 8006fc6:	e7f2      	b.n	8006fae <HW_RTC_SetAlarm+0x1e>
    timeout = timeout -  McuWakeUpTimeCal;
 8006fc8:	2350      	movs	r3, #80	; 0x50
 8006fca:	4a02      	ldr	r2, [pc, #8]	; (8006fd4 <HW_RTC_SetAlarm+0x44>)
 8006fcc:	5ed3      	ldrsh	r3, [r2, r3]
 8006fce:	1aed      	subs	r5, r5, r3
 8006fd0:	e7f1      	b.n	8006fb6 <HW_RTC_SetAlarm+0x26>
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	20000398 	.word	0x20000398

08006fd8 <HW_RTC_IrqHandler>:
{
 8006fd8:	b510      	push	{r4, lr}
  LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 8006fda:	2100      	movs	r1, #0
 8006fdc:	2004      	movs	r0, #4
 8006fde:	f7ff fb2d 	bl	800663c <LPM_SetStopMode>
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8006fe2:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <HW_RTC_IrqHandler+0x38>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	04d2      	lsls	r2, r2, #19
 8006fea:	d502      	bpl.n	8006ff2 <HW_RTC_IrqHandler+0x1a>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	05d2      	lsls	r2, r2, #23
 8006ff0:	d400      	bmi.n	8006ff4 <HW_RTC_IrqHandler+0x1c>
}
 8006ff2:	bd10      	pop	{r4, pc}
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF); 
 8006ff4:	68d9      	ldr	r1, [r3, #12]
 8006ff6:	22ff      	movs	r2, #255	; 0xff
 8006ff8:	4011      	ands	r1, r2
 8006ffa:	4a06      	ldr	r2, [pc, #24]	; (8007014 <HW_RTC_IrqHandler+0x3c>)
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	60da      	str	r2, [r3, #12]
      __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007000:	2280      	movs	r2, #128	; 0x80
 8007002:	0292      	lsls	r2, r2, #10
 8007004:	4b04      	ldr	r3, [pc, #16]	; (8007018 <HW_RTC_IrqHandler+0x40>)
 8007006:	615a      	str	r2, [r3, #20]
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <HW_RTC_IrqHandler+0x38>)
 800700a:	f000 fc37 	bl	800787c <HAL_RTC_AlarmAEventCallback>
}
 800700e:	e7f0      	b.n	8006ff2 <HW_RTC_IrqHandler+0x1a>
 8007010:	20000398 	.word	0x20000398
 8007014:	fffffe7f 	.word	0xfffffe7f
 8007018:	40010400 	.word	0x40010400

0800701c <HW_RTC_DelayMs>:
{
 800701c:	b570      	push	{r4, r5, r6, lr}
  delayValue = HW_RTC_ms2Tick( delay );
 800701e:	f7ff fe97 	bl	8006d50 <HW_RTC_ms2Tick>
 8007022:	0005      	movs	r5, r0
  timeout = HW_RTC_GetTimerValue( );
 8007024:	f7ff fee2 	bl	8006dec <HW_RTC_GetTimerValue>
 8007028:	0004      	movs	r4, r0
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 800702a:	e000      	b.n	800702e <HW_RTC_DelayMs+0x12>
  __ASM volatile ("nop");
 800702c:	46c0      	nop			; (mov r8, r8)
 800702e:	f7ff fedd 	bl	8006dec <HW_RTC_GetTimerValue>
 8007032:	1b00      	subs	r0, r0, r4
 8007034:	4285      	cmp	r5, r0
 8007036:	d8f9      	bhi.n	800702c <HW_RTC_DelayMs+0x10>
}
 8007038:	bd70      	pop	{r4, r5, r6, pc}
	...

0800703c <HW_RTC_SetTimerContext>:
{
 800703c:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 800703e:	4c04      	ldr	r4, [pc, #16]	; (8007050 <HW_RTC_SetTimerContext+0x14>)
 8007040:	0021      	movs	r1, r4
 8007042:	3158      	adds	r1, #88	; 0x58
 8007044:	0020      	movs	r0, r4
 8007046:	306c      	adds	r0, #108	; 0x6c
 8007048:	f7ff fe2c 	bl	8006ca4 <HW_RTC_GetCalendarValue>
 800704c:	6560      	str	r0, [r4, #84]	; 0x54
}
 800704e:	bd10      	pop	{r4, pc}
 8007050:	20000398 	.word	0x20000398

08007054 <HW_RTC_Init>:
{
 8007054:	b510      	push	{r4, lr}
  if( HW_RTC_Initalized == false )
 8007056:	2370      	movs	r3, #112	; 0x70
 8007058:	4a07      	ldr	r2, [pc, #28]	; (8007078 <HW_RTC_Init+0x24>)
 800705a:	5cd3      	ldrb	r3, [r2, r3]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d000      	beq.n	8007062 <HW_RTC_Init+0xe>
}
 8007060:	bd10      	pop	{r4, pc}
    HW_RTC_SetConfig( );
 8007062:	f7ff fddb 	bl	8006c1c <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig( );
 8007066:	f7ff fe13 	bl	8006c90 <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext( );
 800706a:	f7ff ffe7 	bl	800703c <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 800706e:	2101      	movs	r1, #1
 8007070:	2370      	movs	r3, #112	; 0x70
 8007072:	4a01      	ldr	r2, [pc, #4]	; (8007078 <HW_RTC_Init+0x24>)
 8007074:	54d1      	strb	r1, [r2, r3]
}
 8007076:	e7f3      	b.n	8007060 <HW_RTC_Init+0xc>
 8007078:	20000398 	.word	0x20000398

0800707c <HW_RTC_GetTimerContext>:
  return (uint32_t) RtcTimerContext.Rtc_Time;
 800707c:	4b01      	ldr	r3, [pc, #4]	; (8007084 <HW_RTC_GetTimerContext+0x8>)
 800707e:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
 8007080:	4770      	bx	lr
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	20000398 	.word	0x20000398

08007088 <SpiFrequency>:
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 8007088:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <SpiFrequency+0x38>)
 800708a:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 800708c:	2300      	movs	r3, #0
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 800708e:	4282      	cmp	r2, r0
 8007090:	d903      	bls.n	800709a <SpiFrequency+0x12>
  {
    divisor++;
 8007092:	3301      	adds	r3, #1
    SysClkTmp= ( SysClkTmp >> 1);
 8007094:	0852      	lsrs	r2, r2, #1
    
    if (divisor >= 7)
 8007096:	2b06      	cmp	r3, #6
 8007098:	d9f9      	bls.n	800708e <SpiFrequency+0x6>
      break;
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800709a:	075a      	lsls	r2, r3, #29
 800709c:	d409      	bmi.n	80070b2 <SpiFrequency+0x2a>
 800709e:	2000      	movs	r0, #0
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 80070a0:	079a      	lsls	r2, r3, #30
 80070a2:	d408      	bmi.n	80070b6 <SpiFrequency+0x2e>
 80070a4:	2200      	movs	r2, #0
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 80070a6:	4302      	orrs	r2, r0
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 80070a8:	07db      	lsls	r3, r3, #31
 80070aa:	d506      	bpl.n	80070ba <SpiFrequency+0x32>
 80070ac:	2008      	movs	r0, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 80070ae:	4310      	orrs	r0, r2
  
  return baudRate;
}
 80070b0:	4770      	bx	lr
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 80070b2:	2020      	movs	r0, #32
 80070b4:	e7f4      	b.n	80070a0 <SpiFrequency+0x18>
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 80070b6:	2210      	movs	r2, #16
 80070b8:	e7f5      	b.n	80070a6 <SpiFrequency+0x1e>
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 80070ba:	2000      	movs	r0, #0
 80070bc:	e7f7      	b.n	80070ae <SpiFrequency+0x26>
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	20000044 	.word	0x20000044

080070c4 <HW_SPI_Init>:
{
 80070c4:	b530      	push	{r4, r5, lr}
 80070c6:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 80070c8:	2214      	movs	r2, #20
 80070ca:	2100      	movs	r1, #0
 80070cc:	a801      	add	r0, sp, #4
 80070ce:	f000 fef8 	bl	8007ec2 <memset>
  hspi.Instance = SPI1;
 80070d2:	4c25      	ldr	r4, [pc, #148]	; (8007168 <HW_SPI_Init+0xa4>)
 80070d4:	4b25      	ldr	r3, [pc, #148]	; (800716c <HW_SPI_Init+0xa8>)
 80070d6:	6023      	str	r3, [r4, #0]
  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 80070d8:	4825      	ldr	r0, [pc, #148]	; (8007170 <HW_SPI_Init+0xac>)
 80070da:	f7ff ffd5 	bl	8007088 <SpiFrequency>
 80070de:	61e0      	str	r0, [r4, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60a3      	str	r3, [r4, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 80070e4:	2282      	movs	r2, #130	; 0x82
 80070e6:	0052      	lsls	r2, r2, #1
 80070e8:	6062      	str	r2, [r4, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80070ea:	6123      	str	r3, [r4, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80070ec:	6163      	str	r3, [r4, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 80070ee:	60e3      	str	r3, [r4, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 80070f0:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80070f2:	6223      	str	r3, [r4, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 80070f4:	32fc      	adds	r2, #252	; 0xfc
 80070f6:	61a2      	str	r2, [r4, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 80070f8:	6263      	str	r3, [r4, #36]	; 0x24
  SPI_CLK_ENABLE(); 
 80070fa:	4a1e      	ldr	r2, [pc, #120]	; (8007174 <HW_SPI_Init+0xb0>)
 80070fc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80070fe:	2380      	movs	r3, #128	; 0x80
 8007100:	015b      	lsls	r3, r3, #5
 8007102:	430b      	orrs	r3, r1
 8007104:	6353      	str	r3, [r2, #52]	; 0x34
  if(HAL_SPI_Init( &hspi) != HAL_OK)
 8007106:	0020      	movs	r0, r4
 8007108:	f7fe fd08 	bl	8005b1c <HAL_SPI_Init>
 800710c:	2800      	cmp	r0, #0
 800710e:	d128      	bne.n	8007162 <HW_SPI_Init+0x9e>
  initStruct.Mode =GPIO_MODE_AF_PP;
 8007110:	2302      	movs	r3, #2
 8007112:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8007114:	9303      	str	r3, [sp, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8007116:	3301      	adds	r3, #1
 8007118:	9304      	str	r3, [sp, #16]
  initStruct.Alternate= SPI1_AF ;
 800711a:	2300      	movs	r3, #0
 800711c:	9305      	str	r3, [sp, #20]
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct); 
 800711e:	aa01      	add	r2, sp, #4
 8007120:	2108      	movs	r1, #8
 8007122:	4815      	ldr	r0, [pc, #84]	; (8007178 <HW_SPI_Init+0xb4>)
 8007124:	f7ff fcf8 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct); 
 8007128:	24a0      	movs	r4, #160	; 0xa0
 800712a:	05e4      	lsls	r4, r4, #23
 800712c:	aa01      	add	r2, sp, #4
 800712e:	2140      	movs	r1, #64	; 0x40
 8007130:	0020      	movs	r0, r4
 8007132:	f7ff fcf1 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct); 
 8007136:	aa01      	add	r2, sp, #4
 8007138:	2180      	movs	r1, #128	; 0x80
 800713a:	0020      	movs	r0, r4
 800713c:	f7ff fcec 	bl	8006b18 <HW_GPIO_Init>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8007140:	2301      	movs	r3, #1
 8007142:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLUP;
 8007144:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 8007146:	2580      	movs	r5, #128	; 0x80
 8007148:	022d      	lsls	r5, r5, #8
 800714a:	aa01      	add	r2, sp, #4
 800714c:	0029      	movs	r1, r5
 800714e:	0020      	movs	r0, r4
 8007150:	f7ff fce2 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8007154:	2201      	movs	r2, #1
 8007156:	0029      	movs	r1, r5
 8007158:	0020      	movs	r0, r4
 800715a:	f7ff fd59 	bl	8006c10 <HW_GPIO_Write>
}
 800715e:	b007      	add	sp, #28
 8007160:	bd30      	pop	{r4, r5, pc}
     Error_Handler();
 8007162:	f7ff fc77 	bl	8006a54 <Error_Handler>
 8007166:	e7d3      	b.n	8007110 <HW_SPI_Init+0x4c>
 8007168:	2000040c 	.word	0x2000040c
 800716c:	40013000 	.word	0x40013000
 8007170:	00989680 	.word	0x00989680
 8007174:	40021000 	.word	0x40021000
 8007178:	50000400 	.word	0x50000400

0800717c <HW_SPI_DeInit>:
{
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8007180:	2214      	movs	r2, #20
 8007182:	2100      	movs	r1, #0
 8007184:	a801      	add	r0, sp, #4
 8007186:	f000 fe9c 	bl	8007ec2 <memset>
  HAL_SPI_DeInit( &hspi);
 800718a:	4822      	ldr	r0, [pc, #136]	; (8007214 <HW_SPI_DeInit+0x98>)
 800718c:	f7fe fd0b 	bl	8005ba6 <HAL_SPI_DeInit>
  __HAL_RCC_SPI1_FORCE_RESET();
 8007190:	4b21      	ldr	r3, [pc, #132]	; (8007218 <HW_SPI_DeInit+0x9c>)
 8007192:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007194:	2280      	movs	r2, #128	; 0x80
 8007196:	0152      	lsls	r2, r2, #5
 8007198:	430a      	orrs	r2, r1
 800719a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_SPI1_RELEASE_RESET();
 800719c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800719e:	491f      	ldr	r1, [pc, #124]	; (800721c <HW_SPI_DeInit+0xa0>)
 80071a0:	400a      	ands	r2, r1
 80071a2:	625a      	str	r2, [r3, #36]	; 0x24
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80071a4:	2501      	movs	r5, #1
 80071a6:	9502      	str	r5, [sp, #8]
  initStruct.Pull =GPIO_NOPULL  ; 
 80071a8:	2600      	movs	r6, #0
 80071aa:	9603      	str	r6, [sp, #12]
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 80071ac:	24a0      	movs	r4, #160	; 0xa0
 80071ae:	05e4      	lsls	r4, r4, #23
 80071b0:	aa01      	add	r2, sp, #4
 80071b2:	2180      	movs	r1, #128	; 0x80
 80071b4:	0020      	movs	r0, r4
 80071b6:	f7ff fcaf 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MOSI_PORT, RADIO_MOSI_PIN, 0 );
 80071ba:	2200      	movs	r2, #0
 80071bc:	2180      	movs	r1, #128	; 0x80
 80071be:	0020      	movs	r0, r4
 80071c0:	f7ff fd26 	bl	8006c10 <HW_GPIO_Write>
  initStruct.Pull =GPIO_PULLDOWN; 
 80071c4:	2302      	movs	r3, #2
 80071c6:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init ( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct ); 
 80071c8:	aa01      	add	r2, sp, #4
 80071ca:	2140      	movs	r1, #64	; 0x40
 80071cc:	0020      	movs	r0, r4
 80071ce:	f7ff fca3 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MISO_PORT, RADIO_MISO_PIN, 0 );
 80071d2:	2200      	movs	r2, #0
 80071d4:	2140      	movs	r1, #64	; 0x40
 80071d6:	0020      	movs	r0, r4
 80071d8:	f7ff fd1a 	bl	8006c10 <HW_GPIO_Write>
  initStruct.Pull =GPIO_NOPULL  ; 
 80071dc:	9603      	str	r6, [sp, #12]
  HW_GPIO_Init ( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct ); 
 80071de:	4e10      	ldr	r6, [pc, #64]	; (8007220 <HW_SPI_DeInit+0xa4>)
 80071e0:	aa01      	add	r2, sp, #4
 80071e2:	2108      	movs	r1, #8
 80071e4:	0030      	movs	r0, r6
 80071e6:	f7ff fc97 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write(  RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0 );
 80071ea:	2200      	movs	r2, #0
 80071ec:	2108      	movs	r1, #8
 80071ee:	0030      	movs	r0, r6
 80071f0:	f7ff fd0e 	bl	8006c10 <HW_GPIO_Write>
  initStruct.Pull =GPIO_PULLUP  ; 
 80071f4:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 80071f6:	2580      	movs	r5, #128	; 0x80
 80071f8:	022d      	lsls	r5, r5, #8
 80071fa:	aa01      	add	r2, sp, #4
 80071fc:	0029      	movs	r1, r5
 80071fe:	0020      	movs	r0, r4
 8007200:	f7ff fc8a 	bl	8006b18 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN , 1 );
 8007204:	2201      	movs	r2, #1
 8007206:	0029      	movs	r1, r5
 8007208:	0020      	movs	r0, r4
 800720a:	f7ff fd01 	bl	8006c10 <HW_GPIO_Write>
}
 800720e:	b006      	add	sp, #24
 8007210:	bd70      	pop	{r4, r5, r6, pc}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	2000040c 	.word	0x2000040c
 8007218:	40021000 	.word	0x40021000
 800721c:	ffffefff 	.word	0xffffefff
 8007220:	50000400 	.word	0x50000400

08007224 <HW_SPI_InOut>:
{
 8007224:	b510      	push	{r4, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	210e      	movs	r1, #14
 800722a:	4469      	add	r1, sp
 800722c:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800722e:	2416      	movs	r4, #22
 8007230:	446c      	add	r4, sp
 8007232:	2301      	movs	r3, #1
 8007234:	425b      	negs	r3, r3
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	3302      	adds	r3, #2
 800723a:	0022      	movs	r2, r4
 800723c:	4802      	ldr	r0, [pc, #8]	; (8007248 <HW_SPI_InOut+0x24>)
 800723e:	f7fe fcc9 	bl	8005bd4 <HAL_SPI_TransmitReceive>
  return rxData;
 8007242:	8820      	ldrh	r0, [r4, #0]
}
 8007244:	b006      	add	sp, #24
 8007246:	bd10      	pop	{r4, pc}
 8007248:	2000040c 	.word	0x2000040c

0800724c <OnTxDone>:

    Radio.Send(buffer, 18);

}

void OnTxDone(void) {
 800724c:	b510      	push	{r4, lr}
    // queue appropriate event
    if (!enqueue(&EvQueue, EVENT_GOT_TX_COMPLETE)) {
 800724e:	2104      	movs	r1, #4
 8007250:	4804      	ldr	r0, [pc, #16]	; (8007264 <OnTxDone+0x18>)
 8007252:	f7ff fc15 	bl	8006a80 <enqueue>
 8007256:	2800      	cmp	r0, #0
 8007258:	d000      	beq.n	800725c <OnTxDone+0x10>
        PRINTF("ERROR - QUEUE FULL\n\r");
    }
}
 800725a:	bd10      	pop	{r4, pc}
        PRINTF("ERROR - QUEUE FULL\n\r");
 800725c:	4802      	ldr	r0, [pc, #8]	; (8007268 <OnTxDone+0x1c>)
 800725e:	f000 fd2b 	bl	8007cb8 <vcom_Send>
}
 8007262:	e7fa      	b.n	800725a <OnTxDone+0xe>
 8007264:	20000788 	.word	0x20000788
 8007268:	0800a568 	.word	0x0800a568

0800726c <OnTxTimeout>:

void OnTxTimeout(void) {
 800726c:	b510      	push	{r4, lr}
    Radio.Sleep();
 800726e:	4b07      	ldr	r3, [pc, #28]	; (800728c <OnTxTimeout+0x20>)
 8007270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007272:	4798      	blx	r3
    // queue appropriate event
    if (!enqueue(&EvQueue, EVENT_GOT_TX_TIMEOUT)) {
 8007274:	2105      	movs	r1, #5
 8007276:	4806      	ldr	r0, [pc, #24]	; (8007290 <OnTxTimeout+0x24>)
 8007278:	f7ff fc02 	bl	8006a80 <enqueue>
 800727c:	2800      	cmp	r0, #0
 800727e:	d000      	beq.n	8007282 <OnTxTimeout+0x16>
        PRINTF("ERROR - QUEUE FULL\n\r");
    }
}
 8007280:	bd10      	pop	{r4, pc}
        PRINTF("ERROR - QUEUE FULL\n\r");
 8007282:	4804      	ldr	r0, [pc, #16]	; (8007294 <OnTxTimeout+0x28>)
 8007284:	f000 fd18 	bl	8007cb8 <vcom_Send>
}
 8007288:	e7fa      	b.n	8007280 <OnTxTimeout+0x14>
 800728a:	46c0      	nop			; (mov r8, r8)
 800728c:	0800a3dc 	.word	0x0800a3dc
 8007290:	20000788 	.word	0x20000788
 8007294:	0800a568 	.word	0x0800a568

08007298 <OnRxTimeout>:
    if (!enqueue(&EvQueue, EVENT_GOT_RX_DATA)) {
        PRINTF("ERROR - QUEUE FULL\n\r");
    }
}

void OnRxTimeout(void) {
 8007298:	b510      	push	{r4, lr}

    // queue an event
    if (!enqueue(&EvQueue, EVENT_GOT_RX_TIMEOUT)) {
 800729a:	2102      	movs	r1, #2
 800729c:	4804      	ldr	r0, [pc, #16]	; (80072b0 <OnRxTimeout+0x18>)
 800729e:	f7ff fbef 	bl	8006a80 <enqueue>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d000      	beq.n	80072a8 <OnRxTimeout+0x10>
        PRINTF("ERROR - QUEUE FULL\n\r");
    }
}
 80072a6:	bd10      	pop	{r4, pc}
        PRINTF("ERROR - QUEUE FULL\n\r");
 80072a8:	4802      	ldr	r0, [pc, #8]	; (80072b4 <OnRxTimeout+0x1c>)
 80072aa:	f000 fd05 	bl	8007cb8 <vcom_Send>
}
 80072ae:	e7fa      	b.n	80072a6 <OnRxTimeout+0xe>
 80072b0:	20000788 	.word	0x20000788
 80072b4:	0800a568 	.word	0x0800a568

080072b8 <OnRxError>:

void OnRxError(void) {
 80072b8:	b510      	push	{r4, lr}

    // queue appropriate event
    if (!enqueue(&EvQueue, EVENT_GOT_RX_ERROR)) {
 80072ba:	2103      	movs	r1, #3
 80072bc:	4804      	ldr	r0, [pc, #16]	; (80072d0 <OnRxError+0x18>)
 80072be:	f7ff fbdf 	bl	8006a80 <enqueue>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d000      	beq.n	80072c8 <OnRxError+0x10>
        PRINTF("ERROR - QUEUE FULL\n\r");
    }
}
 80072c6:	bd10      	pop	{r4, pc}
        PRINTF("ERROR - QUEUE FULL\n\r");
 80072c8:	4802      	ldr	r0, [pc, #8]	; (80072d4 <OnRxError+0x1c>)
 80072ca:	f000 fcf5 	bl	8007cb8 <vcom_Send>
}
 80072ce:	e7fa      	b.n	80072c6 <OnRxError+0xe>
 80072d0:	20000788 	.word	0x20000788
 80072d4:	0800a568 	.word	0x0800a568

080072d8 <OnNodeTimeoutEvent>:
	Radio.SetChannel(RF_FREQUENCY + frequencyHopTable[(currentChannel) % NUM_FREQ_HOPS]);
	numHops++;
}
#endif

void OnNodeTimeoutEvent(void) {
 80072d8:	b510      	push	{r4, lr}
    // queue appropriate event
    if (!enqueue(&EvQueue, EVENT_TIMER_FIRED)) {
 80072da:	2106      	movs	r1, #6
 80072dc:	4804      	ldr	r0, [pc, #16]	; (80072f0 <OnNodeTimeoutEvent+0x18>)
 80072de:	f7ff fbcf 	bl	8006a80 <enqueue>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d000      	beq.n	80072e8 <OnNodeTimeoutEvent+0x10>
        PRINTF("ERROR - QUEUE FULL\n\r");
    }
}
 80072e6:	bd10      	pop	{r4, pc}
        PRINTF("ERROR - QUEUE FULL\n\r");
 80072e8:	4802      	ldr	r0, [pc, #8]	; (80072f4 <OnNodeTimeoutEvent+0x1c>)
 80072ea:	f000 fce5 	bl	8007cb8 <vcom_Send>
}
 80072ee:	e7fa      	b.n	80072e6 <OnNodeTimeoutEvent+0xe>
 80072f0:	20000788 	.word	0x20000788
 80072f4:	0800a568 	.word	0x0800a568

080072f8 <OnRxDone>:
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr) {
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	000c      	movs	r4, r1
 80072fc:	0016      	movs	r6, r2
 80072fe:	001d      	movs	r5, r3
    int rxSize = size <= BUFFER_SIZE ? size : BUFFER_SIZE;
 8007300:	293e      	cmp	r1, #62	; 0x3e
 8007302:	d80f      	bhi.n	8007324 <OnRxDone+0x2c>
 8007304:	000a      	movs	r2, r1
    memcpy(buffer, payload, rxSize);
 8007306:	0001      	movs	r1, r0
 8007308:	4809      	ldr	r0, [pc, #36]	; (8007330 <OnRxDone+0x38>)
 800730a:	f000 fdd1 	bl	8007eb0 <memcpy>
    rssiValue = rssi;
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <OnRxDone+0x3c>)
 8007310:	701e      	strb	r6, [r3, #0]
    snrValue = snr;
 8007312:	705d      	strb	r5, [r3, #1]
    rXsize = size;
 8007314:	805c      	strh	r4, [r3, #2]
    if (!enqueue(&EvQueue, EVENT_GOT_RX_DATA)) {
 8007316:	2101      	movs	r1, #1
 8007318:	4807      	ldr	r0, [pc, #28]	; (8007338 <OnRxDone+0x40>)
 800731a:	f7ff fbb1 	bl	8006a80 <enqueue>
 800731e:	2800      	cmp	r0, #0
 8007320:	d002      	beq.n	8007328 <OnRxDone+0x30>
}
 8007322:	bd70      	pop	{r4, r5, r6, pc}
    int rxSize = size <= BUFFER_SIZE ? size : BUFFER_SIZE;
 8007324:	223e      	movs	r2, #62	; 0x3e
 8007326:	e7ee      	b.n	8007306 <OnRxDone+0xe>
        PRINTF("ERROR - QUEUE FULL\n\r");
 8007328:	4804      	ldr	r0, [pc, #16]	; (800733c <OnRxDone+0x44>)
 800732a:	f000 fcc5 	bl	8007cb8 <vcom_Send>
}
 800732e:	e7f8      	b.n	8007322 <OnRxDone+0x2a>
 8007330:	200007cc 	.word	0x200007cc
 8007334:	20000468 	.word	0x20000468
 8007338:	20000788 	.word	0x20000788
 800733c:	0800a568 	.word	0x0800a568

08007340 <sendPing>:
void sendPing(void) {
 8007340:	b530      	push	{r4, r5, lr}
 8007342:	b093      	sub	sp, #76	; 0x4c
    for(int i=0; i<PING_MSG_PAYLOAD_LENGTH_BYTES; i++) {
 8007344:	2300      	movs	r3, #0
 8007346:	e003      	b.n	8007350 <sendPing+0x10>
        payload[i] = 0;
 8007348:	2100      	movs	r1, #0
 800734a:	aa05      	add	r2, sp, #20
 800734c:	54d1      	strb	r1, [r2, r3]
    for(int i=0; i<PING_MSG_PAYLOAD_LENGTH_BYTES; i++) {
 800734e:	3301      	adds	r3, #1
 8007350:	2b31      	cmp	r3, #49	; 0x31
 8007352:	ddf9      	ble.n	8007348 <sendPing+0x8>
    payload[0] = (uint8_t)((seqNum >> 24) & 0xFF);
 8007354:	4b19      	ldr	r3, [pc, #100]	; (80073bc <sendPing+0x7c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	0e1a      	lsrs	r2, r3, #24
 800735a:	ac05      	add	r4, sp, #20
 800735c:	7022      	strb	r2, [r4, #0]
    payload[1] = (uint8_t)((seqNum >> 16) & 0xFF);
 800735e:	0c1a      	lsrs	r2, r3, #16
 8007360:	7062      	strb	r2, [r4, #1]
    payload[2] = (uint8_t)((seqNum >> 8) & 0xFF);
 8007362:	0a1a      	lsrs	r2, r3, #8
 8007364:	70a2      	strb	r2, [r4, #2]
    payload[3] = (uint8_t)(seqNum & 0xFF);
 8007366:	70e3      	strb	r3, [r4, #3]
    payload[4] = resetReason;
 8007368:	4b15      	ldr	r3, [pc, #84]	; (80073c0 <sendPing+0x80>)
 800736a:	791a      	ldrb	r2, [r3, #4]
 800736c:	7122      	strb	r2, [r4, #4]
    payload[5] = (uint8_t)((ackCountToReturn >> 24) & 0xFF);
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	0e1a      	lsrs	r2, r3, #24
 8007372:	7162      	strb	r2, [r4, #5]
    payload[6] = (uint8_t)((ackCountToReturn >> 16) & 0xFF);
 8007374:	0c1a      	lsrs	r2, r3, #16
 8007376:	71a2      	strb	r2, [r4, #6]
    payload[7] = (uint8_t)((ackCountToReturn >> 8) & 0xFF);
 8007378:	0a1a      	lsrs	r2, r3, #8
 800737a:	71e2      	strb	r2, [r4, #7]
    payload[8] = (uint8_t)(ackCountToReturn & 0xFF);
 800737c:	7223      	strb	r3, [r4, #8]
    formPingMessageHeader(PING_MSG_HEADER_ROUTE_FORMING, 1, 0, 1, 0, 0, 0, buffer);
 800737e:	4d11      	ldr	r5, [pc, #68]	; (80073c4 <sendPing+0x84>)
 8007380:	9503      	str	r5, [sp, #12]
 8007382:	2300      	movs	r3, #0
 8007384:	9302      	str	r3, [sp, #8]
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	3301      	adds	r3, #1
 800738c:	2200      	movs	r2, #0
 800738e:	2101      	movs	r1, #1
 8007390:	2000      	movs	r0, #0
 8007392:	f000 fc41 	bl	8007c18 <formPingMessageHeader>
    memcpy(&buffer[PING_MSG_PAYLOAD_OFFSET_BYTES], payload, 50);
 8007396:	0028      	movs	r0, r5
 8007398:	300c      	adds	r0, #12
 800739a:	2232      	movs	r2, #50	; 0x32
 800739c:	0021      	movs	r1, r4
 800739e:	f000 fd87 	bl	8007eb0 <memcpy>
    DelayMs(1);  // MAY NEED A DELAY WHEN TRANSITIONING BETWEEN RX AND TX
 80073a2:	2001      	movs	r0, #1
 80073a4:	f7ff f930 	bl	8006608 <DelayMs>
    LED_On(GREEN_LED);
 80073a8:	2000      	movs	r0, #0
 80073aa:	f7fa ff8d 	bl	80022c8 <BSP_LED_On>
    Radio.Send(buffer, 62);
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <sendPing+0x88>)
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	213e      	movs	r1, #62	; 0x3e
 80073b4:	0028      	movs	r0, r5
 80073b6:	4798      	blx	r3
}
 80073b8:	b013      	add	sp, #76	; 0x4c
 80073ba:	bd30      	pop	{r4, r5, pc}
 80073bc:	20000048 	.word	0x20000048
 80073c0:	20000468 	.word	0x20000468
 80073c4:	200007cc 	.word	0x200007cc
 80073c8:	0800a3dc 	.word	0x0800a3dc

080073cc <TimerSetValueWithComp>:
        PRINTF("ERROR - QUEUE FULL\n\r");
    }
}


void TimerSetValueWithComp(TimerEvent_t *obj, uint32_t value) {
 80073cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ce:	b085      	sub	sp, #20
 80073d0:	9003      	str	r0, [sp, #12]
 80073d2:	000f      	movs	r7, r1
    static double previousTimeFloat = 0;
    double currentTimeFloat = TimerGetCurrentTimeFloat();
 80073d4:	f7ff fab1 	bl	800693a <TimerGetCurrentTimeFloat>
 80073d8:	0004      	movs	r4, r0
 80073da:	000d      	movs	r5, r1

    // TimerGetCurrentTimeFloat() will wrap at the 32bit tick value, so if rtc at 0.03 this will be after 35 hours
    // however expected time will keep increasing so will no longer be a valid comparison

    // detect wrap of ms timer
    if (currentTimeFloat <  previousTimeFloat) {
 80073dc:	4b1e      	ldr	r3, [pc, #120]	; (8007458 <TimerSetValueWithComp+0x8c>)
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	f7f9 f82f 	bl	8000444 <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d123      	bne.n	8007432 <TimerSetValueWithComp+0x66>
        expectedTime -= HW_RTC_Tick2msFloat(0xffffffff);

        PRINTF("RTC WRAP DETECTED = ADJUST EXPECTED TIME TO %f\n\r", expectedTime);
    }

    TimerSetValueFloat(obj, value - (currentTimeFloat - expectedTime));
 80073ea:	0038      	movs	r0, r7
 80073ec:	f7fa fec0 	bl	8002170 <__aeabi_ui2d>
 80073f0:	9000      	str	r0, [sp, #0]
 80073f2:	9101      	str	r1, [sp, #4]
 80073f4:	4f19      	ldr	r7, [pc, #100]	; (800745c <TimerSetValueWithComp+0x90>)
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	0020      	movs	r0, r4
 80073fc:	0029      	movs	r1, r5
 80073fe:	f7fa fb0b 	bl	8001a18 <__aeabi_dsub>
 8007402:	0002      	movs	r2, r0
 8007404:	000b      	movs	r3, r1
 8007406:	9800      	ldr	r0, [sp, #0]
 8007408:	9901      	ldr	r1, [sp, #4]
 800740a:	f7fa fb05 	bl	8001a18 <__aeabi_dsub>
 800740e:	0002      	movs	r2, r0
 8007410:	000b      	movs	r3, r1
 8007412:	9803      	ldr	r0, [sp, #12]
 8007414:	f7ff fa78 	bl	8006908 <TimerSetValueFloat>
    expectedTime += value;
 8007418:	9a00      	ldr	r2, [sp, #0]
 800741a:	9b01      	ldr	r3, [sp, #4]
 800741c:	6838      	ldr	r0, [r7, #0]
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	f7f9 f936 	bl	8000690 <__aeabi_dadd>
 8007424:	6038      	str	r0, [r7, #0]
 8007426:	6079      	str	r1, [r7, #4]

    // update history so we can detect wrapping and therefore adjust 'expectedTime'
    previousTimeFloat = currentTimeFloat;
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <TimerSetValueWithComp+0x8c>)
 800742a:	611c      	str	r4, [r3, #16]
 800742c:	615d      	str	r5, [r3, #20]

}
 800742e:	b005      	add	sp, #20
 8007430:	bdf0      	pop	{r4, r5, r6, r7, pc}
        expectedTime -= HW_RTC_Tick2msFloat(0xffffffff);
 8007432:	2001      	movs	r0, #1
 8007434:	4240      	negs	r0, r0
 8007436:	f7ff fcbb 	bl	8006db0 <HW_RTC_Tick2msFloat>
 800743a:	0002      	movs	r2, r0
 800743c:	000b      	movs	r3, r1
 800743e:	4e07      	ldr	r6, [pc, #28]	; (800745c <TimerSetValueWithComp+0x90>)
 8007440:	6830      	ldr	r0, [r6, #0]
 8007442:	6871      	ldr	r1, [r6, #4]
 8007444:	f7fa fae8 	bl	8001a18 <__aeabi_dsub>
 8007448:	0002      	movs	r2, r0
 800744a:	000b      	movs	r3, r1
 800744c:	6032      	str	r2, [r6, #0]
 800744e:	6073      	str	r3, [r6, #4]
        PRINTF("RTC WRAP DETECTED = ADJUST EXPECTED TIME TO %f\n\r", expectedTime);
 8007450:	4803      	ldr	r0, [pc, #12]	; (8007460 <TimerSetValueWithComp+0x94>)
 8007452:	f000 fc31 	bl	8007cb8 <vcom_Send>
 8007456:	e7c8      	b.n	80073ea <TimerSetValueWithComp+0x1e>
 8007458:	20000468 	.word	0x20000468
 800745c:	200007b8 	.word	0x200007b8
 8007460:	0800a580 	.word	0x0800a580

08007464 <get_system_reset_cause>:

uint8_t get_system_reset_cause(void)
{
    uint8_t reset_cause = 0;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8007464:	4b15      	ldr	r3, [pc, #84]	; (80074bc <get_system_reset_cause+0x58>)
 8007466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007468:	2b00      	cmp	r3, #0
 800746a:	db23      	blt.n	80074b4 <get_system_reset_cause+0x50>
    {
        //reset_cause = "LOW_POWER_RESET";
        reset_cause = 1;
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800746c:	4b13      	ldr	r3, [pc, #76]	; (80074bc <get_system_reset_cause+0x58>)
 800746e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	d507      	bpl.n	8007484 <get_system_reset_cause+0x20>
    {
        //reset_cause = "WINDOW_WATCHDOG_RESET";
        reset_cause = 2;
 8007474:	2002      	movs	r0, #2
        //reset_cause = "UNKNOWN";
        reset_cause = 8;
    }

    // Clear all the reset flags or else they will remain set during future resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8007476:	4a11      	ldr	r2, [pc, #68]	; (80074bc <get_system_reset_cause+0x58>)
 8007478:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800747a:	2380      	movs	r3, #128	; 0x80
 800747c:	041b      	lsls	r3, r3, #16
 800747e:	430b      	orrs	r3, r1
 8007480:	6513      	str	r3, [r2, #80]	; 0x50

    return reset_cause;
}
 8007482:	4770      	bx	lr
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8007484:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <get_system_reset_cause+0x58>)
 8007486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	d501      	bpl.n	8007490 <get_system_reset_cause+0x2c>
        reset_cause = 3;
 800748c:	2003      	movs	r0, #3
 800748e:	e7f2      	b.n	8007476 <get_system_reset_cause+0x12>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <get_system_reset_cause+0x58>)
 8007492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	d501      	bpl.n	800749c <get_system_reset_cause+0x38>
        reset_cause = 4;
 8007498:	2004      	movs	r0, #4
 800749a:	e7ec      	b.n	8007476 <get_system_reset_cause+0x12>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800749c:	4b07      	ldr	r3, [pc, #28]	; (80074bc <get_system_reset_cause+0x58>)
 800749e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	d501      	bpl.n	80074a8 <get_system_reset_cause+0x44>
        reset_cause = 5;
 80074a4:	2005      	movs	r0, #5
 80074a6:	e7e6      	b.n	8007476 <get_system_reset_cause+0x12>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 80074a8:	4b04      	ldr	r3, [pc, #16]	; (80074bc <get_system_reset_cause+0x58>)
 80074aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ac:	015b      	lsls	r3, r3, #5
 80074ae:	d503      	bpl.n	80074b8 <get_system_reset_cause+0x54>
        reset_cause = 6;
 80074b0:	2006      	movs	r0, #6
 80074b2:	e7e0      	b.n	8007476 <get_system_reset_cause+0x12>
        reset_cause = 1;
 80074b4:	2001      	movs	r0, #1
 80074b6:	e7de      	b.n	8007476 <get_system_reset_cause+0x12>
        reset_cause = 8;
 80074b8:	2008      	movs	r0, #8
 80074ba:	e7dc      	b.n	8007476 <get_system_reset_cause+0x12>
 80074bc:	40021000 	.word	0x40021000

080074c0 <main>:
int main(void) {
 80074c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074c2:	46ce      	mov	lr, r9
 80074c4:	4647      	mov	r7, r8
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b08d      	sub	sp, #52	; 0x34
    resetReason = get_system_reset_cause();
 80074ca:	f7ff ffcb 	bl	8007464 <get_system_reset_cause>
 80074ce:	4cab      	ldr	r4, [pc, #684]	; (800777c <main+0x2bc>)
 80074d0:	7120      	strb	r0, [r4, #4]
    HAL_Init();
 80074d2:	f7fc fd49 	bl	8003f68 <HAL_Init>
    SystemClock_Config();
 80074d6:	f000 fa21 	bl	800791c <SystemClock_Config>
    DBG_Init();
 80074da:	f7ff fa75 	bl	80069c8 <DBG_Init>
    HW_Init();
 80074de:	f000 fad3 	bl	8007a88 <HW_Init>
    IMC_GPIO_Init();
 80074e2:	f000 f9e1 	bl	80078a8 <IMC_GPIO_Init>
    LED_Off(GREEN_LED);
 80074e6:	2000      	movs	r0, #0
 80074e8:	f7fa fefe 	bl	80022e8 <BSP_LED_Off>
    LED_Off(BLUE_LED);
 80074ec:	2002      	movs	r0, #2
 80074ee:	f7fa fefb 	bl	80022e8 <BSP_LED_Off>
    LED_Off(RED_LED);
 80074f2:	2003      	movs	r0, #3
 80074f4:	f7fa fef8 	bl	80022e8 <BSP_LED_Off>
    RadioEvents.TxDone = OnTxDone;
 80074f8:	4ba1      	ldr	r3, [pc, #644]	; (8007780 <main+0x2c0>)
 80074fa:	61a3      	str	r3, [r4, #24]
    RadioEvents.RxDone = OnRxDone;
 80074fc:	4ba1      	ldr	r3, [pc, #644]	; (8007784 <main+0x2c4>)
 80074fe:	6223      	str	r3, [r4, #32]
    RadioEvents.TxTimeout = OnTxTimeout;
 8007500:	4ba1      	ldr	r3, [pc, #644]	; (8007788 <main+0x2c8>)
 8007502:	61e3      	str	r3, [r4, #28]
    RadioEvents.RxTimeout = OnRxTimeout;
 8007504:	4ba1      	ldr	r3, [pc, #644]	; (800778c <main+0x2cc>)
 8007506:	6263      	str	r3, [r4, #36]	; 0x24
    RadioEvents.RxError = OnRxError;
 8007508:	4ba1      	ldr	r3, [pc, #644]	; (8007790 <main+0x2d0>)
 800750a:	62a3      	str	r3, [r4, #40]	; 0x28
    Radio.Init(&RadioEvents);
 800750c:	4fa1      	ldr	r7, [pc, #644]	; (8007794 <main+0x2d4>)
 800750e:	0020      	movs	r0, r4
 8007510:	3018      	adds	r0, #24
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	4798      	blx	r3
    Radio.SetChannel(RF_FREQUENCY);
 8007516:	48a0      	ldr	r0, [pc, #640]	; (8007798 <main+0x2d8>)
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	4798      	blx	r3
    Radio.SetTxConfig(MODEM_LORA, outputPower, 0, LORA_BANDWIDTH,
 800751c:	2334      	movs	r3, #52	; 0x34
 800751e:	56e1      	ldrsb	r1, [r4, r3]
 8007520:	4b9e      	ldr	r3, [pc, #632]	; (800779c <main+0x2dc>)
 8007522:	9308      	str	r3, [sp, #32]
 8007524:	2500      	movs	r5, #0
 8007526:	9507      	str	r5, [sp, #28]
 8007528:	9506      	str	r5, [sp, #24]
 800752a:	9505      	str	r5, [sp, #20]
 800752c:	2301      	movs	r3, #1
 800752e:	4698      	mov	r8, r3
 8007530:	9304      	str	r3, [sp, #16]
 8007532:	9503      	str	r5, [sp, #12]
 8007534:	3307      	adds	r3, #7
 8007536:	4699      	mov	r9, r3
 8007538:	9302      	str	r3, [sp, #8]
 800753a:	4643      	mov	r3, r8
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	464b      	mov	r3, r9
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	2300      	movs	r3, #0
 8007544:	2200      	movs	r2, #0
 8007546:	2001      	movs	r0, #1
 8007548:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800754a:	47b0      	blx	r6
    Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800754c:	6a3f      	ldr	r7, [r7, #32]
 800754e:	4643      	mov	r3, r8
 8007550:	9309      	str	r3, [sp, #36]	; 0x24
 8007552:	9508      	str	r5, [sp, #32]
 8007554:	9507      	str	r5, [sp, #28]
 8007556:	9506      	str	r5, [sp, #24]
 8007558:	9305      	str	r3, [sp, #20]
 800755a:	9504      	str	r5, [sp, #16]
 800755c:	9503      	str	r5, [sp, #12]
 800755e:	3304      	adds	r3, #4
 8007560:	9302      	str	r3, [sp, #8]
 8007562:	464b      	mov	r3, r9
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	9500      	str	r5, [sp, #0]
 8007568:	3b07      	subs	r3, #7
 800756a:	2208      	movs	r2, #8
 800756c:	2100      	movs	r1, #0
 800756e:	2001      	movs	r0, #1
 8007570:	47b8      	blx	r7
    LPM_SetOffMode(LPM_LIB_Id, LPM_Disable);
 8007572:	2101      	movs	r1, #1
 8007574:	2002      	movs	r0, #2
 8007576:	f7ff f84b 	bl	8006610 <LPM_SetOffMode>
    initQueue(&EvQueue);
 800757a:	4889      	ldr	r0, [pc, #548]	; (80077a0 <main+0x2e0>)
 800757c:	f7ff fa6b 	bl	8006a56 <initQueue>
    TimerInit(&nodeTimer, OnNodeTimeoutEvent);
 8007580:	0025      	movs	r5, r4
 8007582:	3538      	adds	r5, #56	; 0x38
 8007584:	4987      	ldr	r1, [pc, #540]	; (80077a4 <main+0x2e4>)
 8007586:	0028      	movs	r0, r5
 8007588:	f7ff f8ee 	bl	8006768 <TimerInit>
    PRINTF("Started Sending on %lu  with Spreading Factor %d for %lu transmissions\n\r", RF_FREQUENCY, LORA_SPREADING_FACTOR, LOOP_COUNT);
 800758c:	4b86      	ldr	r3, [pc, #536]	; (80077a8 <main+0x2e8>)
 800758e:	2208      	movs	r2, #8
 8007590:	4981      	ldr	r1, [pc, #516]	; (8007798 <main+0x2d8>)
 8007592:	4886      	ldr	r0, [pc, #536]	; (80077ac <main+0x2ec>)
 8007594:	f000 fb90 	bl	8007cb8 <vcom_Send>
    PRINTF("Reset reason: %d\n\r",resetReason);
 8007598:	7921      	ldrb	r1, [r4, #4]
 800759a:	4885      	ldr	r0, [pc, #532]	; (80077b0 <main+0x2f0>)
 800759c:	f000 fb8c 	bl	8007cb8 <vcom_Send>
    PRINTF("Seq Num, Send Ping at, Sent Ping at, Ping Send Time, Output Power, Ack Num, Num Hops Tx, Num Hops Rx, Comment\n\r");
 80075a0:	4884      	ldr	r0, [pc, #528]	; (80077b4 <main+0x2f4>)
 80075a2:	f000 fb89 	bl	8007cb8 <vcom_Send>
    expectedTime = TimerGetCurrentTimeFloat();
 80075a6:	f7ff f9c8 	bl	800693a <TimerGetCurrentTimeFloat>
 80075aa:	4b83      	ldr	r3, [pc, #524]	; (80077b8 <main+0x2f8>)
 80075ac:	6018      	str	r0, [r3, #0]
 80075ae:	6059      	str	r1, [r3, #4]
    TimerSetValueWithComp(&nodeTimer, CYCLE_TIME_MS);
 80075b0:	4982      	ldr	r1, [pc, #520]	; (80077bc <main+0x2fc>)
 80075b2:	0028      	movs	r0, r5
 80075b4:	f7ff ff0a 	bl	80073cc <TimerSetValueWithComp>
    TimerStart(&nodeTimer);
 80075b8:	0028      	movs	r0, r5
 80075ba:	f7ff f8dd 	bl	8006778 <TimerStart>
  __ASM volatile ("cpsid i" : : : "memory");
 80075be:	b672      	cpsid	i
    LPM_EnterLowPower();
 80075c0:	f7ff f86c 	bl	800669c <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 80075c4:	b662      	cpsie	i
    while (loopCount < LOOP_COUNT && quit == false) {
 80075c6:	234e      	movs	r3, #78	; 0x4e
 80075c8:	4a6c      	ldr	r2, [pc, #432]	; (800777c <main+0x2bc>)
 80075ca:	5ad2      	ldrh	r2, [r2, r3]
 80075cc:	4b7c      	ldr	r3, [pc, #496]	; (80077c0 <main+0x300>)
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d900      	bls.n	80075d4 <main+0x114>
 80075d2:	e0c6      	b.n	8007762 <main+0x2a2>
 80075d4:	2364      	movs	r3, #100	; 0x64
 80075d6:	4a69      	ldr	r2, [pc, #420]	; (800777c <main+0x2bc>)
 80075d8:	5cd3      	ldrb	r3, [r2, r3]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d000      	beq.n	80075e0 <main+0x120>
 80075de:	e0c0      	b.n	8007762 <main+0x2a2>
        Queue_Events_t nextEvent = dequeue(&EvQueue);
 80075e0:	486f      	ldr	r0, [pc, #444]	; (80077a0 <main+0x2e0>)
 80075e2:	f7ff fa62 	bl	8006aaa <dequeue>
        if (nextEvent != EVENT_NO_EVENT) {
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d0ed      	beq.n	80075c6 <main+0x106>
            switch (nextEvent) {
 80075ea:	1e43      	subs	r3, r0, #1
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	2a07      	cmp	r2, #7
 80075f0:	d900      	bls.n	80075f4 <main+0x134>
 80075f2:	e0ad      	b.n	8007750 <main+0x290>
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4a72      	ldr	r2, [pc, #456]	; (80077c4 <main+0x304>)
 80075fa:	58d3      	ldr	r3, [r2, r3]
 80075fc:	469f      	mov	pc, r3
                TimerSetValueWithComp(&nodeTimer, CYCLE_TIME_MS);
 80075fe:	4c5f      	ldr	r4, [pc, #380]	; (800777c <main+0x2bc>)
 8007600:	3438      	adds	r4, #56	; 0x38
 8007602:	496e      	ldr	r1, [pc, #440]	; (80077bc <main+0x2fc>)
 8007604:	0020      	movs	r0, r4
 8007606:	f7ff fee1 	bl	80073cc <TimerSetValueWithComp>
                TimerStart(&nodeTimer);
 800760a:	0020      	movs	r0, r4
 800760c:	f7ff f8b4 	bl	8006778 <TimerStart>
                dbgStartPingAt = TimerGetCurrentTimeFloat();
 8007610:	f7ff f993 	bl	800693a <TimerGetCurrentTimeFloat>
 8007614:	4b6c      	ldr	r3, [pc, #432]	; (80077c8 <main+0x308>)
 8007616:	6018      	str	r0, [r3, #0]
 8007618:	6059      	str	r1, [r3, #4]
                PRINTF("Impulse Count: %d\n\r",ImPcount);
 800761a:	4b6c      	ldr	r3, [pc, #432]	; (80077cc <main+0x30c>)
 800761c:	6819      	ldr	r1, [r3, #0]
 800761e:	486c      	ldr	r0, [pc, #432]	; (80077d0 <main+0x310>)
 8007620:	f000 fb4a 	bl	8007cb8 <vcom_Send>
                sendPing();
 8007624:	f7ff fe8c 	bl	8007340 <sendPing>
                break;
 8007628:	e7cd      	b.n	80075c6 <main+0x106>
                dbgSentPingAt = TimerGetCurrentTimeFloat();
 800762a:	f7ff f986 	bl	800693a <TimerGetCurrentTimeFloat>
 800762e:	4b69      	ldr	r3, [pc, #420]	; (80077d4 <main+0x314>)
 8007630:	6018      	str	r0, [r3, #0]
 8007632:	6059      	str	r1, [r3, #4]
                LED_Off(GREEN_LED);
 8007634:	2000      	movs	r0, #0
 8007636:	f7fa fe57 	bl	80022e8 <BSP_LED_Off>
                Radio.Rx(300);
 800763a:	4b56      	ldr	r3, [pc, #344]	; (8007794 <main+0x2d4>)
 800763c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763e:	2096      	movs	r0, #150	; 0x96
 8007640:	0040      	lsls	r0, r0, #1
 8007642:	4798      	blx	r3
                break;
 8007644:	e7bf      	b.n	80075c6 <main+0x106>
                ackCountToReturn = payload[0] << 24;
 8007646:	4a64      	ldr	r2, [pc, #400]	; (80077d8 <main+0x318>)
 8007648:	7ad3      	ldrb	r3, [r2, #11]
 800764a:	061b      	lsls	r3, r3, #24
                ackCountToReturn += payload[1] << 16;
 800764c:	7b11      	ldrb	r1, [r2, #12]
 800764e:	0409      	lsls	r1, r1, #16
 8007650:	185b      	adds	r3, r3, r1
                ackCountToReturn += payload[2] << 8;
 8007652:	7b51      	ldrb	r1, [r2, #13]
 8007654:	0209      	lsls	r1, r1, #8
 8007656:	185b      	adds	r3, r3, r1
                ackCountToReturn += payload[3];
 8007658:	7b92      	ldrb	r2, [r2, #14]
 800765a:	189b      	adds	r3, r3, r2
 800765c:	4e47      	ldr	r6, [pc, #284]	; (800777c <main+0x2bc>)
 800765e:	60b3      	str	r3, [r6, #8]
                PRINTF("%8d,%10.2f,%10.2f,%10.2f,%2d,%8d,%3d,%3d,\n\r", seqNum, dbgStartPingAt, dbgSentPingAt, dbgSentPingAt-dbgStartPingAt, outputPower, ackCountToReturn, numHopsTx, numHopsRx);
 8007660:	4a59      	ldr	r2, [pc, #356]	; (80077c8 <main+0x308>)
 8007662:	6811      	ldr	r1, [r2, #0]
 8007664:	6852      	ldr	r2, [r2, #4]
 8007666:	0008      	movs	r0, r1
 8007668:	0011      	movs	r1, r2
 800766a:	4a5a      	ldr	r2, [pc, #360]	; (80077d4 <main+0x314>)
 800766c:	6814      	ldr	r4, [r2, #0]
 800766e:	6855      	ldr	r5, [r2, #4]
 8007670:	4f5a      	ldr	r7, [pc, #360]	; (80077dc <main+0x31c>)
 8007672:	224c      	movs	r2, #76	; 0x4c
 8007674:	5cb2      	ldrb	r2, [r6, r2]
 8007676:	9207      	str	r2, [sp, #28]
 8007678:	224d      	movs	r2, #77	; 0x4d
 800767a:	5cb2      	ldrb	r2, [r6, r2]
 800767c:	9206      	str	r2, [sp, #24]
 800767e:	9305      	str	r3, [sp, #20]
 8007680:	2334      	movs	r3, #52	; 0x34
 8007682:	56f3      	ldrsb	r3, [r6, r3]
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	900a      	str	r0, [sp, #40]	; 0x28
 8007688:	910b      	str	r1, [sp, #44]	; 0x2c
 800768a:	0002      	movs	r2, r0
 800768c:	000b      	movs	r3, r1
 800768e:	0020      	movs	r0, r4
 8007690:	0029      	movs	r1, r5
 8007692:	f7fa f9c1 	bl	8001a18 <__aeabi_dsub>
 8007696:	9002      	str	r0, [sp, #8]
 8007698:	9103      	str	r1, [sp, #12]
 800769a:	9400      	str	r4, [sp, #0]
 800769c:	9501      	str	r5, [sp, #4]
 800769e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	484e      	ldr	r0, [pc, #312]	; (80077e0 <main+0x320>)
 80076a6:	f000 fb07 	bl	8007cb8 <vcom_Send>
                seqNum++;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	3301      	adds	r3, #1
 80076ae:	603b      	str	r3, [r7, #0]
                loopCount++;
 80076b0:	224e      	movs	r2, #78	; 0x4e
 80076b2:	5ab3      	ldrh	r3, [r6, r2]
 80076b4:	3301      	adds	r3, #1
 80076b6:	52b3      	strh	r3, [r6, r2]
                Radio.Sleep();
 80076b8:	4b36      	ldr	r3, [pc, #216]	; (8007794 <main+0x2d4>)
 80076ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076bc:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
 80076be:	b672      	cpsid	i
                LPM_EnterLowPower();
 80076c0:	f7fe ffec 	bl	800669c <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 80076c4:	b662      	cpsie	i
 80076c6:	e77e      	b.n	80075c6 <main+0x106>
                PRINTF("Rx Error\n\r");
 80076c8:	4846      	ldr	r0, [pc, #280]	; (80077e4 <main+0x324>)
 80076ca:	f000 faf5 	bl	8007cb8 <vcom_Send>
                PRINTF("%8d,%10.2f,%10.2f,%10.2f,%2d,     ---,%3d,%3d, No Ack received this frame\n\r", seqNum, dbgStartPingAt, dbgSentPingAt, dbgSentPingAt-dbgStartPingAt, outputPower, numHopsTx, numHopsRx);
 80076ce:	4b3e      	ldr	r3, [pc, #248]	; (80077c8 <main+0x308>)
 80076d0:	685c      	ldr	r4, [r3, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	0019      	movs	r1, r3
 80076d6:	0022      	movs	r2, r4
 80076d8:	4b3e      	ldr	r3, [pc, #248]	; (80077d4 <main+0x314>)
 80076da:	681c      	ldr	r4, [r3, #0]
 80076dc:	685d      	ldr	r5, [r3, #4]
 80076de:	4f3f      	ldr	r7, [pc, #252]	; (80077dc <main+0x31c>)
 80076e0:	4e26      	ldr	r6, [pc, #152]	; (800777c <main+0x2bc>)
 80076e2:	234c      	movs	r3, #76	; 0x4c
 80076e4:	5cf3      	ldrb	r3, [r6, r3]
 80076e6:	9306      	str	r3, [sp, #24]
 80076e8:	234d      	movs	r3, #77	; 0x4d
 80076ea:	5cf3      	ldrb	r3, [r6, r3]
 80076ec:	9305      	str	r3, [sp, #20]
 80076ee:	2334      	movs	r3, #52	; 0x34
 80076f0:	56f3      	ldrsb	r3, [r6, r3]
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	910a      	str	r1, [sp, #40]	; 0x28
 80076f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80076f8:	0013      	movs	r3, r2
 80076fa:	000a      	movs	r2, r1
 80076fc:	0020      	movs	r0, r4
 80076fe:	0029      	movs	r1, r5
 8007700:	f7fa f98a 	bl	8001a18 <__aeabi_dsub>
 8007704:	9002      	str	r0, [sp, #8]
 8007706:	9103      	str	r1, [sp, #12]
 8007708:	9400      	str	r4, [sp, #0]
 800770a:	9501      	str	r5, [sp, #4]
 800770c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800770e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	4835      	ldr	r0, [pc, #212]	; (80077e8 <main+0x328>)
 8007714:	f000 fad0 	bl	8007cb8 <vcom_Send>
                seqNum++;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	3301      	adds	r3, #1
 800771c:	603b      	str	r3, [r7, #0]
                loopCount++;
 800771e:	224e      	movs	r2, #78	; 0x4e
 8007720:	5ab3      	ldrh	r3, [r6, r2]
 8007722:	3301      	adds	r3, #1
 8007724:	52b3      	strh	r3, [r6, r2]
                Radio.Sleep();
 8007726:	4b1b      	ldr	r3, [pc, #108]	; (8007794 <main+0x2d4>)
 8007728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772a:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
 800772c:	b672      	cpsid	i
                LPM_EnterLowPower();
 800772e:	f7fe ffb5 	bl	800669c <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 8007732:	b662      	cpsie	i
 8007734:	e747      	b.n	80075c6 <main+0x106>
                TimerStart(&compTimer);
 8007736:	4811      	ldr	r0, [pc, #68]	; (800777c <main+0x2bc>)
 8007738:	3050      	adds	r0, #80	; 0x50
 800773a:	f7ff f81d 	bl	8006778 <TimerStart>
                break;
 800773e:	e742      	b.n	80075c6 <main+0x106>
                highVoltagePSUEnable(false);
 8007740:	2000      	movs	r0, #0
 8007742:	f000 f937 	bl	80079b4 <highVoltagePSUEnable>
  __ASM volatile ("cpsid i" : : : "memory");
 8007746:	b672      	cpsid	i
                LPM_EnterLowPower();
 8007748:	f7fe ffa8 	bl	800669c <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 800774c:	b662      	cpsie	i
 800774e:	e73a      	b.n	80075c6 <main+0x106>
                PRINTF("Unexpected event: %d\n\r", nextEvent);
 8007750:	0001      	movs	r1, r0
 8007752:	4826      	ldr	r0, [pc, #152]	; (80077ec <main+0x32c>)
 8007754:	f000 fab0 	bl	8007cb8 <vcom_Send>
                quit = true;
 8007758:	2101      	movs	r1, #1
 800775a:	2364      	movs	r3, #100	; 0x64
 800775c:	4a07      	ldr	r2, [pc, #28]	; (800777c <main+0x2bc>)
 800775e:	54d1      	strb	r1, [r2, r3]
                break;
 8007760:	e731      	b.n	80075c6 <main+0x106>
    PRINTF("Test Ended\n\r");
 8007762:	4823      	ldr	r0, [pc, #140]	; (80077f0 <main+0x330>)
 8007764:	f000 faa8 	bl	8007cb8 <vcom_Send>
    Radio.Sleep();
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <main+0x2d4>)
 800776a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776c:	4798      	blx	r3
}
 800776e:	2000      	movs	r0, #0
 8007770:	b00d      	add	sp, #52	; 0x34
 8007772:	bc0c      	pop	{r2, r3}
 8007774:	4690      	mov	r8, r2
 8007776:	4699      	mov	r9, r3
 8007778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	20000468 	.word	0x20000468
 8007780:	0800724d 	.word	0x0800724d
 8007784:	080072f9 	.word	0x080072f9
 8007788:	0800726d 	.word	0x0800726d
 800778c:	08007299 	.word	0x08007299
 8007790:	080072b9 	.word	0x080072b9
 8007794:	0800a3dc 	.word	0x0800a3dc
 8007798:	33936e20 	.word	0x33936e20
 800779c:	002dc6c0 	.word	0x002dc6c0
 80077a0:	20000788 	.word	0x20000788
 80077a4:	080072d9 	.word	0x080072d9
 80077a8:	00002710 	.word	0x00002710
 80077ac:	0800a5b4 	.word	0x0800a5b4
 80077b0:	0800a600 	.word	0x0800a600
 80077b4:	0800a614 	.word	0x0800a614
 80077b8:	200007b8 	.word	0x200007b8
 80077bc:	00004e20 	.word	0x00004e20
 80077c0:	0000270f 	.word	0x0000270f
 80077c4:	0800a4c8 	.word	0x0800a4c8
 80077c8:	200007a8 	.word	0x200007a8
 80077cc:	20000554 	.word	0x20000554
 80077d0:	0800a684 	.word	0x0800a684
 80077d4:	200007c0 	.word	0x200007c0
 80077d8:	200007cc 	.word	0x200007cc
 80077dc:	20000048 	.word	0x20000048
 80077e0:	0800a698 	.word	0x0800a698
 80077e4:	0800a6c4 	.word	0x0800a6c4
 80077e8:	0800a6d0 	.word	0x0800a6d0
 80077ec:	0800a71c 	.word	0x0800a71c
 80077f0:	0800a734 	.word	0x0800a734

080077f4 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
   /* Return function status */
  return HAL_OK;
}
 80077f4:	2000      	movs	r0, #0
 80077f6:	4770      	bx	lr

080077f8 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 80077f8:	b510      	push	{r4, lr}
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 80077fa:	f7fc fe43 	bl	8004484 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 80077fe:	f7fc fe89 	bl	8004514 <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <HAL_MspInit+0x20>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	2108      	movs	r1, #8
 8007808:	430a      	orrs	r2, r1
 800780a:	601a      	str	r2, [r3, #0]
  
  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this 
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	438a      	bics	r2, r1
 8007810:	601a      	str	r2, [r3, #0]
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 8007812:	f7fc fe75 	bl	8004500 <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif
}
 8007816:	bd10      	pop	{r4, pc}
 8007818:	40022000 	.word	0x40022000

0800781c <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including 
  *        the backup registers) and RCC_CSR register are set to their reset values.  
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800781c:	b500      	push	{lr}
 800781e:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8007820:	2304      	movs	r3, #4
 8007822:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007824:	2300      	movs	r3, #0
 8007826:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007828:	3301      	adds	r3, #1
 800782a:	33ff      	adds	r3, #255	; 0xff
 800782c:	930c      	str	r3, [sp, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800782e:	a80a      	add	r0, sp, #40	; 0x28
 8007830:	f7fc feba 	bl	80045a8 <HAL_RCC_OscConfig>
 8007834:	2800      	cmp	r0, #0
 8007836:	d119      	bne.n	800786c <HAL_RTC_MspInit+0x50>
  {
    Error_Handler();
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007838:	2320      	movs	r3, #32
 800783a:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800783c:	2380      	movs	r3, #128	; 0x80
 800783e:	025b      	lsls	r3, r3, #9
 8007840:	9302      	str	r3, [sp, #8]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007842:	a801      	add	r0, sp, #4
 8007844:	f7fd fb02 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 8007848:	2800      	cmp	r0, #0
 800784a:	d112      	bne.n	8007872 <HAL_RTC_MspInit+0x56>
    Error_Handler();
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800784c:	4a0a      	ldr	r2, [pc, #40]	; (8007878 <HAL_RTC_MspInit+0x5c>)
 800784e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8007850:	2380      	movs	r3, #128	; 0x80
 8007852:	02db      	lsls	r3, r3, #11
 8007854:	430b      	orrs	r3, r1
 8007856:	6513      	str	r3, [r2, #80]	; 0x50
  
  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8007858:	2200      	movs	r2, #0
 800785a:	2100      	movs	r1, #0
 800785c:	2002      	movs	r0, #2
 800785e:	f7fc fcd7 	bl	8004210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8007862:	2002      	movs	r0, #2
 8007864:	f7fc fd06 	bl	8004274 <HAL_NVIC_EnableIRQ>
}
 8007868:	b019      	add	sp, #100	; 0x64
 800786a:	bd00      	pop	{pc}
    Error_Handler();
 800786c:	f7ff f8f2 	bl	8006a54 <Error_Handler>
 8007870:	e7e2      	b.n	8007838 <HAL_RTC_MspInit+0x1c>
    Error_Handler();
 8007872:	f7ff f8ef 	bl	8006a54 <Error_Handler>
 8007876:	e7e9      	b.n	800784c <HAL_RTC_MspInit+0x30>
 8007878:	40021000 	.word	0x40021000

0800787c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800787c:	b510      	push	{r4, lr}
  TimerIrqHandler( );
 800787e:	f7fe ffaf 	bl	80067e0 <TimerIrqHandler>
}
 8007882:	bd10      	pop	{r4, pc}

08007884 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007884:	b510      	push	{r4, lr}
  HW_GPIO_IrqHandler( GPIO_Pin );
 8007886:	f7ff f9b7 	bl	8006bf8 <HW_GPIO_IrqHandler>
}
 800788a:	bd10      	pop	{r4, pc}

0800788c <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
  switch( GPIO_Pin )
 800788c:	2804      	cmp	r0, #4
 800788e:	d009      	beq.n	80078a4 <MSP_GetIRQn+0x18>
 8007890:	d804      	bhi.n	800789c <MSP_GetIRQn+0x10>
 8007892:	3801      	subs	r0, #1
 8007894:	2801      	cmp	r0, #1
 8007896:	d803      	bhi.n	80078a0 <MSP_GetIRQn+0x14>
  {
    case GPIO_PIN_0:  
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 8007898:	2005      	movs	r0, #5
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15: 
    default: return EXTI4_15_IRQn;
  }
}
 800789a:	4770      	bx	lr
  switch( GPIO_Pin )
 800789c:	2808      	cmp	r0, #8
 800789e:	d001      	beq.n	80078a4 <MSP_GetIRQn+0x18>
    default: return EXTI4_15_IRQn;
 80078a0:	2007      	movs	r0, #7
 80078a2:	e7fa      	b.n	800789a <MSP_GetIRQn+0xe>
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 80078a4:	2006      	movs	r0, #6
 80078a6:	e7f8      	b.n	800789a <MSP_GetIRQn+0xe>

080078a8 <IMC_GPIO_Init>:
// hardware watchdog handle
static IWDG_HandleTypeDef wdgHandle;

//********************************SHADAB************************************
void IMC_GPIO_Init(void)
{
 80078a8:	b500      	push	{lr}
 80078aa:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ac:	2214      	movs	r2, #20
 80078ae:	2100      	movs	r1, #0
 80078b0:	a801      	add	r0, sp, #4
 80078b2:	f000 fb06 	bl	8007ec2 <memset>

	  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80078b6:	4a0f      	ldr	r2, [pc, #60]	; (80078f4 <IMC_GPIO_Init+0x4c>)
 80078b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80078ba:	2301      	movs	r3, #1
 80078bc:	4319      	orrs	r1, r3
 80078be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80078c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80078c2:	401a      	ands	r2, r3
 80078c4:	9200      	str	r2, [sp, #0]
 80078c6:	9a00      	ldr	r2, [sp, #0]


    /*Configure GPIO pins : PA10 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80078c8:	22c0      	movs	r2, #192	; 0xc0
 80078ca:	00d2      	lsls	r2, r2, #3
 80078cc:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80078ce:	4a0a      	ldr	r2, [pc, #40]	; (80078f8 <IMC_GPIO_Init+0x50>)
 80078d0:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078d2:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d4:	a901      	add	r1, sp, #4
 80078d6:	20a0      	movs	r0, #160	; 0xa0
 80078d8:	05c0      	lsls	r0, r0, #23
 80078da:	f7fc fced 	bl	80042b8 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80078de:	2200      	movs	r2, #0
 80078e0:	2100      	movs	r1, #0
 80078e2:	2007      	movs	r0, #7
 80078e4:	f7fc fc94 	bl	8004210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80078e8:	2007      	movs	r0, #7
 80078ea:	f7fc fcc3 	bl	8004274 <HAL_NVIC_EnableIRQ>

}
 80078ee:	b007      	add	sp, #28
 80078f0:	bd00      	pop	{pc}
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	40021000 	.word	0x40021000
 80078f8:	10210000 	.word	0x10210000

080078fc <HW_DeInit>:
  * @brief This function Deinitializes the hardware
  * @param None
  * @retval None
  */
void HW_DeInit( void )
{
 80078fc:	b510      	push	{r4, lr}
  HW_SPI_DeInit( );
 80078fe:	f7ff fc3d 	bl	800717c <HW_SPI_DeInit>
  
  Radio.IoDeInit( );
 8007902:	4b04      	ldr	r3, [pc, #16]	; (8007914 <HW_DeInit+0x18>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	4798      	blx	r3
  
  vcom_DeInit( );
 8007908:	f000 f9ce 	bl	8007ca8 <vcom_DeInit>
 
  McuInitialized = false;
 800790c:	2200      	movs	r2, #0
 800790e:	4b02      	ldr	r3, [pc, #8]	; (8007918 <HW_DeInit+0x1c>)
 8007910:	701a      	strb	r2, [r3, #0]
}
 8007912:	bd10      	pop	{r4, pc}
 8007914:	0800a3dc 	.word	0x0800a3dc
 8007918:	200004dc 	.word	0x200004dc

0800791c <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config( void )
{
 800791c:	b500      	push	{lr}
 800791e:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007920:	2214      	movs	r2, #20
 8007922:	2100      	movs	r1, #0
 8007924:	a80f      	add	r0, sp, #60	; 0x3c
 8007926:	f000 facc 	bl	8007ec2 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800792a:	2238      	movs	r2, #56	; 0x38
 800792c:	2100      	movs	r1, #0
 800792e:	a801      	add	r0, sp, #4
 8007930:	f000 fac7 	bl	8007ec2 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8007934:	2302      	movs	r3, #2
 8007936:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8007938:	2201      	movs	r2, #1
 800793a:	9204      	str	r2, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800793c:	320f      	adds	r2, #15
 800793e:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8007940:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8007942:	2380      	movs	r3, #128	; 0x80
 8007944:	031b      	lsls	r3, r3, #12
 8007946:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8007948:	2380      	movs	r3, #128	; 0x80
 800794a:	041b      	lsls	r3, r3, #16
 800794c:	930e      	str	r3, [sp, #56]	; 0x38

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800794e:	a801      	add	r0, sp, #4
 8007950:	f7fc fe2a 	bl	80045a8 <HAL_RCC_OscConfig>
 8007954:	2800      	cmp	r0, #0
 8007956:	d121      	bne.n	800799c <SystemClock_Config+0x80>
  {
    Error_Handler();
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007958:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <SystemClock_Config+0x8c>)
 800795a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	055b      	lsls	r3, r3, #21
 8007960:	430b      	orrs	r3, r1
 8007962:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007964:	4911      	ldr	r1, [pc, #68]	; (80079ac <SystemClock_Config+0x90>)
 8007966:	680b      	ldr	r3, [r1, #0]
 8007968:	4a11      	ldr	r2, [pc, #68]	; (80079b0 <SystemClock_Config+0x94>)
 800796a:	401a      	ands	r2, r3
 800796c:	2380      	movs	r3, #128	; 0x80
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	4313      	orrs	r3, r2
 8007972:	600b      	str	r3, [r1, #0]
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8007974:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <SystemClock_Config+0x90>)
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	06db      	lsls	r3, r3, #27
 800797a:	d4fb      	bmi.n	8007974 <SystemClock_Config+0x58>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800797c:	230f      	movs	r3, #15
 800797e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007980:	3b0c      	subs	r3, #12
 8007982:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007984:	2300      	movs	r3, #0
 8007986:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007988:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800798a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800798c:	2101      	movs	r1, #1
 800798e:	a80f      	add	r0, sp, #60	; 0x3c
 8007990:	f7fd f966 	bl	8004c60 <HAL_RCC_ClockConfig>
 8007994:	2800      	cmp	r0, #0
 8007996:	d104      	bne.n	80079a2 <SystemClock_Config+0x86>
  {
    Error_Handler();
  }
}
 8007998:	b015      	add	sp, #84	; 0x54
 800799a:	bd00      	pop	{pc}
    Error_Handler();
 800799c:	f7ff f85a 	bl	8006a54 <Error_Handler>
 80079a0:	e7da      	b.n	8007958 <SystemClock_Config+0x3c>
    Error_Handler();
 80079a2:	f7ff f857 	bl	8006a54 <Error_Handler>
}
 80079a6:	e7f7      	b.n	8007998 <SystemClock_Config+0x7c>
 80079a8:	40021000 	.word	0x40021000
 80079ac:	40007000 	.word	0x40007000
 80079b0:	ffffe7ff 	.word	0xffffe7ff

080079b4 <highVoltagePSUEnable>:
    hvState = true;
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_1);
}


bool highVoltagePSUEnable(bool enable) {
 80079b4:	b510      	push	{r4, lr}
 80079b6:	0004      	movs	r4, r0

    if(hvState != enable) {
 80079b8:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <highVoltagePSUEnable+0x2c>)
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	4283      	cmp	r3, r0
 80079be:	d00d      	beq.n	80079dc <highVoltagePSUEnable+0x28>
        uint32_t clkSource = enable ? RCC_MCO1SOURCE_NOCLOCK : RCC_MCO1SOURCE_LSE;
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d008      	beq.n	80079d6 <highVoltagePSUEnable+0x22>
 80079c4:	2100      	movs	r1, #0
        // currently using RCC_MCO1 (PA8) output pin
        HAL_RCC_MCOConfig(RCC_MCO1, clkSource, RCC_MCODIV_1);
 80079c6:	2200      	movs	r2, #0
 80079c8:	2000      	movs	r0, #0
 80079ca:	f7fd f8ab 	bl	8004b24 <HAL_RCC_MCOConfig>
        // update current state
        hvState = enable;
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <highVoltagePSUEnable+0x2c>)
 80079d0:	705c      	strb	r4, [r3, #1]
//PRINTF("HV PSU STATE Changed:  %s\n\r", hvState ? "No Wiggle" : "Wiggle");
        return true;
 80079d2:	2001      	movs	r0, #1
    } else {
        return false;
    }
}
 80079d4:	bd10      	pop	{r4, pc}
        uint32_t clkSource = enable ? RCC_MCO1SOURCE_NOCLOCK : RCC_MCO1SOURCE_LSE;
 80079d6:	21e0      	movs	r1, #224	; 0xe0
 80079d8:	04c9      	lsls	r1, r1, #19
 80079da:	e7f4      	b.n	80079c6 <highVoltagePSUEnable+0x12>
        return false;
 80079dc:	2000      	movs	r0, #0
 80079de:	e7f9      	b.n	80079d4 <highVoltagePSUEnable+0x20>
 80079e0:	200004dc 	.word	0x200004dc

080079e4 <HAL_COMP_TriggerCallback>:



void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80079e4:	b510      	push	{r4, lr}
    // NOTE: the following is deboucing logic, as with a noise signal, many, many interrupts can be generated
    // and need to be handled at source rather than create ev queue events

    // if triggered in low power (wiggle) mode
    if( hvState == false) {
 80079e6:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <HAL_COMP_TriggerCallback+0x28>)
 80079e8:	785b      	ldrb	r3, [r3, #1]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d000      	beq.n	80079f0 <HAL_COMP_TriggerCallback+0xc>
          // ignore level high's as they are likely due to noise and we will either have just got a low or about to get one
        }
    } else {
        // ignore if we are already powering the hv psu, we must have triggered already, so the timer (or state machine) will turn us off
    }
}
 80079ee:	bd10      	pop	{r4, pc}
        if( HAL_COMP_GetOutputLevel(hcomp) == COMP_OUTPUT_LEVEL_LOW) {
 80079f0:	f7fc fbe8 	bl	80041c4 <HAL_COMP_GetOutputLevel>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d1fa      	bne.n	80079ee <HAL_COMP_TriggerCallback+0xa>
            if( highVoltagePSUEnable(true) == true) {
 80079f8:	3001      	adds	r0, #1
 80079fa:	f7ff ffdb 	bl	80079b4 <highVoltagePSUEnable>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d0f5      	beq.n	80079ee <HAL_COMP_TriggerCallback+0xa>
                CompOutputLowCallback();
 8007a02:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <HAL_COMP_TriggerCallback+0x2c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4798      	blx	r3
}
 8007a08:	e7f1      	b.n	80079ee <HAL_COMP_TriggerCallback+0xa>
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	200004dc 	.word	0x200004dc
 8007a10:	20000844 	.word	0x20000844

08007a14 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit( void )
{
 8007a14:	b510      	push	{r4, lr}
 8007a16:	b086      	sub	sp, #24
  if( AdcInitialized == false )
 8007a18:	4b18      	ldr	r3, [pc, #96]	; (8007a7c <HW_AdcInit+0x68>)
 8007a1a:	7d1b      	ldrb	r3, [r3, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <HW_AdcInit+0x10>
    // modded for Sentinel hardware
//    HW_GPIO_Init( BAT_LEVEL_PORT, BAT_LEVEL_PIN, &initStruct );
    HW_GPIO_Init( CHARGE_VOLTAGE_PORT, CHARGE_VOLTAGE_PIN, &initStruct );
}

}
 8007a20:	b006      	add	sp, #24
 8007a22:	bd10      	pop	{r4, pc}
    AdcInitialized = true;
 8007a24:	4815      	ldr	r0, [pc, #84]	; (8007a7c <HW_AdcInit+0x68>)
 8007a26:	3301      	adds	r3, #1
 8007a28:	7503      	strb	r3, [r0, #20]
    hadc.Instance  = ADC1;
 8007a2a:	4a15      	ldr	r2, [pc, #84]	; (8007a80 <HW_AdcInit+0x6c>)
 8007a2c:	6182      	str	r2, [r0, #24]
    hadc.Init.OversamplingMode      = DISABLE;
 8007a2e:	2400      	movs	r4, #0
 8007a30:	6584      	str	r4, [r0, #88]	; 0x58
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007a32:	22c0      	movs	r2, #192	; 0xc0
 8007a34:	0612      	lsls	r2, r2, #24
 8007a36:	61c2      	str	r2, [r0, #28]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8007a38:	6344      	str	r4, [r0, #52]	; 0x34
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 8007a3a:	6503      	str	r3, [r0, #80]	; 0x50
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8007a3c:	6304      	str	r4, [r0, #48]	; 0x30
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8007a3e:	6204      	str	r4, [r0, #32]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_7CYCLES_5;
 8007a40:	2202      	movs	r2, #2
 8007a42:	6542      	str	r2, [r0, #84]	; 0x54
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8007a44:	6283      	str	r3, [r0, #40]	; 0x28
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8007a46:	6244      	str	r4, [r0, #36]	; 0x24
    hadc.Init.ContinuousConvMode    = DISABLE;
 8007a48:	6384      	str	r4, [r0, #56]	; 0x38
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8007a4a:	63c4      	str	r4, [r0, #60]	; 0x3c
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007a4c:	6444      	str	r4, [r0, #68]	; 0x44
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8007a4e:	3303      	adds	r3, #3
 8007a50:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc.Init.DMAContinuousRequests = DISABLE;
 8007a52:	6484      	str	r4, [r0, #72]	; 0x48
    ADCCLK_ENABLE();
 8007a54:	4a0b      	ldr	r2, [pc, #44]	; (8007a84 <HW_AdcInit+0x70>)
 8007a56:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007a58:	33fd      	adds	r3, #253	; 0xfd
 8007a5a:	33ff      	adds	r3, #255	; 0xff
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_ADC_Init( &hadc );
 8007a60:	3018      	adds	r0, #24
 8007a62:	f7fc fab9 	bl	8003fd8 <HAL_ADC_Init>
    initStruct.Mode = GPIO_MODE_ANALOG;
 8007a66:	2303      	movs	r3, #3
 8007a68:	9302      	str	r3, [sp, #8]
    initStruct.Pull = GPIO_NOPULL;
 8007a6a:	9403      	str	r4, [sp, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8007a6c:	9304      	str	r3, [sp, #16]
    HW_GPIO_Init( CHARGE_VOLTAGE_PORT, CHARGE_VOLTAGE_PIN, &initStruct );
 8007a6e:	aa01      	add	r2, sp, #4
 8007a70:	2110      	movs	r1, #16
 8007a72:	20a0      	movs	r0, #160	; 0xa0
 8007a74:	05c0      	lsls	r0, r0, #23
 8007a76:	f7ff f84f 	bl	8006b18 <HW_GPIO_Init>
}
 8007a7a:	e7d1      	b.n	8007a20 <HW_AdcInit+0xc>
 8007a7c:	200004dc 	.word	0x200004dc
 8007a80:	40012400 	.word	0x40012400
 8007a84:	40021000 	.word	0x40021000

08007a88 <HW_Init>:
{
 8007a88:	b510      	push	{r4, lr}
  if( McuInitialized == false )
 8007a8a:	4b10      	ldr	r3, [pc, #64]	; (8007acc <HW_Init+0x44>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d000      	beq.n	8007a94 <HW_Init+0xc>
}
 8007a92:	bd10      	pop	{r4, pc}
    HW_AdcInit( );
 8007a94:	f7ff ffbe 	bl	8007a14 <HW_AdcInit>
    Radio.IoInit( );
 8007a98:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <HW_Init+0x48>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4798      	blx	r3
    HW_SPI_Init( );
 8007a9e:	f7ff fb11 	bl	80070c4 <HW_SPI_Init>
    HW_RTC_Init( );
 8007aa2:	f7ff fad7 	bl	8007054 <HW_RTC_Init>
    vcom_Init( );
 8007aa6:	f000 f8dd 	bl	8007c64 <vcom_Init>
    BSP_LED_Init( LED1 );
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f7fa fbc2 	bl	8002234 <BSP_LED_Init>
    BSP_LED_Init( LED2 );
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	f7fa fbbf 	bl	8002234 <BSP_LED_Init>
    BSP_LED_Init( LED3 );
 8007ab6:	2002      	movs	r0, #2
 8007ab8:	f7fa fbbc 	bl	8002234 <BSP_LED_Init>
    BSP_LED_Init( LED4 );
 8007abc:	2003      	movs	r0, #3
 8007abe:	f7fa fbb9 	bl	8002234 <BSP_LED_Init>
    McuInitialized = true;
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4b01      	ldr	r3, [pc, #4]	; (8007acc <HW_Init+0x44>)
 8007ac6:	701a      	strb	r2, [r3, #0]
}
 8007ac8:	e7e3      	b.n	8007a92 <HW_Init+0xa>
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	200004dc 	.word	0x200004dc
 8007ad0:	0800a3dc 	.word	0x0800a3dc

08007ad4 <LPM_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterStopMode( void)
{
 8007ad4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007ad6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007ada:	b672      	cpsid	i
  BACKUP_PRIMASK();

  DISABLE_IRQ( );

  HW_DeInit( );
 8007adc:	f7ff ff0e 	bl	80078fc <HW_DeInit>
  
  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8007ae0:	4a05      	ldr	r2, [pc, #20]	; (8007af8 <LPM_EnterStopMode+0x24>)
 8007ae2:	6813      	ldr	r3, [r2, #0]
 8007ae4:	2104      	movs	r1, #4
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aea:	f384 8810 	msr	PRIMASK, r4
  
  RESTORE_PRIMASK( );

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 8007aee:	3903      	subs	r1, #3
 8007af0:	2001      	movs	r0, #1
 8007af2:	f7fc fce7 	bl	80044c4 <HAL_PWR_EnterSTOPMode>
}
 8007af6:	bd10      	pop	{r4, pc}
 8007af8:	40007000 	.word	0x40007000

08007afc <LPM_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void LPM_ExitStopMode( void)
{
 8007afc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007afe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007b02:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8007b04:	4a11      	ldr	r2, [pc, #68]	; (8007b4c <LPM_ExitStopMode+0x50>)
 8007b06:	6813      	ldr	r3, [r2, #0]
 8007b08:	2101      	movs	r1, #1
 8007b0a:	430b      	orrs	r3, r1
 8007b0c:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while( __HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET ) {}
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <LPM_ExitStopMode+0x50>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	075b      	lsls	r3, r3, #29
 8007b14:	d5fb      	bpl.n	8007b0e <LPM_ExitStopMode+0x12>
  
  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8007b16:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <LPM_ExitStopMode+0x50>)
 8007b18:	6811      	ldr	r1, [r2, #0]
 8007b1a:	2380      	movs	r3, #128	; 0x80
 8007b1c:	045b      	lsls	r3, r3, #17
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	6013      	str	r3, [r2, #0]
  /* Wait till PLL is ready */
  while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET ) {}
 8007b22:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <LPM_ExitStopMode+0x50>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	019b      	lsls	r3, r3, #6
 8007b28:	d5fb      	bpl.n	8007b22 <LPM_ExitStopMode+0x26>
  
  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
 8007b2a:	4a08      	ldr	r2, [pc, #32]	; (8007b4c <LPM_ExitStopMode+0x50>)
 8007b2c:	68d3      	ldr	r3, [r2, #12]
 8007b2e:	2103      	movs	r1, #3
 8007b30:	430b      	orrs	r3, r1
 8007b32:	60d3      	str	r3, [r2, #12]
  
  /* Wait till PLL is used as system clock source */ 
  while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK ) {}
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <LPM_ExitStopMode+0x50>)
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	230c      	movs	r3, #12
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	2b0c      	cmp	r3, #12
 8007b3e:	d1f9      	bne.n	8007b34 <LPM_ExitStopMode+0x38>
    
  /*initilizes the peripherals*/
  HW_Init( );
 8007b40:	f7ff ffa2 	bl	8007a88 <HW_Init>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b44:	f384 8810 	msr	PRIMASK, r4

  RESTORE_PRIMASK( );
}
 8007b48:	bd10      	pop	{r4, pc}
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	40021000 	.word	0x40021000

08007b50 <LPM_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterSleepMode( void)
{
 8007b50:	b510      	push	{r4, lr}
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8007b52:	2101      	movs	r1, #1
 8007b54:	2000      	movs	r0, #0
 8007b56:	f7fc fc9d 	bl	8004494 <HAL_PWR_EnterSLEEPMode>
}
 8007b5a:	bd10      	pop	{r4, pc}

08007b5c <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 8007b5c:	4770      	bx	lr

08007b5e <HardFault_Handler>:
  __ASM volatile ("nop");
 8007b5e:	46c0      	nop			; (mov r8, r8)
 8007b60:	e7fd      	b.n	8007b5e <HardFault_Handler>

08007b62 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8007b62:	4770      	bx	lr

08007b64 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8007b64:	4770      	bx	lr

08007b66 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8007b66:	b510      	push	{r4, lr}
  HAL_IncTick();
 8007b68:	f7fc fa0e 	bl	8003f88 <HAL_IncTick>
}
 8007b6c:	bd10      	pop	{r4, pc}
	...

08007b70 <ADC1_COMP_IRQHandler>:
}*/

extern COMP_HandleTypeDef compHandle;

void ADC1_COMP_IRQHandler(void)
{
 8007b70:	b510      	push	{r4, lr}
  HAL_COMP_IRQHandler(&compHandle);
 8007b72:	4802      	ldr	r0, [pc, #8]	; (8007b7c <ADC1_COMP_IRQHandler+0xc>)
 8007b74:	f7fc fb2c 	bl	80041d0 <HAL_COMP_IRQHandler>
}
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	20000820 	.word	0x20000820

08007b80 <USART2_IRQHandler>:


void USART2_IRQHandler( void )
{
 8007b80:	b510      	push	{r4, lr}
   vcom_Print( );
 8007b82:	f000 f8ed 	bl	8007d60 <vcom_Print>
}
 8007b86:	bd10      	pop	{r4, pc}

08007b88 <RTC_IRQHandler>:

void RTC_IRQHandler( void )
{
 8007b88:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler ( );
 8007b8a:	f7ff fa25 	bl	8006fd8 <HW_RTC_IrqHandler>
}
 8007b8e:	bd10      	pop	{r4, pc}

08007b90 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler( void )
{
 8007b90:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8007b92:	2001      	movs	r0, #1
 8007b94:	f7fc fc68 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8007b98:	2002      	movs	r0, #2
 8007b9a:	f7fc fc65 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
}
 8007b9e:	bd10      	pop	{r4, pc}

08007ba0 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler( void )
{
 8007ba0:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8007ba2:	2004      	movs	r0, #4
 8007ba4:	f7fc fc60 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8007ba8:	2008      	movs	r0, #8
 8007baa:	f7fc fc5d 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
}
 8007bae:	bd10      	pop	{r4, pc}

08007bb0 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler( void )
{
 8007bb0:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8007bb2:	2010      	movs	r0, #16
 8007bb4:	f7fc fc58 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8007bb8:	2020      	movs	r0, #32
 8007bba:	f7fc fc55 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8007bbe:	2040      	movs	r0, #64	; 0x40
 8007bc0:	f7fc fc52 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8007bc4:	2080      	movs	r0, #128	; 0x80
 8007bc6:	f7fc fc4f 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8007bca:	2080      	movs	r0, #128	; 0x80
 8007bcc:	0040      	lsls	r0, r0, #1
 8007bce:	f7fc fc4b 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8007bd2:	2080      	movs	r0, #128	; 0x80
 8007bd4:	0080      	lsls	r0, r0, #2
 8007bd6:	f7fc fc47 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8007bda:	2080      	movs	r0, #128	; 0x80
 8007bdc:	00c0      	lsls	r0, r0, #3
 8007bde:	f7fc fc43 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8007be2:	2080      	movs	r0, #128	; 0x80
 8007be4:	0100      	lsls	r0, r0, #4
 8007be6:	f7fc fc3f 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8007bea:	2080      	movs	r0, #128	; 0x80
 8007bec:	0140      	lsls	r0, r0, #5
 8007bee:	f7fc fc3b 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8007bf2:	2080      	movs	r0, #128	; 0x80
 8007bf4:	0180      	lsls	r0, r0, #6
 8007bf6:	f7fc fc37 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8007bfa:	2080      	movs	r0, #128	; 0x80
 8007bfc:	01c0      	lsls	r0, r0, #7
 8007bfe:	f7fc fc33 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8007c02:	2080      	movs	r0, #128	; 0x80
 8007c04:	0200      	lsls	r0, r0, #8
 8007c06:	f7fc fc2f 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>

  //***************************SHADAB**************************************
  ImPcount++;
 8007c0a:	4a02      	ldr	r2, [pc, #8]	; (8007c14 <EXTI4_15_IRQHandler+0x64>)
 8007c0c:	6813      	ldr	r3, [r2, #0]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	6013      	str	r3, [r2, #0]
  //****************************SEND**************************************
}
 8007c12:	bd10      	pop	{r4, pc}
 8007c14:	20000554 	.word	0x20000554

08007c18 <formPingMessageHeader>:
    // assume it has already been tested as a ping msg, and on correct route

    return (getSrcAddressFromPing(buffer) == fromAddress);
}

 void formPingMessageHeader(uint8_t header, uint8_t route, uint8_t hopCountOrContentionWindowSize, uint16_t ourAddress, uint16_t nextHopAddress, uint16_t faultAddress, uint16_t reportAddress, uint8_t buffer[]) {
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	4694      	mov	ip, r2
 8007c1c:	001a      	movs	r2, r3
 8007c1e:	ab06      	add	r3, sp, #24
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	ac07      	add	r4, sp, #28
 8007c24:	8827      	ldrh	r7, [r4, #0]
 8007c26:	ac08      	add	r4, sp, #32
 8007c28:	8826      	ldrh	r6, [r4, #0]
 8007c2a:	9c09      	ldr	r4, [sp, #36]	; 0x24

    uint8_t *fieldPtr;
    // start with adding the header and route address
    buffer[0] = (header << 4) + (route & 0x0F);
 8007c2c:	0100      	lsls	r0, r0, #4
 8007c2e:	b2c0      	uxtb	r0, r0
 8007c30:	250f      	movs	r5, #15
 8007c32:	4029      	ands	r1, r5
 8007c34:	1841      	adds	r1, r0, r1
 8007c36:	7021      	strb	r1, [r4, #0]
    // then hop count / contention window size
    buffer[PING_MSG_HOP_COUNT_ADDR_OFFSET_BYTES] = hopCountOrContentionWindowSize;
 8007c38:	4661      	mov	r1, ip
 8007c3a:	7061      	strb	r1, [r4, #1]
    // then src address
    fieldPtr = &buffer[PING_MSG_SRC_NODE_ADDR_OFFSET_BYTES];
    fieldPtr[0] = (uint8_t)((ourAddress >> 8) & 0xFF);
 8007c3c:	0a11      	lsrs	r1, r2, #8
 8007c3e:	70a1      	strb	r1, [r4, #2]
    fieldPtr[1] = (uint8_t)(ourAddress & 0xFF);
 8007c40:	70e2      	strb	r2, [r4, #3]
    // then next hop (dest) address
    fieldPtr = &buffer[PING_MSG_DEST_NODE_ADDR_OFFSET_BYTES];
    fieldPtr[0] = (uint8_t)((nextHopAddress >> 8) & 0xFF);
 8007c42:	0a1a      	lsrs	r2, r3, #8
 8007c44:	7122      	strb	r2, [r4, #4]
    fieldPtr[1] = (uint8_t)(nextHopAddress & 0xFF);
 8007c46:	7163      	strb	r3, [r4, #5]
    // then faulty node address (zero if no faulty node)
    fieldPtr = &buffer[PING_MSG_FAULT_NODE_ADDR_OFFSET_BYTES];
    fieldPtr[0] = (uint8_t)((faultAddress >> 8) & 0xFF);
 8007c48:	0a3b      	lsrs	r3, r7, #8
 8007c4a:	71a3      	strb	r3, [r4, #6]
    fieldPtr[1] = (uint8_t)(faultAddress & 0xFF);
 8007c4c:	71e7      	strb	r7, [r4, #7]
    // then report node address (zero for now until implemented)
    fieldPtr = &buffer[PING_MSG_REPORT_NODE_ADDR_OFFSET_BYTES];
    fieldPtr[0] = (uint8_t)((reportAddress >> 8) & 0xFF);
 8007c4e:	0a33      	lsrs	r3, r6, #8
 8007c50:	7223      	strb	r3, [r4, #8]
    fieldPtr[1] = (uint8_t)(reportAddress & 0xFF);
 8007c52:	7266      	strb	r6, [r4, #9]
    // and clear the payload area too
    memset(&buffer[PING_MSG_PAYLOAD_OFFSET_BYTES], 0, PING_MSG_PAYLOAD_LENGTH_BYTES);
 8007c54:	0020      	movs	r0, r4
 8007c56:	300c      	adds	r0, #12
 8007c58:	2232      	movs	r2, #50	; 0x32
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	f000 f931 	bl	8007ec2 <memset>
}
 8007c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c64 <vcom_Init>:

/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void vcom_Init(void)
{
 8007c64:	b510      	push	{r4, lr}
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTX;
 8007c66:	480e      	ldr	r0, [pc, #56]	; (8007ca0 <vcom_Init+0x3c>)
 8007c68:	4b0e      	ldr	r3, [pc, #56]	; (8007ca4 <vcom_Init+0x40>)
 8007c6a:	6003      	str	r3, [r0, #0]
  
  UartHandle.Init.BaudRate   = 921600;
 8007c6c:	23e1      	movs	r3, #225	; 0xe1
 8007c6e:	031b      	lsls	r3, r3, #12
 8007c70:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8007c72:	2300      	movs	r3, #0
 8007c74:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8007c76:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8007c78:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8007c7a:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;// UART_MODE_TX_RX;
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	6143      	str	r3, [r0, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8007c80:	f7fe fc8a 	bl	8006598 <HAL_UART_Init>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d108      	bne.n	8007c9a <vcom_Init+0x36>
  {
    /* Initialization Error */
    Error_Handler(); 
  }
  
  HAL_NVIC_SetPriority(USARTX_IRQn, 0x1, 0);
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	201c      	movs	r0, #28
 8007c8e:	f7fc fabf 	bl	8004210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTX_IRQn);
 8007c92:	201c      	movs	r0, #28
 8007c94:	f7fc faee 	bl	8004274 <HAL_NVIC_EnableIRQ>
}
 8007c98:	bd10      	pop	{r4, pc}
    Error_Handler(); 
 8007c9a:	f7fe fedb 	bl	8006a54 <Error_Handler>
 8007c9e:	e7f3      	b.n	8007c88 <vcom_Init+0x24>
 8007ca0:	20000558 	.word	0x20000558
 8007ca4:	40004400 	.word	0x40004400

08007ca8 <vcom_DeInit>:


void vcom_DeInit(void)
{
 8007ca8:	b510      	push	{r4, lr}
#if 1
  HAL_UART_DeInit(&UartHandle);
 8007caa:	4802      	ldr	r0, [pc, #8]	; (8007cb4 <vcom_DeInit+0xc>)
 8007cac:	f7fe f95e 	bl	8005f6c <HAL_UART_DeInit>
#endif
}
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	46c0      	nop			; (mov r8, r8)
 8007cb4:	20000558 	.word	0x20000558

08007cb8 <vcom_Send>:

void vcom_Send( char *format, ... )
{
 8007cb8:	b40f      	push	{r0, r1, r2, r3}
 8007cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cbc:	46d6      	mov	lr, sl
 8007cbe:	464f      	mov	r7, r9
 8007cc0:	4646      	mov	r6, r8
 8007cc2:	b5c0      	push	{r6, r7, lr}
 8007cc4:	b0a2      	sub	sp, #136	; 0x88
 8007cc6:	ab2a      	add	r3, sp, #168	; 0xa8
 8007cc8:	cb02      	ldmia	r3!, {r1}
  va_list args;
  va_start(args, format);
 8007cca:	9321      	str	r3, [sp, #132]	; 0x84
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007ccc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007cd0:	b672      	cpsid	i
  
  BACKUP_PRIMASK();
  DISABLE_IRQ();
  
  /*convert into string at buff[0] of length iw*/
  len = vsprintf(&tempBuff[0], format, args);
 8007cd2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cd4:	a801      	add	r0, sp, #4
 8007cd6:	f000 fd85 	bl	80087e4 <vsiprintf>
 8007cda:	b2c4      	uxtb	r4, r0
  
  if (iw+len<BUFSIZE)
 8007cdc:	2370      	movs	r3, #112	; 0x70
 8007cde:	4a1f      	ldr	r2, [pc, #124]	; (8007d5c <vcom_Send+0xa4>)
 8007ce0:	5ad3      	ldrh	r3, [r2, r3]
 8007ce2:	22ff      	movs	r2, #255	; 0xff
 8007ce4:	4002      	ands	r2, r0
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	2bff      	cmp	r3, #255	; 0xff
 8007cea:	dd28      	ble.n	8007d3e <vcom_Send+0x86>
    memcpy( &buff[iw], &tempBuff[0], len);
    iw+=len;
  }
  else
  {
    lenTop=BUFSIZE-iw;
 8007cec:	4e1b      	ldr	r6, [pc, #108]	; (8007d5c <vcom_Send+0xa4>)
 8007cee:	2770      	movs	r7, #112	; 0x70
 8007cf0:	5bf3      	ldrh	r3, [r6, r7]
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	469a      	mov	sl, r3
 8007cf6:	4259      	negs	r1, r3
 8007cf8:	b2cb      	uxtb	r3, r1
 8007cfa:	4699      	mov	r9, r3
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 8007cfc:	5bf0      	ldrh	r0, [r6, r7]
 8007cfe:	2374      	movs	r3, #116	; 0x74
 8007d00:	4698      	mov	r8, r3
 8007d02:	44b0      	add	r8, r6
 8007d04:	4440      	add	r0, r8
 8007d06:	464a      	mov	r2, r9
 8007d08:	a901      	add	r1, sp, #4
 8007d0a:	f000 f8d1 	bl	8007eb0 <memcpy>
    len-=lenTop;
 8007d0e:	4454      	add	r4, sl
 8007d10:	b2e4      	uxtb	r4, r4
    memcpy( &buff[0], &tempBuff[lenTop], len);
 8007d12:	a901      	add	r1, sp, #4
 8007d14:	4449      	add	r1, r9
 8007d16:	0022      	movs	r2, r4
 8007d18:	4640      	mov	r0, r8
 8007d1a:	f000 f8c9 	bl	8007eb0 <memcpy>
    iw = len;
 8007d1e:	b2a4      	uxth	r4, r4
 8007d20:	53f4      	strh	r4, [r6, r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d22:	f385 8810 	msr	PRIMASK, r5
  }
  RESTORE_PRIMASK();
  
  HAL_NVIC_SetPendingIRQ(USARTX_IRQn);
 8007d26:	201c      	movs	r0, #28
 8007d28:	f7fc faae 	bl	8004288 <HAL_NVIC_SetPendingIRQ>
    
  va_end(args);
}
 8007d2c:	b022      	add	sp, #136	; 0x88
 8007d2e:	bc1c      	pop	{r2, r3, r4}
 8007d30:	4690      	mov	r8, r2
 8007d32:	4699      	mov	r9, r3
 8007d34:	46a2      	mov	sl, r4
 8007d36:	bcf0      	pop	{r4, r5, r6, r7}
 8007d38:	bc08      	pop	{r3}
 8007d3a:	b004      	add	sp, #16
 8007d3c:	4718      	bx	r3
    memcpy( &buff[iw], &tempBuff[0], len);
 8007d3e:	4e07      	ldr	r6, [pc, #28]	; (8007d5c <vcom_Send+0xa4>)
 8007d40:	2770      	movs	r7, #112	; 0x70
 8007d42:	5bf3      	ldrh	r3, [r6, r7]
 8007d44:	0030      	movs	r0, r6
 8007d46:	3074      	adds	r0, #116	; 0x74
 8007d48:	18c0      	adds	r0, r0, r3
 8007d4a:	a901      	add	r1, sp, #4
 8007d4c:	f000 f8b0 	bl	8007eb0 <memcpy>
    iw+=len;
 8007d50:	5bf3      	ldrh	r3, [r6, r7]
 8007d52:	191c      	adds	r4, r3, r4
 8007d54:	b2a4      	uxth	r4, r4
 8007d56:	53f4      	strh	r4, [r6, r7]
 8007d58:	e7e3      	b.n	8007d22 <vcom_Send+0x6a>
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	20000558 	.word	0x20000558

08007d60 <vcom_Print>:

/* modifes only ir*/
void vcom_Print( void)
{
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  char* CurChar;
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 8007d62:	e018      	b.n	8007d96 <vcom_Print+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007d64:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007d68:	b672      	cpsid	i
  {
    BACKUP_PRIMASK();
    DISABLE_IRQ();
    
    CurChar = &buff[ir];
 8007d6a:	4f15      	ldr	r7, [pc, #84]	; (8007dc0 <vcom_Print+0x60>)
 8007d6c:	2674      	movs	r6, #116	; 0x74
 8007d6e:	5bbb      	ldrh	r3, [r7, r6]
 8007d70:	4814      	ldr	r0, [pc, #80]	; (8007dc4 <vcom_Print+0x64>)
 8007d72:	0001      	movs	r1, r0
 8007d74:	3174      	adds	r1, #116	; 0x74
 8007d76:	18c9      	adds	r1, r1, r3
    ir= (ir+1) %BUFSIZE;
 8007d78:	3301      	adds	r3, #1
 8007d7a:	17dc      	asrs	r4, r3, #31
 8007d7c:	0e24      	lsrs	r4, r4, #24
 8007d7e:	191b      	adds	r3, r3, r4
 8007d80:	22ff      	movs	r2, #255	; 0xff
 8007d82:	4013      	ands	r3, r2
 8007d84:	1b1b      	subs	r3, r3, r4
 8007d86:	53bb      	strh	r3, [r7, r6]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d88:	f385 8810 	msr	PRIMASK, r5
    
    RESTORE_PRIMASK();
    
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 8007d8c:	2396      	movs	r3, #150	; 0x96
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	3afe      	subs	r2, #254	; 0xfe
 8007d92:	f7fe fb57 	bl	8006444 <HAL_UART_Transmit>
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 8007d96:	2370      	movs	r3, #112	; 0x70
 8007d98:	4a0a      	ldr	r2, [pc, #40]	; (8007dc4 <vcom_Print+0x64>)
 8007d9a:	5ad3      	ldrh	r3, [r2, r3]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	33ff      	adds	r3, #255	; 0xff
 8007da0:	2274      	movs	r2, #116	; 0x74
 8007da2:	4907      	ldr	r1, [pc, #28]	; (8007dc0 <vcom_Print+0x60>)
 8007da4:	5a8a      	ldrh	r2, [r1, r2]
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	17d9      	asrs	r1, r3, #31
 8007daa:	0e09      	lsrs	r1, r1, #24
 8007dac:	185b      	adds	r3, r3, r1
 8007dae:	22ff      	movs	r2, #255	; 0xff
 8007db0:	4013      	ands	r3, r2
 8007db2:	1a5b      	subs	r3, r3, r1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	dcd5      	bgt.n	8007d64 <vcom_Print+0x4>
  }
  HAL_NVIC_ClearPendingIRQ(USARTX_IRQn);
 8007db8:	201c      	movs	r0, #28
 8007dba:	f7fc fa71 	bl	80042a0 <HAL_NVIC_ClearPendingIRQ>
}
 8007dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc0:	20000658 	.word	0x20000658
 8007dc4:	20000558 	.word	0x20000558

08007dc8 <vcom_IoInit>:
  /*##-2- Configure peripheral GPIO ##########################################*/  
  vcom_IoInit( );
}

void vcom_IoInit(void)
{
 8007dc8:	b500      	push	{lr}
 8007dca:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 8007dcc:	2214      	movs	r2, #20
 8007dce:	2100      	movs	r1, #0
 8007dd0:	a801      	add	r0, sp, #4
 8007dd2:	f000 f876 	bl	8007ec2 <memset>
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 8007dd6:	4a0c      	ldr	r2, [pc, #48]	; (8007e08 <vcom_IoInit+0x40>)
 8007dd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4319      	orrs	r1, r3
 8007dde:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007de0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007de2:	401a      	ands	r2, r3
 8007de4:	9200      	str	r2, [sp, #0]
 8007de6:	9a00      	ldr	r2, [sp, #0]
//  USARTX_RX_GPIO_CLK_ENABLE();
    /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 8007de8:	2204      	movs	r2, #4
 8007dea:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007dec:	2102      	movs	r1, #2
 8007dee:	9102      	str	r1, [sp, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007df0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8007df2:	3302      	adds	r3, #2
 8007df4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 8007df6:	9205      	str	r2, [sp, #20]

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8007df8:	a901      	add	r1, sp, #4
 8007dfa:	20a0      	movs	r0, #160	; 0xa0
 8007dfc:	05c0      	lsls	r0, r0, #23
 8007dfe:	f7fc fa5b 	bl	80042b8 <HAL_GPIO_Init>
  /* UART RX GPIO pin configuration  */
//  GPIO_InitStruct.Pin = USARTX_RX_PIN;
//  GPIO_InitStruct.Alternate = USARTX_RX_AF;

//  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
}
 8007e02:	b007      	add	sp, #28
 8007e04:	bd00      	pop	{pc}
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	40021000 	.word	0x40021000

08007e0c <HAL_UART_MspInit>:
{
 8007e0c:	b510      	push	{r4, lr}
  USARTX_CLK_ENABLE(); 
 8007e0e:	4a04      	ldr	r2, [pc, #16]	; (8007e20 <HAL_UART_MspInit+0x14>)
 8007e10:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8007e12:	2380      	movs	r3, #128	; 0x80
 8007e14:	029b      	lsls	r3, r3, #10
 8007e16:	430b      	orrs	r3, r1
 8007e18:	6393      	str	r3, [r2, #56]	; 0x38
  vcom_IoInit( );
 8007e1a:	f7ff ffd5 	bl	8007dc8 <vcom_IoInit>
}
 8007e1e:	bd10      	pop	{r4, pc}
 8007e20:	40021000 	.word	0x40021000

08007e24 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 8007e24:	b500      	push	{lr}
 8007e26:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure={0};
 8007e28:	2214      	movs	r2, #20
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	a801      	add	r0, sp, #4
 8007e2e:	f000 f848 	bl	8007ec2 <memset>
  
  USARTX_TX_GPIO_CLK_ENABLE();
 8007e32:	4a0a      	ldr	r2, [pc, #40]	; (8007e5c <vcom_IoDeInit+0x38>)
 8007e34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007e36:	2301      	movs	r3, #1
 8007e38:	4319      	orrs	r1, r3
 8007e3a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e3e:	4013      	ands	r3, r2
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	9b00      	ldr	r3, [sp, #0]
  //USARTX_RX_GPIO_CLK_ENABLE();

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8007e44:	2303      	movs	r3, #3
 8007e46:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  
  GPIO_InitStructure.Pin =  USARTX_TX_PIN ;
 8007e48:	3301      	adds	r3, #1
 8007e4a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 8007e4c:	a901      	add	r1, sp, #4
 8007e4e:	20a0      	movs	r0, #160	; 0xa0
 8007e50:	05c0      	lsls	r0, r0, #23
 8007e52:	f7fc fa31 	bl	80042b8 <HAL_GPIO_Init>
  
//  GPIO_InitStructure.Pin =  USARTX_RX_PIN ;
//  HAL_GPIO_Init(  USARTX_RX_GPIO_PORT, &GPIO_InitStructure );
}
 8007e56:	b007      	add	sp, #28
 8007e58:	bd00      	pop	{pc}
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	40021000 	.word	0x40021000

08007e60 <HAL_UART_MspDeInit>:
  * @brief UART MSP DeInit
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8007e60:	b510      	push	{r4, lr}
  vcom_IoDeInit( );
 8007e62:	f7ff ffdf 	bl	8007e24 <vcom_IoDeInit>
}
 8007e66:	bd10      	pop	{r4, pc}

08007e68 <__libc_init_array>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	2600      	movs	r6, #0
 8007e6c:	4d0c      	ldr	r5, [pc, #48]	; (8007ea0 <__libc_init_array+0x38>)
 8007e6e:	4c0d      	ldr	r4, [pc, #52]	; (8007ea4 <__libc_init_array+0x3c>)
 8007e70:	1b64      	subs	r4, r4, r5
 8007e72:	10a4      	asrs	r4, r4, #2
 8007e74:	42a6      	cmp	r6, r4
 8007e76:	d109      	bne.n	8007e8c <__libc_init_array+0x24>
 8007e78:	2600      	movs	r6, #0
 8007e7a:	f002 fa17 	bl	800a2ac <_init>
 8007e7e:	4d0a      	ldr	r5, [pc, #40]	; (8007ea8 <__libc_init_array+0x40>)
 8007e80:	4c0a      	ldr	r4, [pc, #40]	; (8007eac <__libc_init_array+0x44>)
 8007e82:	1b64      	subs	r4, r4, r5
 8007e84:	10a4      	asrs	r4, r4, #2
 8007e86:	42a6      	cmp	r6, r4
 8007e88:	d105      	bne.n	8007e96 <__libc_init_array+0x2e>
 8007e8a:	bd70      	pop	{r4, r5, r6, pc}
 8007e8c:	00b3      	lsls	r3, r6, #2
 8007e8e:	58eb      	ldr	r3, [r5, r3]
 8007e90:	4798      	blx	r3
 8007e92:	3601      	adds	r6, #1
 8007e94:	e7ee      	b.n	8007e74 <__libc_init_array+0xc>
 8007e96:	00b3      	lsls	r3, r6, #2
 8007e98:	58eb      	ldr	r3, [r5, r3]
 8007e9a:	4798      	blx	r3
 8007e9c:	3601      	adds	r6, #1
 8007e9e:	e7f2      	b.n	8007e86 <__libc_init_array+0x1e>
 8007ea0:	0800a9a8 	.word	0x0800a9a8
 8007ea4:	0800a9a8 	.word	0x0800a9a8
 8007ea8:	0800a9a8 	.word	0x0800a9a8
 8007eac:	0800a9ac 	.word	0x0800a9ac

08007eb0 <memcpy>:
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	b510      	push	{r4, lr}
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d100      	bne.n	8007eba <memcpy+0xa>
 8007eb8:	bd10      	pop	{r4, pc}
 8007eba:	5ccc      	ldrb	r4, [r1, r3]
 8007ebc:	54c4      	strb	r4, [r0, r3]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	e7f8      	b.n	8007eb4 <memcpy+0x4>

08007ec2 <memset>:
 8007ec2:	0003      	movs	r3, r0
 8007ec4:	1882      	adds	r2, r0, r2
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d100      	bne.n	8007ecc <memset+0xa>
 8007eca:	4770      	bx	lr
 8007ecc:	7019      	strb	r1, [r3, #0]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	e7f9      	b.n	8007ec6 <memset+0x4>

08007ed2 <__cvt>:
 8007ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed4:	b08b      	sub	sp, #44	; 0x2c
 8007ed6:	0014      	movs	r4, r2
 8007ed8:	1e1d      	subs	r5, r3, #0
 8007eda:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007edc:	da53      	bge.n	8007f86 <__cvt+0xb4>
 8007ede:	2480      	movs	r4, #128	; 0x80
 8007ee0:	0624      	lsls	r4, r4, #24
 8007ee2:	191b      	adds	r3, r3, r4
 8007ee4:	001d      	movs	r5, r3
 8007ee6:	0014      	movs	r4, r2
 8007ee8:	232d      	movs	r3, #45	; 0x2d
 8007eea:	700b      	strb	r3, [r1, #0]
 8007eec:	2320      	movs	r3, #32
 8007eee:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	439e      	bics	r6, r3
 8007ef4:	2e46      	cmp	r6, #70	; 0x46
 8007ef6:	d007      	beq.n	8007f08 <__cvt+0x36>
 8007ef8:	0033      	movs	r3, r6
 8007efa:	3b45      	subs	r3, #69	; 0x45
 8007efc:	4259      	negs	r1, r3
 8007efe:	414b      	adcs	r3, r1
 8007f00:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007f02:	3a01      	subs	r2, #1
 8007f04:	18cb      	adds	r3, r1, r3
 8007f06:	9310      	str	r3, [sp, #64]	; 0x40
 8007f08:	ab09      	add	r3, sp, #36	; 0x24
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	ab08      	add	r3, sp, #32
 8007f0e:	9303      	str	r3, [sp, #12]
 8007f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f12:	9200      	str	r2, [sp, #0]
 8007f14:	9302      	str	r3, [sp, #8]
 8007f16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f18:	0022      	movs	r2, r4
 8007f1a:	9301      	str	r3, [sp, #4]
 8007f1c:	002b      	movs	r3, r5
 8007f1e:	f000 fcf1 	bl	8008904 <_dtoa_r>
 8007f22:	0007      	movs	r7, r0
 8007f24:	2e47      	cmp	r6, #71	; 0x47
 8007f26:	d102      	bne.n	8007f2e <__cvt+0x5c>
 8007f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f2a:	07db      	lsls	r3, r3, #31
 8007f2c:	d524      	bpl.n	8007f78 <__cvt+0xa6>
 8007f2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f30:	18fb      	adds	r3, r7, r3
 8007f32:	9307      	str	r3, [sp, #28]
 8007f34:	2e46      	cmp	r6, #70	; 0x46
 8007f36:	d114      	bne.n	8007f62 <__cvt+0x90>
 8007f38:	783b      	ldrb	r3, [r7, #0]
 8007f3a:	2b30      	cmp	r3, #48	; 0x30
 8007f3c:	d10c      	bne.n	8007f58 <__cvt+0x86>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2300      	movs	r3, #0
 8007f42:	0020      	movs	r0, r4
 8007f44:	0029      	movs	r1, r5
 8007f46:	f7f8 fa77 	bl	8000438 <__aeabi_dcmpeq>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d104      	bne.n	8007f58 <__cvt+0x86>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f52:	1a9b      	subs	r3, r3, r2
 8007f54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f5a:	9a07      	ldr	r2, [sp, #28]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	18d3      	adds	r3, r2, r3
 8007f60:	9307      	str	r3, [sp, #28]
 8007f62:	2200      	movs	r2, #0
 8007f64:	2300      	movs	r3, #0
 8007f66:	0020      	movs	r0, r4
 8007f68:	0029      	movs	r1, r5
 8007f6a:	f7f8 fa65 	bl	8000438 <__aeabi_dcmpeq>
 8007f6e:	2230      	movs	r2, #48	; 0x30
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d00d      	beq.n	8007f90 <__cvt+0xbe>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	9309      	str	r3, [sp, #36]	; 0x24
 8007f78:	0038      	movs	r0, r7
 8007f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f7e:	1bdb      	subs	r3, r3, r7
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	b00b      	add	sp, #44	; 0x2c
 8007f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f86:	2300      	movs	r3, #0
 8007f88:	e7af      	b.n	8007eea <__cvt+0x18>
 8007f8a:	1c59      	adds	r1, r3, #1
 8007f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f92:	9907      	ldr	r1, [sp, #28]
 8007f94:	4299      	cmp	r1, r3
 8007f96:	d8f8      	bhi.n	8007f8a <__cvt+0xb8>
 8007f98:	e7ee      	b.n	8007f78 <__cvt+0xa6>

08007f9a <__exponent>:
 8007f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f9c:	232b      	movs	r3, #43	; 0x2b
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	0007      	movs	r7, r0
 8007fa2:	000c      	movs	r4, r1
 8007fa4:	7002      	strb	r2, [r0, #0]
 8007fa6:	1c86      	adds	r6, r0, #2
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	da01      	bge.n	8007fb0 <__exponent+0x16>
 8007fac:	232d      	movs	r3, #45	; 0x2d
 8007fae:	424c      	negs	r4, r1
 8007fb0:	707b      	strb	r3, [r7, #1]
 8007fb2:	2c09      	cmp	r4, #9
 8007fb4:	dd23      	ble.n	8007ffe <__exponent+0x64>
 8007fb6:	ab02      	add	r3, sp, #8
 8007fb8:	1ddd      	adds	r5, r3, #7
 8007fba:	1e6b      	subs	r3, r5, #1
 8007fbc:	0020      	movs	r0, r4
 8007fbe:	210a      	movs	r1, #10
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	f7f8 fa23 	bl	800040c <__aeabi_idivmod>
 8007fc6:	1e6b      	subs	r3, r5, #1
 8007fc8:	3130      	adds	r1, #48	; 0x30
 8007fca:	7019      	strb	r1, [r3, #0]
 8007fcc:	0020      	movs	r0, r4
 8007fce:	210a      	movs	r1, #10
 8007fd0:	f7f8 f936 	bl	8000240 <__divsi3>
 8007fd4:	0004      	movs	r4, r0
 8007fd6:	2809      	cmp	r0, #9
 8007fd8:	dc0a      	bgt.n	8007ff0 <__exponent+0x56>
 8007fda:	3d02      	subs	r5, #2
 8007fdc:	3430      	adds	r4, #48	; 0x30
 8007fde:	702c      	strb	r4, [r5, #0]
 8007fe0:	ab02      	add	r3, sp, #8
 8007fe2:	3307      	adds	r3, #7
 8007fe4:	0030      	movs	r0, r6
 8007fe6:	42ab      	cmp	r3, r5
 8007fe8:	d804      	bhi.n	8007ff4 <__exponent+0x5a>
 8007fea:	1bc0      	subs	r0, r0, r7
 8007fec:	b005      	add	sp, #20
 8007fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff0:	9d01      	ldr	r5, [sp, #4]
 8007ff2:	e7e2      	b.n	8007fba <__exponent+0x20>
 8007ff4:	782b      	ldrb	r3, [r5, #0]
 8007ff6:	3501      	adds	r5, #1
 8007ff8:	7033      	strb	r3, [r6, #0]
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	e7f0      	b.n	8007fe0 <__exponent+0x46>
 8007ffe:	2330      	movs	r3, #48	; 0x30
 8008000:	18e4      	adds	r4, r4, r3
 8008002:	7033      	strb	r3, [r6, #0]
 8008004:	1cb0      	adds	r0, r6, #2
 8008006:	7074      	strb	r4, [r6, #1]
 8008008:	e7ef      	b.n	8007fea <__exponent+0x50>
	...

0800800c <_printf_float>:
 800800c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800800e:	b095      	sub	sp, #84	; 0x54
 8008010:	000c      	movs	r4, r1
 8008012:	920a      	str	r2, [sp, #40]	; 0x28
 8008014:	930b      	str	r3, [sp, #44]	; 0x2c
 8008016:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008018:	9009      	str	r0, [sp, #36]	; 0x24
 800801a:	f001 fa5b 	bl	80094d4 <_localeconv_r>
 800801e:	6803      	ldr	r3, [r0, #0]
 8008020:	0018      	movs	r0, r3
 8008022:	930d      	str	r3, [sp, #52]	; 0x34
 8008024:	f7f8 f870 	bl	8000108 <strlen>
 8008028:	2300      	movs	r3, #0
 800802a:	9312      	str	r3, [sp, #72]	; 0x48
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	900e      	str	r0, [sp, #56]	; 0x38
 8008030:	930c      	str	r3, [sp, #48]	; 0x30
 8008032:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008034:	7e27      	ldrb	r7, [r4, #24]
 8008036:	682b      	ldr	r3, [r5, #0]
 8008038:	2207      	movs	r2, #7
 800803a:	05c9      	lsls	r1, r1, #23
 800803c:	d547      	bpl.n	80080ce <_printf_float+0xc2>
 800803e:	189b      	adds	r3, r3, r2
 8008040:	4393      	bics	r3, r2
 8008042:	001a      	movs	r2, r3
 8008044:	3208      	adds	r2, #8
 8008046:	602a      	str	r2, [r5, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	64a2      	str	r2, [r4, #72]	; 0x48
 800804e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008050:	2201      	movs	r2, #1
 8008052:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008054:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8008056:	006b      	lsls	r3, r5, #1
 8008058:	085b      	lsrs	r3, r3, #1
 800805a:	930f      	str	r3, [sp, #60]	; 0x3c
 800805c:	4252      	negs	r2, r2
 800805e:	4ba7      	ldr	r3, [pc, #668]	; (80082fc <_printf_float+0x2f0>)
 8008060:	0030      	movs	r0, r6
 8008062:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008064:	f7f9 ffee 	bl	8002044 <__aeabi_dcmpun>
 8008068:	2800      	cmp	r0, #0
 800806a:	d000      	beq.n	800806e <_printf_float+0x62>
 800806c:	e206      	b.n	800847c <_printf_float+0x470>
 800806e:	2201      	movs	r2, #1
 8008070:	4ba2      	ldr	r3, [pc, #648]	; (80082fc <_printf_float+0x2f0>)
 8008072:	4252      	negs	r2, r2
 8008074:	0030      	movs	r0, r6
 8008076:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008078:	f7f8 f9ee 	bl	8000458 <__aeabi_dcmple>
 800807c:	2800      	cmp	r0, #0
 800807e:	d000      	beq.n	8008082 <_printf_float+0x76>
 8008080:	e1fc      	b.n	800847c <_printf_float+0x470>
 8008082:	2200      	movs	r2, #0
 8008084:	2300      	movs	r3, #0
 8008086:	0030      	movs	r0, r6
 8008088:	0029      	movs	r1, r5
 800808a:	f7f8 f9db 	bl	8000444 <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d003      	beq.n	800809a <_printf_float+0x8e>
 8008092:	0023      	movs	r3, r4
 8008094:	222d      	movs	r2, #45	; 0x2d
 8008096:	3343      	adds	r3, #67	; 0x43
 8008098:	701a      	strb	r2, [r3, #0]
 800809a:	4d99      	ldr	r5, [pc, #612]	; (8008300 <_printf_float+0x2f4>)
 800809c:	2f47      	cmp	r7, #71	; 0x47
 800809e:	d800      	bhi.n	80080a2 <_printf_float+0x96>
 80080a0:	4d98      	ldr	r5, [pc, #608]	; (8008304 <_printf_float+0x2f8>)
 80080a2:	2303      	movs	r3, #3
 80080a4:	2600      	movs	r6, #0
 80080a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	3301      	adds	r3, #1
 80080ac:	439a      	bics	r2, r3
 80080ae:	6022      	str	r2, [r4, #0]
 80080b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080b2:	aa13      	add	r2, sp, #76	; 0x4c
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	0021      	movs	r1, r4
 80080b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080bc:	f000 f9f2 	bl	80084a4 <_printf_common>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d000      	beq.n	80080c6 <_printf_float+0xba>
 80080c4:	e09c      	b.n	8008200 <_printf_float+0x1f4>
 80080c6:	2001      	movs	r0, #1
 80080c8:	4240      	negs	r0, r0
 80080ca:	b015      	add	sp, #84	; 0x54
 80080cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ce:	3307      	adds	r3, #7
 80080d0:	e7b6      	b.n	8008040 <_printf_float+0x34>
 80080d2:	2380      	movs	r3, #128	; 0x80
 80080d4:	6862      	ldr	r2, [r4, #4]
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	1c51      	adds	r1, r2, #1
 80080da:	d145      	bne.n	8008168 <_printf_float+0x15c>
 80080dc:	3207      	adds	r2, #7
 80080de:	6062      	str	r2, [r4, #4]
 80080e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080e2:	2100      	movs	r1, #0
 80080e4:	4313      	orrs	r3, r2
 80080e6:	aa12      	add	r2, sp, #72	; 0x48
 80080e8:	9205      	str	r2, [sp, #20]
 80080ea:	aa11      	add	r2, sp, #68	; 0x44
 80080ec:	9203      	str	r2, [sp, #12]
 80080ee:	2223      	movs	r2, #35	; 0x23
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	9106      	str	r1, [sp, #24]
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	a908      	add	r1, sp, #32
 80080f8:	6863      	ldr	r3, [r4, #4]
 80080fa:	1852      	adds	r2, r2, r1
 80080fc:	9202      	str	r2, [sp, #8]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	0032      	movs	r2, r6
 8008102:	002b      	movs	r3, r5
 8008104:	9704      	str	r7, [sp, #16]
 8008106:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008108:	f7ff fee3 	bl	8007ed2 <__cvt>
 800810c:	2320      	movs	r3, #32
 800810e:	003a      	movs	r2, r7
 8008110:	0005      	movs	r5, r0
 8008112:	439a      	bics	r2, r3
 8008114:	2a47      	cmp	r2, #71	; 0x47
 8008116:	d107      	bne.n	8008128 <_printf_float+0x11c>
 8008118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800811a:	1cda      	adds	r2, r3, #3
 800811c:	db02      	blt.n	8008124 <_printf_float+0x118>
 800811e:	6862      	ldr	r2, [r4, #4]
 8008120:	4293      	cmp	r3, r2
 8008122:	dd5b      	ble.n	80081dc <_printf_float+0x1d0>
 8008124:	3f02      	subs	r7, #2
 8008126:	b2ff      	uxtb	r7, r7
 8008128:	9911      	ldr	r1, [sp, #68]	; 0x44
 800812a:	2f65      	cmp	r7, #101	; 0x65
 800812c:	d83b      	bhi.n	80081a6 <_printf_float+0x19a>
 800812e:	0020      	movs	r0, r4
 8008130:	3901      	subs	r1, #1
 8008132:	003a      	movs	r2, r7
 8008134:	3050      	adds	r0, #80	; 0x50
 8008136:	9111      	str	r1, [sp, #68]	; 0x44
 8008138:	f7ff ff2f 	bl	8007f9a <__exponent>
 800813c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800813e:	0006      	movs	r6, r0
 8008140:	1883      	adds	r3, r0, r2
 8008142:	6123      	str	r3, [r4, #16]
 8008144:	2a01      	cmp	r2, #1
 8008146:	dc02      	bgt.n	800814e <_printf_float+0x142>
 8008148:	6822      	ldr	r2, [r4, #0]
 800814a:	07d2      	lsls	r2, r2, #31
 800814c:	d501      	bpl.n	8008152 <_printf_float+0x146>
 800814e:	3301      	adds	r3, #1
 8008150:	6123      	str	r3, [r4, #16]
 8008152:	2323      	movs	r3, #35	; 0x23
 8008154:	aa08      	add	r2, sp, #32
 8008156:	189b      	adds	r3, r3, r2
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0a8      	beq.n	80080b0 <_printf_float+0xa4>
 800815e:	0023      	movs	r3, r4
 8008160:	222d      	movs	r2, #45	; 0x2d
 8008162:	3343      	adds	r3, #67	; 0x43
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	e7a3      	b.n	80080b0 <_printf_float+0xa4>
 8008168:	2f67      	cmp	r7, #103	; 0x67
 800816a:	d001      	beq.n	8008170 <_printf_float+0x164>
 800816c:	2f47      	cmp	r7, #71	; 0x47
 800816e:	d1b7      	bne.n	80080e0 <_printf_float+0xd4>
 8008170:	2a00      	cmp	r2, #0
 8008172:	d016      	beq.n	80081a2 <_printf_float+0x196>
 8008174:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008176:	a808      	add	r0, sp, #32
 8008178:	430b      	orrs	r3, r1
 800817a:	2100      	movs	r1, #0
 800817c:	9106      	str	r1, [sp, #24]
 800817e:	a912      	add	r1, sp, #72	; 0x48
 8008180:	9105      	str	r1, [sp, #20]
 8008182:	a911      	add	r1, sp, #68	; 0x44
 8008184:	9103      	str	r1, [sp, #12]
 8008186:	2123      	movs	r1, #35	; 0x23
 8008188:	1809      	adds	r1, r1, r0
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	9200      	str	r2, [sp, #0]
 8008190:	002b      	movs	r3, r5
 8008192:	9704      	str	r7, [sp, #16]
 8008194:	9102      	str	r1, [sp, #8]
 8008196:	0032      	movs	r2, r6
 8008198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800819a:	f7ff fe9a 	bl	8007ed2 <__cvt>
 800819e:	0005      	movs	r5, r0
 80081a0:	e7ba      	b.n	8008118 <_printf_float+0x10c>
 80081a2:	2201      	movs	r2, #1
 80081a4:	e79b      	b.n	80080de <_printf_float+0xd2>
 80081a6:	2f66      	cmp	r7, #102	; 0x66
 80081a8:	d119      	bne.n	80081de <_printf_float+0x1d2>
 80081aa:	6863      	ldr	r3, [r4, #4]
 80081ac:	2900      	cmp	r1, #0
 80081ae:	dd0c      	ble.n	80081ca <_printf_float+0x1be>
 80081b0:	6121      	str	r1, [r4, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d102      	bne.n	80081bc <_printf_float+0x1b0>
 80081b6:	6822      	ldr	r2, [r4, #0]
 80081b8:	07d2      	lsls	r2, r2, #31
 80081ba:	d502      	bpl.n	80081c2 <_printf_float+0x1b6>
 80081bc:	3301      	adds	r3, #1
 80081be:	185b      	adds	r3, r3, r1
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081c4:	2600      	movs	r6, #0
 80081c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80081c8:	e7c3      	b.n	8008152 <_printf_float+0x146>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d103      	bne.n	80081d6 <_printf_float+0x1ca>
 80081ce:	2201      	movs	r2, #1
 80081d0:	6821      	ldr	r1, [r4, #0]
 80081d2:	4211      	tst	r1, r2
 80081d4:	d000      	beq.n	80081d8 <_printf_float+0x1cc>
 80081d6:	1c9a      	adds	r2, r3, #2
 80081d8:	6122      	str	r2, [r4, #16]
 80081da:	e7f2      	b.n	80081c2 <_printf_float+0x1b6>
 80081dc:	2767      	movs	r7, #103	; 0x67
 80081de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80081e2:	4283      	cmp	r3, r0
 80081e4:	db05      	blt.n	80081f2 <_printf_float+0x1e6>
 80081e6:	6822      	ldr	r2, [r4, #0]
 80081e8:	6123      	str	r3, [r4, #16]
 80081ea:	07d2      	lsls	r2, r2, #31
 80081ec:	d5e9      	bpl.n	80081c2 <_printf_float+0x1b6>
 80081ee:	3301      	adds	r3, #1
 80081f0:	e7e6      	b.n	80081c0 <_printf_float+0x1b4>
 80081f2:	2201      	movs	r2, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dc01      	bgt.n	80081fc <_printf_float+0x1f0>
 80081f8:	1892      	adds	r2, r2, r2
 80081fa:	1ad2      	subs	r2, r2, r3
 80081fc:	1812      	adds	r2, r2, r0
 80081fe:	e7eb      	b.n	80081d8 <_printf_float+0x1cc>
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	0553      	lsls	r3, r2, #21
 8008204:	d408      	bmi.n	8008218 <_printf_float+0x20c>
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	002a      	movs	r2, r5
 800820a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800820c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800820e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008210:	47a8      	blx	r5
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d129      	bne.n	800826a <_printf_float+0x25e>
 8008216:	e756      	b.n	80080c6 <_printf_float+0xba>
 8008218:	2f65      	cmp	r7, #101	; 0x65
 800821a:	d800      	bhi.n	800821e <_printf_float+0x212>
 800821c:	e0dc      	b.n	80083d8 <_printf_float+0x3cc>
 800821e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008220:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008222:	2200      	movs	r2, #0
 8008224:	2300      	movs	r3, #0
 8008226:	f7f8 f907 	bl	8000438 <__aeabi_dcmpeq>
 800822a:	2800      	cmp	r0, #0
 800822c:	d035      	beq.n	800829a <_printf_float+0x28e>
 800822e:	2301      	movs	r3, #1
 8008230:	4a35      	ldr	r2, [pc, #212]	; (8008308 <_printf_float+0x2fc>)
 8008232:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008236:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008238:	47a8      	blx	r5
 800823a:	1c43      	adds	r3, r0, #1
 800823c:	d100      	bne.n	8008240 <_printf_float+0x234>
 800823e:	e742      	b.n	80080c6 <_printf_float+0xba>
 8008240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008242:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008244:	4293      	cmp	r3, r2
 8008246:	db02      	blt.n	800824e <_printf_float+0x242>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	07db      	lsls	r3, r3, #31
 800824c:	d50d      	bpl.n	800826a <_printf_float+0x25e>
 800824e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008252:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008254:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008258:	47a8      	blx	r5
 800825a:	2500      	movs	r5, #0
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	d100      	bne.n	8008262 <_printf_float+0x256>
 8008260:	e731      	b.n	80080c6 <_printf_float+0xba>
 8008262:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008264:	3b01      	subs	r3, #1
 8008266:	429d      	cmp	r5, r3
 8008268:	db0b      	blt.n	8008282 <_printf_float+0x276>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	2500      	movs	r5, #0
 800826e:	079b      	lsls	r3, r3, #30
 8008270:	d500      	bpl.n	8008274 <_printf_float+0x268>
 8008272:	e0fd      	b.n	8008470 <_printf_float+0x464>
 8008274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008276:	68e0      	ldr	r0, [r4, #12]
 8008278:	4298      	cmp	r0, r3
 800827a:	db00      	blt.n	800827e <_printf_float+0x272>
 800827c:	e725      	b.n	80080ca <_printf_float+0xbe>
 800827e:	0018      	movs	r0, r3
 8008280:	e723      	b.n	80080ca <_printf_float+0xbe>
 8008282:	0022      	movs	r2, r4
 8008284:	2301      	movs	r3, #1
 8008286:	321a      	adds	r2, #26
 8008288:	990a      	ldr	r1, [sp, #40]	; 0x28
 800828a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800828c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800828e:	47b0      	blx	r6
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d100      	bne.n	8008296 <_printf_float+0x28a>
 8008294:	e717      	b.n	80080c6 <_printf_float+0xba>
 8008296:	3501      	adds	r5, #1
 8008298:	e7e3      	b.n	8008262 <_printf_float+0x256>
 800829a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc35      	bgt.n	800830c <_printf_float+0x300>
 80082a0:	2301      	movs	r3, #1
 80082a2:	4a19      	ldr	r2, [pc, #100]	; (8008308 <_printf_float+0x2fc>)
 80082a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80082aa:	47b0      	blx	r6
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d100      	bne.n	80082b2 <_printf_float+0x2a6>
 80082b0:	e709      	b.n	80080c6 <_printf_float+0xba>
 80082b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d105      	bne.n	80082c4 <_printf_float+0x2b8>
 80082b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d102      	bne.n	80082c4 <_printf_float+0x2b8>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	07db      	lsls	r3, r3, #31
 80082c2:	d5d2      	bpl.n	800826a <_printf_float+0x25e>
 80082c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80082c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ce:	47b0      	blx	r6
 80082d0:	2600      	movs	r6, #0
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	d100      	bne.n	80082d8 <_printf_float+0x2cc>
 80082d6:	e6f6      	b.n	80080c6 <_printf_float+0xba>
 80082d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082da:	425b      	negs	r3, r3
 80082dc:	429e      	cmp	r6, r3
 80082de:	db01      	blt.n	80082e4 <_printf_float+0x2d8>
 80082e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082e2:	e791      	b.n	8008208 <_printf_float+0x1fc>
 80082e4:	0022      	movs	r2, r4
 80082e6:	2301      	movs	r3, #1
 80082e8:	321a      	adds	r2, #26
 80082ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80082f0:	47b8      	blx	r7
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d100      	bne.n	80082f8 <_printf_float+0x2ec>
 80082f6:	e6e6      	b.n	80080c6 <_printf_float+0xba>
 80082f8:	3601      	adds	r6, #1
 80082fa:	e7ed      	b.n	80082d8 <_printf_float+0x2cc>
 80082fc:	7fefffff 	.word	0x7fefffff
 8008300:	0800a748 	.word	0x0800a748
 8008304:	0800a744 	.word	0x0800a744
 8008308:	0800a754 	.word	0x0800a754
 800830c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800830e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008310:	429e      	cmp	r6, r3
 8008312:	dd00      	ble.n	8008316 <_printf_float+0x30a>
 8008314:	001e      	movs	r6, r3
 8008316:	2e00      	cmp	r6, #0
 8008318:	dc35      	bgt.n	8008386 <_printf_float+0x37a>
 800831a:	2300      	movs	r3, #0
 800831c:	930c      	str	r3, [sp, #48]	; 0x30
 800831e:	43f3      	mvns	r3, r6
 8008320:	17db      	asrs	r3, r3, #31
 8008322:	930f      	str	r3, [sp, #60]	; 0x3c
 8008324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008326:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8008328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800832a:	4033      	ands	r3, r6
 800832c:	1afb      	subs	r3, r7, r3
 800832e:	429a      	cmp	r2, r3
 8008330:	db32      	blt.n	8008398 <_printf_float+0x38c>
 8008332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008336:	4293      	cmp	r3, r2
 8008338:	db3c      	blt.n	80083b4 <_printf_float+0x3a8>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	07db      	lsls	r3, r3, #31
 800833e:	d439      	bmi.n	80083b4 <_printf_float+0x3a8>
 8008340:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008342:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008344:	1bf3      	subs	r3, r6, r7
 8008346:	1ab6      	subs	r6, r6, r2
 8008348:	429e      	cmp	r6, r3
 800834a:	dd00      	ble.n	800834e <_printf_float+0x342>
 800834c:	001e      	movs	r6, r3
 800834e:	2e00      	cmp	r6, #0
 8008350:	dc39      	bgt.n	80083c6 <_printf_float+0x3ba>
 8008352:	43f7      	mvns	r7, r6
 8008354:	2500      	movs	r5, #0
 8008356:	17fb      	asrs	r3, r7, #31
 8008358:	930c      	str	r3, [sp, #48]	; 0x30
 800835a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800835c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800835e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	0032      	movs	r2, r6
 8008364:	400a      	ands	r2, r1
 8008366:	1a9b      	subs	r3, r3, r2
 8008368:	429d      	cmp	r5, r3
 800836a:	db00      	blt.n	800836e <_printf_float+0x362>
 800836c:	e77d      	b.n	800826a <_printf_float+0x25e>
 800836e:	0022      	movs	r2, r4
 8008370:	2301      	movs	r3, #1
 8008372:	321a      	adds	r2, #26
 8008374:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008376:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008378:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800837a:	47b8      	blx	r7
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d100      	bne.n	8008382 <_printf_float+0x376>
 8008380:	e6a1      	b.n	80080c6 <_printf_float+0xba>
 8008382:	3501      	adds	r5, #1
 8008384:	e7e9      	b.n	800835a <_printf_float+0x34e>
 8008386:	0033      	movs	r3, r6
 8008388:	002a      	movs	r2, r5
 800838a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800838c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800838e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008390:	47b8      	blx	r7
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d1c1      	bne.n	800831a <_printf_float+0x30e>
 8008396:	e696      	b.n	80080c6 <_printf_float+0xba>
 8008398:	0022      	movs	r2, r4
 800839a:	2301      	movs	r3, #1
 800839c:	321a      	adds	r2, #26
 800839e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083a2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80083a4:	47b8      	blx	r7
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d100      	bne.n	80083ac <_printf_float+0x3a0>
 80083aa:	e68c      	b.n	80080c6 <_printf_float+0xba>
 80083ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ae:	3301      	adds	r3, #1
 80083b0:	930c      	str	r3, [sp, #48]	; 0x30
 80083b2:	e7b7      	b.n	8008324 <_printf_float+0x318>
 80083b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80083be:	47b0      	blx	r6
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d1bd      	bne.n	8008340 <_printf_float+0x334>
 80083c4:	e67f      	b.n	80080c6 <_printf_float+0xba>
 80083c6:	19ea      	adds	r2, r5, r7
 80083c8:	0033      	movs	r3, r6
 80083ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80083d0:	47a8      	blx	r5
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	d1bd      	bne.n	8008352 <_printf_float+0x346>
 80083d6:	e676      	b.n	80080c6 <_printf_float+0xba>
 80083d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083da:	2b01      	cmp	r3, #1
 80083dc:	dc02      	bgt.n	80083e4 <_printf_float+0x3d8>
 80083de:	2301      	movs	r3, #1
 80083e0:	421a      	tst	r2, r3
 80083e2:	d038      	beq.n	8008456 <_printf_float+0x44a>
 80083e4:	2301      	movs	r3, #1
 80083e6:	002a      	movs	r2, r5
 80083e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80083ee:	47b8      	blx	r7
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d100      	bne.n	80083f6 <_printf_float+0x3ea>
 80083f4:	e667      	b.n	80080c6 <_printf_float+0xba>
 80083f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008400:	47b8      	blx	r7
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	d100      	bne.n	8008408 <_printf_float+0x3fc>
 8008406:	e65e      	b.n	80080c6 <_printf_float+0xba>
 8008408:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800840a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800840c:	2200      	movs	r2, #0
 800840e:	2300      	movs	r3, #0
 8008410:	f7f8 f812 	bl	8000438 <__aeabi_dcmpeq>
 8008414:	2800      	cmp	r0, #0
 8008416:	d008      	beq.n	800842a <_printf_float+0x41e>
 8008418:	2500      	movs	r5, #0
 800841a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800841c:	3b01      	subs	r3, #1
 800841e:	429d      	cmp	r5, r3
 8008420:	db0d      	blt.n	800843e <_printf_float+0x432>
 8008422:	0022      	movs	r2, r4
 8008424:	0033      	movs	r3, r6
 8008426:	3250      	adds	r2, #80	; 0x50
 8008428:	e6ef      	b.n	800820a <_printf_float+0x1fe>
 800842a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800842c:	1c6a      	adds	r2, r5, #1
 800842e:	3b01      	subs	r3, #1
 8008430:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008434:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008436:	47a8      	blx	r5
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d1f2      	bne.n	8008422 <_printf_float+0x416>
 800843c:	e643      	b.n	80080c6 <_printf_float+0xba>
 800843e:	0022      	movs	r2, r4
 8008440:	2301      	movs	r3, #1
 8008442:	321a      	adds	r2, #26
 8008444:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008448:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800844a:	47b8      	blx	r7
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d100      	bne.n	8008452 <_printf_float+0x446>
 8008450:	e639      	b.n	80080c6 <_printf_float+0xba>
 8008452:	3501      	adds	r5, #1
 8008454:	e7e1      	b.n	800841a <_printf_float+0x40e>
 8008456:	002a      	movs	r2, r5
 8008458:	e7ea      	b.n	8008430 <_printf_float+0x424>
 800845a:	0022      	movs	r2, r4
 800845c:	2301      	movs	r3, #1
 800845e:	3219      	adds	r2, #25
 8008460:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008462:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008464:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008466:	47b0      	blx	r6
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d100      	bne.n	800846e <_printf_float+0x462>
 800846c:	e62b      	b.n	80080c6 <_printf_float+0xba>
 800846e:	3501      	adds	r5, #1
 8008470:	68e3      	ldr	r3, [r4, #12]
 8008472:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	429d      	cmp	r5, r3
 8008478:	dbef      	blt.n	800845a <_printf_float+0x44e>
 800847a:	e6fb      	b.n	8008274 <_printf_float+0x268>
 800847c:	0032      	movs	r2, r6
 800847e:	002b      	movs	r3, r5
 8008480:	0030      	movs	r0, r6
 8008482:	0029      	movs	r1, r5
 8008484:	f7f9 fdde 	bl	8002044 <__aeabi_dcmpun>
 8008488:	2800      	cmp	r0, #0
 800848a:	d100      	bne.n	800848e <_printf_float+0x482>
 800848c:	e621      	b.n	80080d2 <_printf_float+0xc6>
 800848e:	4d03      	ldr	r5, [pc, #12]	; (800849c <_printf_float+0x490>)
 8008490:	2f47      	cmp	r7, #71	; 0x47
 8008492:	d900      	bls.n	8008496 <_printf_float+0x48a>
 8008494:	e605      	b.n	80080a2 <_printf_float+0x96>
 8008496:	4d02      	ldr	r5, [pc, #8]	; (80084a0 <_printf_float+0x494>)
 8008498:	e603      	b.n	80080a2 <_printf_float+0x96>
 800849a:	46c0      	nop			; (mov r8, r8)
 800849c:	0800a750 	.word	0x0800a750
 80084a0:	0800a74c 	.word	0x0800a74c

080084a4 <_printf_common>:
 80084a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084a6:	0015      	movs	r5, r2
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	688a      	ldr	r2, [r1, #8]
 80084ac:	690b      	ldr	r3, [r1, #16]
 80084ae:	9000      	str	r0, [sp, #0]
 80084b0:	000c      	movs	r4, r1
 80084b2:	4293      	cmp	r3, r2
 80084b4:	da00      	bge.n	80084b8 <_printf_common+0x14>
 80084b6:	0013      	movs	r3, r2
 80084b8:	0022      	movs	r2, r4
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	3243      	adds	r2, #67	; 0x43
 80084be:	7812      	ldrb	r2, [r2, #0]
 80084c0:	2a00      	cmp	r2, #0
 80084c2:	d001      	beq.n	80084c8 <_printf_common+0x24>
 80084c4:	3301      	adds	r3, #1
 80084c6:	602b      	str	r3, [r5, #0]
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	069b      	lsls	r3, r3, #26
 80084cc:	d502      	bpl.n	80084d4 <_printf_common+0x30>
 80084ce:	682b      	ldr	r3, [r5, #0]
 80084d0:	3302      	adds	r3, #2
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	2706      	movs	r7, #6
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	401f      	ands	r7, r3
 80084da:	d027      	beq.n	800852c <_printf_common+0x88>
 80084dc:	0023      	movs	r3, r4
 80084de:	3343      	adds	r3, #67	; 0x43
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	1e5a      	subs	r2, r3, #1
 80084e4:	4193      	sbcs	r3, r2
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	0692      	lsls	r2, r2, #26
 80084ea:	d430      	bmi.n	800854e <_printf_common+0xaa>
 80084ec:	0022      	movs	r2, r4
 80084ee:	9901      	ldr	r1, [sp, #4]
 80084f0:	3243      	adds	r2, #67	; 0x43
 80084f2:	9800      	ldr	r0, [sp, #0]
 80084f4:	9e08      	ldr	r6, [sp, #32]
 80084f6:	47b0      	blx	r6
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d025      	beq.n	8008548 <_printf_common+0xa4>
 80084fc:	2306      	movs	r3, #6
 80084fe:	6820      	ldr	r0, [r4, #0]
 8008500:	682a      	ldr	r2, [r5, #0]
 8008502:	68e1      	ldr	r1, [r4, #12]
 8008504:	4003      	ands	r3, r0
 8008506:	2500      	movs	r5, #0
 8008508:	2b04      	cmp	r3, #4
 800850a:	d103      	bne.n	8008514 <_printf_common+0x70>
 800850c:	1a8d      	subs	r5, r1, r2
 800850e:	43eb      	mvns	r3, r5
 8008510:	17db      	asrs	r3, r3, #31
 8008512:	401d      	ands	r5, r3
 8008514:	68a3      	ldr	r3, [r4, #8]
 8008516:	6922      	ldr	r2, [r4, #16]
 8008518:	4293      	cmp	r3, r2
 800851a:	dd01      	ble.n	8008520 <_printf_common+0x7c>
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	18ed      	adds	r5, r5, r3
 8008520:	2700      	movs	r7, #0
 8008522:	42bd      	cmp	r5, r7
 8008524:	d120      	bne.n	8008568 <_printf_common+0xc4>
 8008526:	2000      	movs	r0, #0
 8008528:	e010      	b.n	800854c <_printf_common+0xa8>
 800852a:	3701      	adds	r7, #1
 800852c:	68e3      	ldr	r3, [r4, #12]
 800852e:	682a      	ldr	r2, [r5, #0]
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	429f      	cmp	r7, r3
 8008534:	dad2      	bge.n	80084dc <_printf_common+0x38>
 8008536:	0022      	movs	r2, r4
 8008538:	2301      	movs	r3, #1
 800853a:	3219      	adds	r2, #25
 800853c:	9901      	ldr	r1, [sp, #4]
 800853e:	9800      	ldr	r0, [sp, #0]
 8008540:	9e08      	ldr	r6, [sp, #32]
 8008542:	47b0      	blx	r6
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d1f0      	bne.n	800852a <_printf_common+0x86>
 8008548:	2001      	movs	r0, #1
 800854a:	4240      	negs	r0, r0
 800854c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800854e:	2030      	movs	r0, #48	; 0x30
 8008550:	18e1      	adds	r1, r4, r3
 8008552:	3143      	adds	r1, #67	; 0x43
 8008554:	7008      	strb	r0, [r1, #0]
 8008556:	0021      	movs	r1, r4
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	3145      	adds	r1, #69	; 0x45
 800855c:	7809      	ldrb	r1, [r1, #0]
 800855e:	18a2      	adds	r2, r4, r2
 8008560:	3243      	adds	r2, #67	; 0x43
 8008562:	3302      	adds	r3, #2
 8008564:	7011      	strb	r1, [r2, #0]
 8008566:	e7c1      	b.n	80084ec <_printf_common+0x48>
 8008568:	0022      	movs	r2, r4
 800856a:	2301      	movs	r3, #1
 800856c:	321a      	adds	r2, #26
 800856e:	9901      	ldr	r1, [sp, #4]
 8008570:	9800      	ldr	r0, [sp, #0]
 8008572:	9e08      	ldr	r6, [sp, #32]
 8008574:	47b0      	blx	r6
 8008576:	1c43      	adds	r3, r0, #1
 8008578:	d0e6      	beq.n	8008548 <_printf_common+0xa4>
 800857a:	3701      	adds	r7, #1
 800857c:	e7d1      	b.n	8008522 <_printf_common+0x7e>
	...

08008580 <_printf_i>:
 8008580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008582:	b08b      	sub	sp, #44	; 0x2c
 8008584:	9206      	str	r2, [sp, #24]
 8008586:	000a      	movs	r2, r1
 8008588:	3243      	adds	r2, #67	; 0x43
 800858a:	9307      	str	r3, [sp, #28]
 800858c:	9005      	str	r0, [sp, #20]
 800858e:	9204      	str	r2, [sp, #16]
 8008590:	7e0a      	ldrb	r2, [r1, #24]
 8008592:	000c      	movs	r4, r1
 8008594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008596:	2a6e      	cmp	r2, #110	; 0x6e
 8008598:	d100      	bne.n	800859c <_printf_i+0x1c>
 800859a:	e08f      	b.n	80086bc <_printf_i+0x13c>
 800859c:	d817      	bhi.n	80085ce <_printf_i+0x4e>
 800859e:	2a63      	cmp	r2, #99	; 0x63
 80085a0:	d02c      	beq.n	80085fc <_printf_i+0x7c>
 80085a2:	d808      	bhi.n	80085b6 <_printf_i+0x36>
 80085a4:	2a00      	cmp	r2, #0
 80085a6:	d100      	bne.n	80085aa <_printf_i+0x2a>
 80085a8:	e099      	b.n	80086de <_printf_i+0x15e>
 80085aa:	2a58      	cmp	r2, #88	; 0x58
 80085ac:	d054      	beq.n	8008658 <_printf_i+0xd8>
 80085ae:	0026      	movs	r6, r4
 80085b0:	3642      	adds	r6, #66	; 0x42
 80085b2:	7032      	strb	r2, [r6, #0]
 80085b4:	e029      	b.n	800860a <_printf_i+0x8a>
 80085b6:	2a64      	cmp	r2, #100	; 0x64
 80085b8:	d001      	beq.n	80085be <_printf_i+0x3e>
 80085ba:	2a69      	cmp	r2, #105	; 0x69
 80085bc:	d1f7      	bne.n	80085ae <_printf_i+0x2e>
 80085be:	6821      	ldr	r1, [r4, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	0608      	lsls	r0, r1, #24
 80085c4:	d523      	bpl.n	800860e <_printf_i+0x8e>
 80085c6:	1d11      	adds	r1, r2, #4
 80085c8:	6019      	str	r1, [r3, #0]
 80085ca:	6815      	ldr	r5, [r2, #0]
 80085cc:	e025      	b.n	800861a <_printf_i+0x9a>
 80085ce:	2a73      	cmp	r2, #115	; 0x73
 80085d0:	d100      	bne.n	80085d4 <_printf_i+0x54>
 80085d2:	e088      	b.n	80086e6 <_printf_i+0x166>
 80085d4:	d808      	bhi.n	80085e8 <_printf_i+0x68>
 80085d6:	2a6f      	cmp	r2, #111	; 0x6f
 80085d8:	d029      	beq.n	800862e <_printf_i+0xae>
 80085da:	2a70      	cmp	r2, #112	; 0x70
 80085dc:	d1e7      	bne.n	80085ae <_printf_i+0x2e>
 80085de:	2220      	movs	r2, #32
 80085e0:	6809      	ldr	r1, [r1, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	6022      	str	r2, [r4, #0]
 80085e6:	e003      	b.n	80085f0 <_printf_i+0x70>
 80085e8:	2a75      	cmp	r2, #117	; 0x75
 80085ea:	d020      	beq.n	800862e <_printf_i+0xae>
 80085ec:	2a78      	cmp	r2, #120	; 0x78
 80085ee:	d1de      	bne.n	80085ae <_printf_i+0x2e>
 80085f0:	0022      	movs	r2, r4
 80085f2:	2178      	movs	r1, #120	; 0x78
 80085f4:	3245      	adds	r2, #69	; 0x45
 80085f6:	7011      	strb	r1, [r2, #0]
 80085f8:	4a6c      	ldr	r2, [pc, #432]	; (80087ac <_printf_i+0x22c>)
 80085fa:	e030      	b.n	800865e <_printf_i+0xde>
 80085fc:	000e      	movs	r6, r1
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	3642      	adds	r6, #66	; 0x42
 8008602:	1d11      	adds	r1, r2, #4
 8008604:	6019      	str	r1, [r3, #0]
 8008606:	6813      	ldr	r3, [r2, #0]
 8008608:	7033      	strb	r3, [r6, #0]
 800860a:	2301      	movs	r3, #1
 800860c:	e079      	b.n	8008702 <_printf_i+0x182>
 800860e:	0649      	lsls	r1, r1, #25
 8008610:	d5d9      	bpl.n	80085c6 <_printf_i+0x46>
 8008612:	1d11      	adds	r1, r2, #4
 8008614:	6019      	str	r1, [r3, #0]
 8008616:	2300      	movs	r3, #0
 8008618:	5ed5      	ldrsh	r5, [r2, r3]
 800861a:	2d00      	cmp	r5, #0
 800861c:	da03      	bge.n	8008626 <_printf_i+0xa6>
 800861e:	232d      	movs	r3, #45	; 0x2d
 8008620:	9a04      	ldr	r2, [sp, #16]
 8008622:	426d      	negs	r5, r5
 8008624:	7013      	strb	r3, [r2, #0]
 8008626:	4b62      	ldr	r3, [pc, #392]	; (80087b0 <_printf_i+0x230>)
 8008628:	270a      	movs	r7, #10
 800862a:	9303      	str	r3, [sp, #12]
 800862c:	e02f      	b.n	800868e <_printf_i+0x10e>
 800862e:	6820      	ldr	r0, [r4, #0]
 8008630:	6819      	ldr	r1, [r3, #0]
 8008632:	0605      	lsls	r5, r0, #24
 8008634:	d503      	bpl.n	800863e <_printf_i+0xbe>
 8008636:	1d08      	adds	r0, r1, #4
 8008638:	6018      	str	r0, [r3, #0]
 800863a:	680d      	ldr	r5, [r1, #0]
 800863c:	e005      	b.n	800864a <_printf_i+0xca>
 800863e:	0640      	lsls	r0, r0, #25
 8008640:	d5f9      	bpl.n	8008636 <_printf_i+0xb6>
 8008642:	680d      	ldr	r5, [r1, #0]
 8008644:	1d08      	adds	r0, r1, #4
 8008646:	6018      	str	r0, [r3, #0]
 8008648:	b2ad      	uxth	r5, r5
 800864a:	4b59      	ldr	r3, [pc, #356]	; (80087b0 <_printf_i+0x230>)
 800864c:	2708      	movs	r7, #8
 800864e:	9303      	str	r3, [sp, #12]
 8008650:	2a6f      	cmp	r2, #111	; 0x6f
 8008652:	d018      	beq.n	8008686 <_printf_i+0x106>
 8008654:	270a      	movs	r7, #10
 8008656:	e016      	b.n	8008686 <_printf_i+0x106>
 8008658:	3145      	adds	r1, #69	; 0x45
 800865a:	700a      	strb	r2, [r1, #0]
 800865c:	4a54      	ldr	r2, [pc, #336]	; (80087b0 <_printf_i+0x230>)
 800865e:	9203      	str	r2, [sp, #12]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	6821      	ldr	r1, [r4, #0]
 8008664:	1d10      	adds	r0, r2, #4
 8008666:	6018      	str	r0, [r3, #0]
 8008668:	6815      	ldr	r5, [r2, #0]
 800866a:	0608      	lsls	r0, r1, #24
 800866c:	d522      	bpl.n	80086b4 <_printf_i+0x134>
 800866e:	07cb      	lsls	r3, r1, #31
 8008670:	d502      	bpl.n	8008678 <_printf_i+0xf8>
 8008672:	2320      	movs	r3, #32
 8008674:	4319      	orrs	r1, r3
 8008676:	6021      	str	r1, [r4, #0]
 8008678:	2710      	movs	r7, #16
 800867a:	2d00      	cmp	r5, #0
 800867c:	d103      	bne.n	8008686 <_printf_i+0x106>
 800867e:	2320      	movs	r3, #32
 8008680:	6822      	ldr	r2, [r4, #0]
 8008682:	439a      	bics	r2, r3
 8008684:	6022      	str	r2, [r4, #0]
 8008686:	0023      	movs	r3, r4
 8008688:	2200      	movs	r2, #0
 800868a:	3343      	adds	r3, #67	; 0x43
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	6863      	ldr	r3, [r4, #4]
 8008690:	60a3      	str	r3, [r4, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	db5c      	blt.n	8008750 <_printf_i+0x1d0>
 8008696:	2204      	movs	r2, #4
 8008698:	6821      	ldr	r1, [r4, #0]
 800869a:	4391      	bics	r1, r2
 800869c:	6021      	str	r1, [r4, #0]
 800869e:	2d00      	cmp	r5, #0
 80086a0:	d158      	bne.n	8008754 <_printf_i+0x1d4>
 80086a2:	9e04      	ldr	r6, [sp, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d064      	beq.n	8008772 <_printf_i+0x1f2>
 80086a8:	0026      	movs	r6, r4
 80086aa:	9b03      	ldr	r3, [sp, #12]
 80086ac:	3642      	adds	r6, #66	; 0x42
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	7033      	strb	r3, [r6, #0]
 80086b2:	e05e      	b.n	8008772 <_printf_i+0x1f2>
 80086b4:	0648      	lsls	r0, r1, #25
 80086b6:	d5da      	bpl.n	800866e <_printf_i+0xee>
 80086b8:	b2ad      	uxth	r5, r5
 80086ba:	e7d8      	b.n	800866e <_printf_i+0xee>
 80086bc:	6809      	ldr	r1, [r1, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	0608      	lsls	r0, r1, #24
 80086c2:	d505      	bpl.n	80086d0 <_printf_i+0x150>
 80086c4:	1d11      	adds	r1, r2, #4
 80086c6:	6019      	str	r1, [r3, #0]
 80086c8:	6813      	ldr	r3, [r2, #0]
 80086ca:	6962      	ldr	r2, [r4, #20]
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	e006      	b.n	80086de <_printf_i+0x15e>
 80086d0:	0649      	lsls	r1, r1, #25
 80086d2:	d5f7      	bpl.n	80086c4 <_printf_i+0x144>
 80086d4:	1d11      	adds	r1, r2, #4
 80086d6:	6019      	str	r1, [r3, #0]
 80086d8:	6813      	ldr	r3, [r2, #0]
 80086da:	8aa2      	ldrh	r2, [r4, #20]
 80086dc:	801a      	strh	r2, [r3, #0]
 80086de:	2300      	movs	r3, #0
 80086e0:	9e04      	ldr	r6, [sp, #16]
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	e054      	b.n	8008790 <_printf_i+0x210>
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	1d11      	adds	r1, r2, #4
 80086ea:	6019      	str	r1, [r3, #0]
 80086ec:	6816      	ldr	r6, [r2, #0]
 80086ee:	2100      	movs	r1, #0
 80086f0:	6862      	ldr	r2, [r4, #4]
 80086f2:	0030      	movs	r0, r6
 80086f4:	f000 ff04 	bl	8009500 <memchr>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d001      	beq.n	8008700 <_printf_i+0x180>
 80086fc:	1b80      	subs	r0, r0, r6
 80086fe:	6060      	str	r0, [r4, #4]
 8008700:	6863      	ldr	r3, [r4, #4]
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	2300      	movs	r3, #0
 8008706:	9a04      	ldr	r2, [sp, #16]
 8008708:	7013      	strb	r3, [r2, #0]
 800870a:	e041      	b.n	8008790 <_printf_i+0x210>
 800870c:	6923      	ldr	r3, [r4, #16]
 800870e:	0032      	movs	r2, r6
 8008710:	9906      	ldr	r1, [sp, #24]
 8008712:	9805      	ldr	r0, [sp, #20]
 8008714:	9d07      	ldr	r5, [sp, #28]
 8008716:	47a8      	blx	r5
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d043      	beq.n	80087a4 <_printf_i+0x224>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	2500      	movs	r5, #0
 8008720:	079b      	lsls	r3, r3, #30
 8008722:	d40f      	bmi.n	8008744 <_printf_i+0x1c4>
 8008724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008726:	68e0      	ldr	r0, [r4, #12]
 8008728:	4298      	cmp	r0, r3
 800872a:	da3d      	bge.n	80087a8 <_printf_i+0x228>
 800872c:	0018      	movs	r0, r3
 800872e:	e03b      	b.n	80087a8 <_printf_i+0x228>
 8008730:	0022      	movs	r2, r4
 8008732:	2301      	movs	r3, #1
 8008734:	3219      	adds	r2, #25
 8008736:	9906      	ldr	r1, [sp, #24]
 8008738:	9805      	ldr	r0, [sp, #20]
 800873a:	9e07      	ldr	r6, [sp, #28]
 800873c:	47b0      	blx	r6
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	d030      	beq.n	80087a4 <_printf_i+0x224>
 8008742:	3501      	adds	r5, #1
 8008744:	68e3      	ldr	r3, [r4, #12]
 8008746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	429d      	cmp	r5, r3
 800874c:	dbf0      	blt.n	8008730 <_printf_i+0x1b0>
 800874e:	e7e9      	b.n	8008724 <_printf_i+0x1a4>
 8008750:	2d00      	cmp	r5, #0
 8008752:	d0a9      	beq.n	80086a8 <_printf_i+0x128>
 8008754:	9e04      	ldr	r6, [sp, #16]
 8008756:	0028      	movs	r0, r5
 8008758:	0039      	movs	r1, r7
 800875a:	f7f7 fd6d 	bl	8000238 <__aeabi_uidivmod>
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	3e01      	subs	r6, #1
 8008762:	5c5b      	ldrb	r3, [r3, r1]
 8008764:	0028      	movs	r0, r5
 8008766:	7033      	strb	r3, [r6, #0]
 8008768:	0039      	movs	r1, r7
 800876a:	f7f7 fcdf 	bl	800012c <__udivsi3>
 800876e:	1e05      	subs	r5, r0, #0
 8008770:	d1f1      	bne.n	8008756 <_printf_i+0x1d6>
 8008772:	2f08      	cmp	r7, #8
 8008774:	d109      	bne.n	800878a <_printf_i+0x20a>
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	07db      	lsls	r3, r3, #31
 800877a:	d506      	bpl.n	800878a <_printf_i+0x20a>
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	6922      	ldr	r2, [r4, #16]
 8008780:	4293      	cmp	r3, r2
 8008782:	dc02      	bgt.n	800878a <_printf_i+0x20a>
 8008784:	2330      	movs	r3, #48	; 0x30
 8008786:	3e01      	subs	r6, #1
 8008788:	7033      	strb	r3, [r6, #0]
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	1b9b      	subs	r3, r3, r6
 800878e:	6123      	str	r3, [r4, #16]
 8008790:	9b07      	ldr	r3, [sp, #28]
 8008792:	aa09      	add	r2, sp, #36	; 0x24
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	0021      	movs	r1, r4
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	9805      	ldr	r0, [sp, #20]
 800879c:	f7ff fe82 	bl	80084a4 <_printf_common>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d1b3      	bne.n	800870c <_printf_i+0x18c>
 80087a4:	2001      	movs	r0, #1
 80087a6:	4240      	negs	r0, r0
 80087a8:	b00b      	add	sp, #44	; 0x2c
 80087aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ac:	0800a767 	.word	0x0800a767
 80087b0:	0800a756 	.word	0x0800a756

080087b4 <_vsiprintf_r>:
 80087b4:	b530      	push	{r4, r5, lr}
 80087b6:	b09b      	sub	sp, #108	; 0x6c
 80087b8:	9100      	str	r1, [sp, #0]
 80087ba:	9104      	str	r1, [sp, #16]
 80087bc:	4908      	ldr	r1, [pc, #32]	; (80087e0 <_vsiprintf_r+0x2c>)
 80087be:	466d      	mov	r5, sp
 80087c0:	9102      	str	r1, [sp, #8]
 80087c2:	9105      	str	r1, [sp, #20]
 80087c4:	2101      	movs	r1, #1
 80087c6:	2482      	movs	r4, #130	; 0x82
 80087c8:	4249      	negs	r1, r1
 80087ca:	81e9      	strh	r1, [r5, #14]
 80087cc:	00a4      	lsls	r4, r4, #2
 80087ce:	4669      	mov	r1, sp
 80087d0:	81ac      	strh	r4, [r5, #12]
 80087d2:	f001 fa9b 	bl	8009d0c <_svfiprintf_r>
 80087d6:	2300      	movs	r3, #0
 80087d8:	9a00      	ldr	r2, [sp, #0]
 80087da:	7013      	strb	r3, [r2, #0]
 80087dc:	b01b      	add	sp, #108	; 0x6c
 80087de:	bd30      	pop	{r4, r5, pc}
 80087e0:	7fffffff 	.word	0x7fffffff

080087e4 <vsiprintf>:
 80087e4:	b510      	push	{r4, lr}
 80087e6:	0013      	movs	r3, r2
 80087e8:	000a      	movs	r2, r1
 80087ea:	0001      	movs	r1, r0
 80087ec:	4802      	ldr	r0, [pc, #8]	; (80087f8 <vsiprintf+0x14>)
 80087ee:	6800      	ldr	r0, [r0, #0]
 80087f0:	f7ff ffe0 	bl	80087b4 <_vsiprintf_r>
 80087f4:	bd10      	pop	{r4, pc}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	20000054 	.word	0x20000054

080087fc <quorem>:
 80087fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fe:	6903      	ldr	r3, [r0, #16]
 8008800:	690c      	ldr	r4, [r1, #16]
 8008802:	b089      	sub	sp, #36	; 0x24
 8008804:	0007      	movs	r7, r0
 8008806:	9105      	str	r1, [sp, #20]
 8008808:	2600      	movs	r6, #0
 800880a:	429c      	cmp	r4, r3
 800880c:	dc6d      	bgt.n	80088ea <quorem+0xee>
 800880e:	000b      	movs	r3, r1
 8008810:	3c01      	subs	r4, #1
 8008812:	3314      	adds	r3, #20
 8008814:	00a5      	lsls	r5, r4, #2
 8008816:	9303      	str	r3, [sp, #12]
 8008818:	195b      	adds	r3, r3, r5
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	0003      	movs	r3, r0
 800881e:	3314      	adds	r3, #20
 8008820:	9302      	str	r3, [sp, #8]
 8008822:	195d      	adds	r5, r3, r5
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	6828      	ldr	r0, [r5, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	1c59      	adds	r1, r3, #1
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	f7f7 fc7d 	bl	800012c <__udivsi3>
 8008832:	9001      	str	r0, [sp, #4]
 8008834:	42b0      	cmp	r0, r6
 8008836:	d02d      	beq.n	8008894 <quorem+0x98>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	9802      	ldr	r0, [sp, #8]
 800883c:	469c      	mov	ip, r3
 800883e:	9606      	str	r6, [sp, #24]
 8008840:	4662      	mov	r2, ip
 8008842:	ca08      	ldmia	r2!, {r3}
 8008844:	4694      	mov	ip, r2
 8008846:	9a01      	ldr	r2, [sp, #4]
 8008848:	b299      	uxth	r1, r3
 800884a:	4351      	muls	r1, r2
 800884c:	0c1b      	lsrs	r3, r3, #16
 800884e:	4353      	muls	r3, r2
 8008850:	1989      	adds	r1, r1, r6
 8008852:	0c0a      	lsrs	r2, r1, #16
 8008854:	189b      	adds	r3, r3, r2
 8008856:	9307      	str	r3, [sp, #28]
 8008858:	8802      	ldrh	r2, [r0, #0]
 800885a:	0c1e      	lsrs	r6, r3, #16
 800885c:	9b06      	ldr	r3, [sp, #24]
 800885e:	b289      	uxth	r1, r1
 8008860:	18d2      	adds	r2, r2, r3
 8008862:	6803      	ldr	r3, [r0, #0]
 8008864:	1a52      	subs	r2, r2, r1
 8008866:	0c19      	lsrs	r1, r3, #16
 8008868:	466b      	mov	r3, sp
 800886a:	8b9b      	ldrh	r3, [r3, #28]
 800886c:	1acb      	subs	r3, r1, r3
 800886e:	1411      	asrs	r1, r2, #16
 8008870:	185b      	adds	r3, r3, r1
 8008872:	1419      	asrs	r1, r3, #16
 8008874:	b292      	uxth	r2, r2
 8008876:	041b      	lsls	r3, r3, #16
 8008878:	431a      	orrs	r2, r3
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	9106      	str	r1, [sp, #24]
 800887e:	c004      	stmia	r0!, {r2}
 8008880:	4563      	cmp	r3, ip
 8008882:	d2dd      	bcs.n	8008840 <quorem+0x44>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d104      	bne.n	8008894 <quorem+0x98>
 800888a:	9b02      	ldr	r3, [sp, #8]
 800888c:	3d04      	subs	r5, #4
 800888e:	42ab      	cmp	r3, r5
 8008890:	d32e      	bcc.n	80088f0 <quorem+0xf4>
 8008892:	613c      	str	r4, [r7, #16]
 8008894:	9905      	ldr	r1, [sp, #20]
 8008896:	0038      	movs	r0, r7
 8008898:	f001 f84f 	bl	800993a <__mcmp>
 800889c:	2800      	cmp	r0, #0
 800889e:	db23      	blt.n	80088e8 <quorem+0xec>
 80088a0:	2500      	movs	r5, #0
 80088a2:	9b01      	ldr	r3, [sp, #4]
 80088a4:	9802      	ldr	r0, [sp, #8]
 80088a6:	3301      	adds	r3, #1
 80088a8:	9903      	ldr	r1, [sp, #12]
 80088aa:	9301      	str	r3, [sp, #4]
 80088ac:	c908      	ldmia	r1!, {r3}
 80088ae:	8802      	ldrh	r2, [r0, #0]
 80088b0:	1955      	adds	r5, r2, r5
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	1aaa      	subs	r2, r5, r2
 80088b6:	6805      	ldr	r5, [r0, #0]
 80088b8:	0c1b      	lsrs	r3, r3, #16
 80088ba:	0c2d      	lsrs	r5, r5, #16
 80088bc:	1aeb      	subs	r3, r5, r3
 80088be:	1415      	asrs	r5, r2, #16
 80088c0:	195b      	adds	r3, r3, r5
 80088c2:	141d      	asrs	r5, r3, #16
 80088c4:	b292      	uxth	r2, r2
 80088c6:	041b      	lsls	r3, r3, #16
 80088c8:	4313      	orrs	r3, r2
 80088ca:	c008      	stmia	r0!, {r3}
 80088cc:	9b04      	ldr	r3, [sp, #16]
 80088ce:	428b      	cmp	r3, r1
 80088d0:	d2ec      	bcs.n	80088ac <quorem+0xb0>
 80088d2:	9a02      	ldr	r2, [sp, #8]
 80088d4:	00a3      	lsls	r3, r4, #2
 80088d6:	18d3      	adds	r3, r2, r3
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	2a00      	cmp	r2, #0
 80088dc:	d104      	bne.n	80088e8 <quorem+0xec>
 80088de:	9a02      	ldr	r2, [sp, #8]
 80088e0:	3b04      	subs	r3, #4
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d309      	bcc.n	80088fa <quorem+0xfe>
 80088e6:	613c      	str	r4, [r7, #16]
 80088e8:	9e01      	ldr	r6, [sp, #4]
 80088ea:	0030      	movs	r0, r6
 80088ec:	b009      	add	sp, #36	; 0x24
 80088ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1cd      	bne.n	8008892 <quorem+0x96>
 80088f6:	3c01      	subs	r4, #1
 80088f8:	e7c7      	b.n	800888a <quorem+0x8e>
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	d1f2      	bne.n	80088e6 <quorem+0xea>
 8008900:	3c01      	subs	r4, #1
 8008902:	e7ec      	b.n	80088de <quorem+0xe2>

08008904 <_dtoa_r>:
 8008904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008906:	0016      	movs	r6, r2
 8008908:	001f      	movs	r7, r3
 800890a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800890c:	b09d      	sub	sp, #116	; 0x74
 800890e:	9004      	str	r0, [sp, #16]
 8008910:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008912:	9606      	str	r6, [sp, #24]
 8008914:	9707      	str	r7, [sp, #28]
 8008916:	2c00      	cmp	r4, #0
 8008918:	d108      	bne.n	800892c <_dtoa_r+0x28>
 800891a:	2010      	movs	r0, #16
 800891c:	f000 fde6 	bl	80094ec <malloc>
 8008920:	9b04      	ldr	r3, [sp, #16]
 8008922:	6258      	str	r0, [r3, #36]	; 0x24
 8008924:	6044      	str	r4, [r0, #4]
 8008926:	6084      	str	r4, [r0, #8]
 8008928:	6004      	str	r4, [r0, #0]
 800892a:	60c4      	str	r4, [r0, #12]
 800892c:	9b04      	ldr	r3, [sp, #16]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	6819      	ldr	r1, [r3, #0]
 8008932:	2900      	cmp	r1, #0
 8008934:	d00b      	beq.n	800894e <_dtoa_r+0x4a>
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	2301      	movs	r3, #1
 800893a:	4093      	lsls	r3, r2
 800893c:	604a      	str	r2, [r1, #4]
 800893e:	608b      	str	r3, [r1, #8]
 8008940:	9804      	ldr	r0, [sp, #16]
 8008942:	f000 fe20 	bl	8009586 <_Bfree>
 8008946:	2200      	movs	r2, #0
 8008948:	9b04      	ldr	r3, [sp, #16]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	9b07      	ldr	r3, [sp, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	da1f      	bge.n	8008994 <_dtoa_r+0x90>
 8008954:	2301      	movs	r3, #1
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	007b      	lsls	r3, r7, #1
 800895a:	085b      	lsrs	r3, r3, #1
 800895c:	9307      	str	r3, [sp, #28]
 800895e:	9c07      	ldr	r4, [sp, #28]
 8008960:	4bb7      	ldr	r3, [pc, #732]	; (8008c40 <_dtoa_r+0x33c>)
 8008962:	0022      	movs	r2, r4
 8008964:	9319      	str	r3, [sp, #100]	; 0x64
 8008966:	401a      	ands	r2, r3
 8008968:	429a      	cmp	r2, r3
 800896a:	d116      	bne.n	800899a <_dtoa_r+0x96>
 800896c:	4bb5      	ldr	r3, [pc, #724]	; (8008c44 <_dtoa_r+0x340>)
 800896e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d103      	bne.n	8008980 <_dtoa_r+0x7c>
 8008978:	0324      	lsls	r4, r4, #12
 800897a:	d101      	bne.n	8008980 <_dtoa_r+0x7c>
 800897c:	f000 fd91 	bl	80094a2 <_dtoa_r+0xb9e>
 8008980:	4bb1      	ldr	r3, [pc, #708]	; (8008c48 <_dtoa_r+0x344>)
 8008982:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008984:	930a      	str	r3, [sp, #40]	; 0x28
 8008986:	4bb1      	ldr	r3, [pc, #708]	; (8008c4c <_dtoa_r+0x348>)
 8008988:	2a00      	cmp	r2, #0
 800898a:	d001      	beq.n	8008990 <_dtoa_r+0x8c>
 800898c:	f000 fd8f 	bl	80094ae <_dtoa_r+0xbaa>
 8008990:	f000 fd8f 	bl	80094b2 <_dtoa_r+0xbae>
 8008994:	2300      	movs	r3, #0
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	e7e1      	b.n	800895e <_dtoa_r+0x5a>
 800899a:	9e06      	ldr	r6, [sp, #24]
 800899c:	9f07      	ldr	r7, [sp, #28]
 800899e:	2200      	movs	r2, #0
 80089a0:	2300      	movs	r3, #0
 80089a2:	0030      	movs	r0, r6
 80089a4:	0039      	movs	r1, r7
 80089a6:	f7f7 fd47 	bl	8000438 <__aeabi_dcmpeq>
 80089aa:	1e05      	subs	r5, r0, #0
 80089ac:	d00e      	beq.n	80089cc <_dtoa_r+0xc8>
 80089ae:	2301      	movs	r3, #1
 80089b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	4ba6      	ldr	r3, [pc, #664]	; (8008c50 <_dtoa_r+0x34c>)
 80089b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80089b8:	930a      	str	r3, [sp, #40]	; 0x28
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	d101      	bne.n	80089c2 <_dtoa_r+0xbe>
 80089be:	f000 fd78 	bl	80094b2 <_dtoa_r+0xbae>
 80089c2:	4aa4      	ldr	r2, [pc, #656]	; (8008c54 <_dtoa_r+0x350>)
 80089c4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80089c6:	600a      	str	r2, [r1, #0]
 80089c8:	f000 fd73 	bl	80094b2 <_dtoa_r+0xbae>
 80089cc:	ab1a      	add	r3, sp, #104	; 0x68
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	ab1b      	add	r3, sp, #108	; 0x6c
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	0032      	movs	r2, r6
 80089d6:	003b      	movs	r3, r7
 80089d8:	9804      	ldr	r0, [sp, #16]
 80089da:	f001 f82b 	bl	8009a34 <__d2b>
 80089de:	0063      	lsls	r3, r4, #1
 80089e0:	9005      	str	r0, [sp, #20]
 80089e2:	0d5b      	lsrs	r3, r3, #21
 80089e4:	d100      	bne.n	80089e8 <_dtoa_r+0xe4>
 80089e6:	e07f      	b.n	8008ae8 <_dtoa_r+0x1e4>
 80089e8:	033a      	lsls	r2, r7, #12
 80089ea:	4c9b      	ldr	r4, [pc, #620]	; (8008c58 <_dtoa_r+0x354>)
 80089ec:	0b12      	lsrs	r2, r2, #12
 80089ee:	4314      	orrs	r4, r2
 80089f0:	0021      	movs	r1, r4
 80089f2:	4a9a      	ldr	r2, [pc, #616]	; (8008c5c <_dtoa_r+0x358>)
 80089f4:	0030      	movs	r0, r6
 80089f6:	9518      	str	r5, [sp, #96]	; 0x60
 80089f8:	189e      	adds	r6, r3, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	4b98      	ldr	r3, [pc, #608]	; (8008c60 <_dtoa_r+0x35c>)
 80089fe:	f7f9 f80b 	bl	8001a18 <__aeabi_dsub>
 8008a02:	4a98      	ldr	r2, [pc, #608]	; (8008c64 <_dtoa_r+0x360>)
 8008a04:	4b98      	ldr	r3, [pc, #608]	; (8008c68 <_dtoa_r+0x364>)
 8008a06:	f7f8 fd87 	bl	8001518 <__aeabi_dmul>
 8008a0a:	4a98      	ldr	r2, [pc, #608]	; (8008c6c <_dtoa_r+0x368>)
 8008a0c:	4b98      	ldr	r3, [pc, #608]	; (8008c70 <_dtoa_r+0x36c>)
 8008a0e:	f7f7 fe3f 	bl	8000690 <__aeabi_dadd>
 8008a12:	0004      	movs	r4, r0
 8008a14:	0030      	movs	r0, r6
 8008a16:	000d      	movs	r5, r1
 8008a18:	f7f9 fb68 	bl	80020ec <__aeabi_i2d>
 8008a1c:	4a95      	ldr	r2, [pc, #596]	; (8008c74 <_dtoa_r+0x370>)
 8008a1e:	4b96      	ldr	r3, [pc, #600]	; (8008c78 <_dtoa_r+0x374>)
 8008a20:	f7f8 fd7a 	bl	8001518 <__aeabi_dmul>
 8008a24:	0002      	movs	r2, r0
 8008a26:	000b      	movs	r3, r1
 8008a28:	0020      	movs	r0, r4
 8008a2a:	0029      	movs	r1, r5
 8008a2c:	f7f7 fe30 	bl	8000690 <__aeabi_dadd>
 8008a30:	0004      	movs	r4, r0
 8008a32:	000d      	movs	r5, r1
 8008a34:	f7f9 fb26 	bl	8002084 <__aeabi_d2iz>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	9003      	str	r0, [sp, #12]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	0020      	movs	r0, r4
 8008a40:	0029      	movs	r1, r5
 8008a42:	f7f7 fcff 	bl	8000444 <__aeabi_dcmplt>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d00e      	beq.n	8008a68 <_dtoa_r+0x164>
 8008a4a:	9803      	ldr	r0, [sp, #12]
 8008a4c:	f7f9 fb4e 	bl	80020ec <__aeabi_i2d>
 8008a50:	000b      	movs	r3, r1
 8008a52:	0002      	movs	r2, r0
 8008a54:	0029      	movs	r1, r5
 8008a56:	0020      	movs	r0, r4
 8008a58:	f7f7 fcee 	bl	8000438 <__aeabi_dcmpeq>
 8008a5c:	0003      	movs	r3, r0
 8008a5e:	4258      	negs	r0, r3
 8008a60:	4158      	adcs	r0, r3
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	1a1b      	subs	r3, r3, r0
 8008a66:	9303      	str	r3, [sp, #12]
 8008a68:	2301      	movs	r3, #1
 8008a6a:	9316      	str	r3, [sp, #88]	; 0x58
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	2b16      	cmp	r3, #22
 8008a70:	d80f      	bhi.n	8008a92 <_dtoa_r+0x18e>
 8008a72:	4982      	ldr	r1, [pc, #520]	; (8008c7c <_dtoa_r+0x378>)
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	18c9      	adds	r1, r1, r3
 8008a78:	6808      	ldr	r0, [r1, #0]
 8008a7a:	6849      	ldr	r1, [r1, #4]
 8008a7c:	9a06      	ldr	r2, [sp, #24]
 8008a7e:	9b07      	ldr	r3, [sp, #28]
 8008a80:	f7f7 fcf4 	bl	800046c <__aeabi_dcmpgt>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d04b      	beq.n	8008b20 <_dtoa_r+0x21c>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	9303      	str	r3, [sp, #12]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9316      	str	r3, [sp, #88]	; 0x58
 8008a92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a94:	1b9e      	subs	r6, r3, r6
 8008a96:	2300      	movs	r3, #0
 8008a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a9a:	0033      	movs	r3, r6
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8008aa0:	d504      	bpl.n	8008aac <_dtoa_r+0x1a8>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	1b9b      	subs	r3, r3, r6
 8008aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	930c      	str	r3, [sp, #48]	; 0x30
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	db38      	blt.n	8008b24 <_dtoa_r+0x220>
 8008ab2:	9a03      	ldr	r2, [sp, #12]
 8008ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ab6:	4694      	mov	ip, r2
 8008ab8:	4463      	add	r3, ip
 8008aba:	930c      	str	r3, [sp, #48]	; 0x30
 8008abc:	2300      	movs	r3, #0
 8008abe:	920f      	str	r2, [sp, #60]	; 0x3c
 8008ac0:	9308      	str	r3, [sp, #32]
 8008ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ac4:	2501      	movs	r5, #1
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	d900      	bls.n	8008acc <_dtoa_r+0x1c8>
 8008aca:	e091      	b.n	8008bf0 <_dtoa_r+0x2ec>
 8008acc:	2b05      	cmp	r3, #5
 8008ace:	dd02      	ble.n	8008ad6 <_dtoa_r+0x1d2>
 8008ad0:	2500      	movs	r5, #0
 8008ad2:	3b04      	subs	r3, #4
 8008ad4:	9322      	str	r3, [sp, #136]	; 0x88
 8008ad6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ad8:	1e98      	subs	r0, r3, #2
 8008ada:	2803      	cmp	r0, #3
 8008adc:	d900      	bls.n	8008ae0 <_dtoa_r+0x1dc>
 8008ade:	e091      	b.n	8008c04 <_dtoa_r+0x300>
 8008ae0:	f7f7 fb1a 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008ae4:	76298482 	.word	0x76298482
 8008ae8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008aea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008aec:	189e      	adds	r6, r3, r2
 8008aee:	4b64      	ldr	r3, [pc, #400]	; (8008c80 <_dtoa_r+0x37c>)
 8008af0:	18f2      	adds	r2, r6, r3
 8008af2:	2a20      	cmp	r2, #32
 8008af4:	dd0f      	ble.n	8008b16 <_dtoa_r+0x212>
 8008af6:	4b63      	ldr	r3, [pc, #396]	; (8008c84 <_dtoa_r+0x380>)
 8008af8:	9806      	ldr	r0, [sp, #24]
 8008afa:	18f3      	adds	r3, r6, r3
 8008afc:	40d8      	lsrs	r0, r3
 8008afe:	2340      	movs	r3, #64	; 0x40
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	409c      	lsls	r4, r3
 8008b04:	4320      	orrs	r0, r4
 8008b06:	f7f9 fb33 	bl	8002170 <__aeabi_ui2d>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	4c5e      	ldr	r4, [pc, #376]	; (8008c88 <_dtoa_r+0x384>)
 8008b0e:	3e01      	subs	r6, #1
 8008b10:	1909      	adds	r1, r1, r4
 8008b12:	9318      	str	r3, [sp, #96]	; 0x60
 8008b14:	e771      	b.n	80089fa <_dtoa_r+0xf6>
 8008b16:	2320      	movs	r3, #32
 8008b18:	9806      	ldr	r0, [sp, #24]
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	4098      	lsls	r0, r3
 8008b1e:	e7f2      	b.n	8008b06 <_dtoa_r+0x202>
 8008b20:	9016      	str	r0, [sp, #88]	; 0x58
 8008b22:	e7b6      	b.n	8008a92 <_dtoa_r+0x18e>
 8008b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b26:	9a03      	ldr	r2, [sp, #12]
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b2c:	4253      	negs	r3, r2
 8008b2e:	9308      	str	r3, [sp, #32]
 8008b30:	2300      	movs	r3, #0
 8008b32:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b34:	e7c5      	b.n	8008ac2 <_dtoa_r+0x1be>
 8008b36:	2301      	movs	r3, #1
 8008b38:	930e      	str	r3, [sp, #56]	; 0x38
 8008b3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dd65      	ble.n	8008c0c <_dtoa_r+0x308>
 8008b40:	001f      	movs	r7, r3
 8008b42:	930d      	str	r3, [sp, #52]	; 0x34
 8008b44:	9a04      	ldr	r2, [sp, #16]
 8008b46:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8008b48:	2200      	movs	r2, #0
 8008b4a:	6062      	str	r2, [r4, #4]
 8008b4c:	3204      	adds	r2, #4
 8008b4e:	0011      	movs	r1, r2
 8008b50:	3114      	adds	r1, #20
 8008b52:	4299      	cmp	r1, r3
 8008b54:	d95f      	bls.n	8008c16 <_dtoa_r+0x312>
 8008b56:	6861      	ldr	r1, [r4, #4]
 8008b58:	9804      	ldr	r0, [sp, #16]
 8008b5a:	f000 fcdc 	bl	8009516 <_Balloc>
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	6020      	str	r0, [r4, #0]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	930a      	str	r3, [sp, #40]	; 0x28
 8008b68:	2f0e      	cmp	r7, #14
 8008b6a:	d900      	bls.n	8008b6e <_dtoa_r+0x26a>
 8008b6c:	e105      	b.n	8008d7a <_dtoa_r+0x476>
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	d100      	bne.n	8008b74 <_dtoa_r+0x270>
 8008b72:	e102      	b.n	8008d7a <_dtoa_r+0x476>
 8008b74:	9b06      	ldr	r3, [sp, #24]
 8008b76:	9c07      	ldr	r4, [sp, #28]
 8008b78:	9314      	str	r3, [sp, #80]	; 0x50
 8008b7a:	9415      	str	r4, [sp, #84]	; 0x54
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	dc00      	bgt.n	8008b84 <_dtoa_r+0x280>
 8008b82:	e085      	b.n	8008c90 <_dtoa_r+0x38c>
 8008b84:	001a      	movs	r2, r3
 8008b86:	210f      	movs	r1, #15
 8008b88:	4b3c      	ldr	r3, [pc, #240]	; (8008c7c <_dtoa_r+0x378>)
 8008b8a:	400a      	ands	r2, r1
 8008b8c:	00d2      	lsls	r2, r2, #3
 8008b8e:	189b      	adds	r3, r3, r2
 8008b90:	685c      	ldr	r4, [r3, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	9310      	str	r3, [sp, #64]	; 0x40
 8008b96:	9411      	str	r4, [sp, #68]	; 0x44
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	2402      	movs	r4, #2
 8008b9c:	111d      	asrs	r5, r3, #4
 8008b9e:	06eb      	lsls	r3, r5, #27
 8008ba0:	d50a      	bpl.n	8008bb8 <_dtoa_r+0x2b4>
 8008ba2:	4b3a      	ldr	r3, [pc, #232]	; (8008c8c <_dtoa_r+0x388>)
 8008ba4:	400d      	ands	r5, r1
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008bac:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008bae:	f7f8 f87f 	bl	8000cb0 <__aeabi_ddiv>
 8008bb2:	9006      	str	r0, [sp, #24]
 8008bb4:	9107      	str	r1, [sp, #28]
 8008bb6:	3401      	adds	r4, #1
 8008bb8:	4e34      	ldr	r6, [pc, #208]	; (8008c8c <_dtoa_r+0x388>)
 8008bba:	2d00      	cmp	r5, #0
 8008bbc:	d130      	bne.n	8008c20 <_dtoa_r+0x31c>
 8008bbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bc2:	9806      	ldr	r0, [sp, #24]
 8008bc4:	9907      	ldr	r1, [sp, #28]
 8008bc6:	f7f8 f873 	bl	8000cb0 <__aeabi_ddiv>
 8008bca:	9006      	str	r0, [sp, #24]
 8008bcc:	9107      	str	r1, [sp, #28]
 8008bce:	e07a      	b.n	8008cc6 <_dtoa_r+0x3c2>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008bd4:	930e      	str	r3, [sp, #56]	; 0x38
 8008bd6:	4694      	mov	ip, r2
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	4463      	add	r3, ip
 8008bdc:	1c5f      	adds	r7, r3, #1
 8008bde:	930d      	str	r3, [sp, #52]	; 0x34
 8008be0:	1e3b      	subs	r3, r7, #0
 8008be2:	dcaf      	bgt.n	8008b44 <_dtoa_r+0x240>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e7ad      	b.n	8008b44 <_dtoa_r+0x240>
 8008be8:	2300      	movs	r3, #0
 8008bea:	e7a5      	b.n	8008b38 <_dtoa_r+0x234>
 8008bec:	2300      	movs	r3, #0
 8008bee:	e7f0      	b.n	8008bd2 <_dtoa_r+0x2ce>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	950e      	str	r5, [sp, #56]	; 0x38
 8008bf4:	9322      	str	r3, [sp, #136]	; 0x88
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	930d      	str	r3, [sp, #52]	; 0x34
 8008bfc:	001f      	movs	r7, r3
 8008bfe:	3313      	adds	r3, #19
 8008c00:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c02:	e79f      	b.n	8008b44 <_dtoa_r+0x240>
 8008c04:	2301      	movs	r3, #1
 8008c06:	930e      	str	r3, [sp, #56]	; 0x38
 8008c08:	3b02      	subs	r3, #2
 8008c0a:	e7f5      	b.n	8008bf8 <_dtoa_r+0x2f4>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c10:	001f      	movs	r7, r3
 8008c12:	001a      	movs	r2, r3
 8008c14:	e7f4      	b.n	8008c00 <_dtoa_r+0x2fc>
 8008c16:	6861      	ldr	r1, [r4, #4]
 8008c18:	0052      	lsls	r2, r2, #1
 8008c1a:	3101      	adds	r1, #1
 8008c1c:	6061      	str	r1, [r4, #4]
 8008c1e:	e796      	b.n	8008b4e <_dtoa_r+0x24a>
 8008c20:	2301      	movs	r3, #1
 8008c22:	421d      	tst	r5, r3
 8008c24:	d008      	beq.n	8008c38 <_dtoa_r+0x334>
 8008c26:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c2a:	18e4      	adds	r4, r4, r3
 8008c2c:	6832      	ldr	r2, [r6, #0]
 8008c2e:	6873      	ldr	r3, [r6, #4]
 8008c30:	f7f8 fc72 	bl	8001518 <__aeabi_dmul>
 8008c34:	9010      	str	r0, [sp, #64]	; 0x40
 8008c36:	9111      	str	r1, [sp, #68]	; 0x44
 8008c38:	106d      	asrs	r5, r5, #1
 8008c3a:	3608      	adds	r6, #8
 8008c3c:	e7bd      	b.n	8008bba <_dtoa_r+0x2b6>
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	7ff00000 	.word	0x7ff00000
 8008c44:	0000270f 	.word	0x0000270f
 8008c48:	0800a781 	.word	0x0800a781
 8008c4c:	0800a784 	.word	0x0800a784
 8008c50:	0800a754 	.word	0x0800a754
 8008c54:	0800a755 	.word	0x0800a755
 8008c58:	3ff00000 	.word	0x3ff00000
 8008c5c:	fffffc01 	.word	0xfffffc01
 8008c60:	3ff80000 	.word	0x3ff80000
 8008c64:	636f4361 	.word	0x636f4361
 8008c68:	3fd287a7 	.word	0x3fd287a7
 8008c6c:	8b60c8b3 	.word	0x8b60c8b3
 8008c70:	3fc68a28 	.word	0x3fc68a28
 8008c74:	509f79fb 	.word	0x509f79fb
 8008c78:	3fd34413 	.word	0x3fd34413
 8008c7c:	0800a7b0 	.word	0x0800a7b0
 8008c80:	00000432 	.word	0x00000432
 8008c84:	00000412 	.word	0x00000412
 8008c88:	fe100000 	.word	0xfe100000
 8008c8c:	0800a788 	.word	0x0800a788
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	2402      	movs	r4, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d016      	beq.n	8008cc6 <_dtoa_r+0x3c2>
 8008c98:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008c9a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008c9c:	425d      	negs	r5, r3
 8008c9e:	230f      	movs	r3, #15
 8008ca0:	4aca      	ldr	r2, [pc, #808]	; (8008fcc <_dtoa_r+0x6c8>)
 8008ca2:	402b      	ands	r3, r5
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	18d3      	adds	r3, r2, r3
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f7f8 fc34 	bl	8001518 <__aeabi_dmul>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9006      	str	r0, [sp, #24]
 8008cb4:	9107      	str	r1, [sp, #28]
 8008cb6:	4ec6      	ldr	r6, [pc, #792]	; (8008fd0 <_dtoa_r+0x6cc>)
 8008cb8:	112d      	asrs	r5, r5, #4
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	d000      	beq.n	8008cc0 <_dtoa_r+0x3bc>
 8008cbe:	e08c      	b.n	8008dda <_dtoa_r+0x4d6>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d000      	beq.n	8008cc6 <_dtoa_r+0x3c2>
 8008cc4:	e781      	b.n	8008bca <_dtoa_r+0x2c6>
 8008cc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d100      	bne.n	8008cce <_dtoa_r+0x3ca>
 8008ccc:	e091      	b.n	8008df2 <_dtoa_r+0x4ee>
 8008cce:	9a06      	ldr	r2, [sp, #24]
 8008cd0:	9b07      	ldr	r3, [sp, #28]
 8008cd2:	9210      	str	r2, [sp, #64]	; 0x40
 8008cd4:	9311      	str	r3, [sp, #68]	; 0x44
 8008cd6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008cd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cda:	2200      	movs	r2, #0
 8008cdc:	4bbd      	ldr	r3, [pc, #756]	; (8008fd4 <_dtoa_r+0x6d0>)
 8008cde:	f7f7 fbb1 	bl	8000444 <__aeabi_dcmplt>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d100      	bne.n	8008ce8 <_dtoa_r+0x3e4>
 8008ce6:	e084      	b.n	8008df2 <_dtoa_r+0x4ee>
 8008ce8:	2f00      	cmp	r7, #0
 8008cea:	d100      	bne.n	8008cee <_dtoa_r+0x3ea>
 8008cec:	e081      	b.n	8008df2 <_dtoa_r+0x4ee>
 8008cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dd3e      	ble.n	8008d72 <_dtoa_r+0x46e>
 8008cf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008cf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cf8:	9b03      	ldr	r3, [sp, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	1e5e      	subs	r6, r3, #1
 8008cfe:	4bb6      	ldr	r3, [pc, #728]	; (8008fd8 <_dtoa_r+0x6d4>)
 8008d00:	f7f8 fc0a 	bl	8001518 <__aeabi_dmul>
 8008d04:	9006      	str	r0, [sp, #24]
 8008d06:	9107      	str	r1, [sp, #28]
 8008d08:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008d0a:	3401      	adds	r4, #1
 8008d0c:	0020      	movs	r0, r4
 8008d0e:	f7f9 f9ed 	bl	80020ec <__aeabi_i2d>
 8008d12:	9a06      	ldr	r2, [sp, #24]
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	f7f8 fbff 	bl	8001518 <__aeabi_dmul>
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	4baf      	ldr	r3, [pc, #700]	; (8008fdc <_dtoa_r+0x6d8>)
 8008d1e:	f7f7 fcb7 	bl	8000690 <__aeabi_dadd>
 8008d22:	9012      	str	r0, [sp, #72]	; 0x48
 8008d24:	9113      	str	r1, [sp, #76]	; 0x4c
 8008d26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008d2a:	4aad      	ldr	r2, [pc, #692]	; (8008fe0 <_dtoa_r+0x6dc>)
 8008d2c:	9310      	str	r3, [sp, #64]	; 0x40
 8008d2e:	9411      	str	r4, [sp, #68]	; 0x44
 8008d30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d32:	189c      	adds	r4, r3, r2
 8008d34:	9411      	str	r4, [sp, #68]	; 0x44
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	d15e      	bne.n	8008df8 <_dtoa_r+0x4f4>
 8008d3a:	9806      	ldr	r0, [sp, #24]
 8008d3c:	9907      	ldr	r1, [sp, #28]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4ba8      	ldr	r3, [pc, #672]	; (8008fe4 <_dtoa_r+0x6e0>)
 8008d42:	f7f8 fe69 	bl	8001a18 <__aeabi_dsub>
 8008d46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d48:	0023      	movs	r3, r4
 8008d4a:	9006      	str	r0, [sp, #24]
 8008d4c:	9107      	str	r1, [sp, #28]
 8008d4e:	f7f7 fb8d 	bl	800046c <__aeabi_dcmpgt>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d000      	beq.n	8008d58 <_dtoa_r+0x454>
 8008d56:	e301      	b.n	800935c <_dtoa_r+0xa58>
 8008d58:	48a3      	ldr	r0, [pc, #652]	; (8008fe8 <_dtoa_r+0x6e4>)
 8008d5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008d5c:	4684      	mov	ip, r0
 8008d5e:	4461      	add	r1, ip
 8008d60:	000b      	movs	r3, r1
 8008d62:	9806      	ldr	r0, [sp, #24]
 8008d64:	9907      	ldr	r1, [sp, #28]
 8008d66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d68:	f7f7 fb6c 	bl	8000444 <__aeabi_dcmplt>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d000      	beq.n	8008d72 <_dtoa_r+0x46e>
 8008d70:	e2e8      	b.n	8009344 <_dtoa_r+0xa40>
 8008d72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d74:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008d76:	9306      	str	r3, [sp, #24]
 8008d78:	9407      	str	r4, [sp, #28]
 8008d7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	da00      	bge.n	8008d82 <_dtoa_r+0x47e>
 8008d80:	e157      	b.n	8009032 <_dtoa_r+0x72e>
 8008d82:	9a03      	ldr	r2, [sp, #12]
 8008d84:	2a0e      	cmp	r2, #14
 8008d86:	dd00      	ble.n	8008d8a <_dtoa_r+0x486>
 8008d88:	e153      	b.n	8009032 <_dtoa_r+0x72e>
 8008d8a:	4b90      	ldr	r3, [pc, #576]	; (8008fcc <_dtoa_r+0x6c8>)
 8008d8c:	00d2      	lsls	r2, r2, #3
 8008d8e:	189b      	adds	r3, r3, r2
 8008d90:	685c      	ldr	r4, [r3, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	9308      	str	r3, [sp, #32]
 8008d96:	9409      	str	r4, [sp, #36]	; 0x24
 8008d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	db00      	blt.n	8008da0 <_dtoa_r+0x49c>
 8008d9e:	e0ce      	b.n	8008f3e <_dtoa_r+0x63a>
 8008da0:	2f00      	cmp	r7, #0
 8008da2:	dd00      	ble.n	8008da6 <_dtoa_r+0x4a2>
 8008da4:	e0cb      	b.n	8008f3e <_dtoa_r+0x63a>
 8008da6:	d000      	beq.n	8008daa <_dtoa_r+0x4a6>
 8008da8:	e2cf      	b.n	800934a <_dtoa_r+0xa46>
 8008daa:	9808      	ldr	r0, [sp, #32]
 8008dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dae:	2200      	movs	r2, #0
 8008db0:	4b8c      	ldr	r3, [pc, #560]	; (8008fe4 <_dtoa_r+0x6e0>)
 8008db2:	f7f8 fbb1 	bl	8001518 <__aeabi_dmul>
 8008db6:	9a06      	ldr	r2, [sp, #24]
 8008db8:	9b07      	ldr	r3, [sp, #28]
 8008dba:	f7f7 fb61 	bl	8000480 <__aeabi_dcmpge>
 8008dbe:	003e      	movs	r6, r7
 8008dc0:	9708      	str	r7, [sp, #32]
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d000      	beq.n	8008dc8 <_dtoa_r+0x4c4>
 8008dc6:	e2a4      	b.n	8009312 <_dtoa_r+0xa0e>
 8008dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dcc:	1c5d      	adds	r5, r3, #1
 8008dce:	2331      	movs	r3, #49	; 0x31
 8008dd0:	7013      	strb	r3, [r2, #0]
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	9303      	str	r3, [sp, #12]
 8008dd8:	e29f      	b.n	800931a <_dtoa_r+0xa16>
 8008dda:	2201      	movs	r2, #1
 8008ddc:	4215      	tst	r5, r2
 8008dde:	d005      	beq.n	8008dec <_dtoa_r+0x4e8>
 8008de0:	18a4      	adds	r4, r4, r2
 8008de2:	6832      	ldr	r2, [r6, #0]
 8008de4:	6873      	ldr	r3, [r6, #4]
 8008de6:	f7f8 fb97 	bl	8001518 <__aeabi_dmul>
 8008dea:	2301      	movs	r3, #1
 8008dec:	106d      	asrs	r5, r5, #1
 8008dee:	3608      	adds	r6, #8
 8008df0:	e763      	b.n	8008cba <_dtoa_r+0x3b6>
 8008df2:	9e03      	ldr	r6, [sp, #12]
 8008df4:	003d      	movs	r5, r7
 8008df6:	e789      	b.n	8008d0c <_dtoa_r+0x408>
 8008df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dfa:	1e69      	subs	r1, r5, #1
 8008dfc:	1952      	adds	r2, r2, r5
 8008dfe:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e02:	4b72      	ldr	r3, [pc, #456]	; (8008fcc <_dtoa_r+0x6c8>)
 8008e04:	00c9      	lsls	r1, r1, #3
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	d04a      	beq.n	8008ea0 <_dtoa_r+0x59c>
 8008e0a:	185b      	adds	r3, r3, r1
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	2000      	movs	r0, #0
 8008e12:	4976      	ldr	r1, [pc, #472]	; (8008fec <_dtoa_r+0x6e8>)
 8008e14:	f7f7 ff4c 	bl	8000cb0 <__aeabi_ddiv>
 8008e18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e1c:	f7f8 fdfc 	bl	8001a18 <__aeabi_dsub>
 8008e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e22:	9010      	str	r0, [sp, #64]	; 0x40
 8008e24:	9111      	str	r1, [sp, #68]	; 0x44
 8008e26:	9312      	str	r3, [sp, #72]	; 0x48
 8008e28:	9806      	ldr	r0, [sp, #24]
 8008e2a:	9907      	ldr	r1, [sp, #28]
 8008e2c:	f7f9 f92a 	bl	8002084 <__aeabi_d2iz>
 8008e30:	0004      	movs	r4, r0
 8008e32:	f7f9 f95b 	bl	80020ec <__aeabi_i2d>
 8008e36:	0002      	movs	r2, r0
 8008e38:	000b      	movs	r3, r1
 8008e3a:	9806      	ldr	r0, [sp, #24]
 8008e3c:	9907      	ldr	r1, [sp, #28]
 8008e3e:	f7f8 fdeb 	bl	8001a18 <__aeabi_dsub>
 8008e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e44:	3430      	adds	r4, #48	; 0x30
 8008e46:	1c5d      	adds	r5, r3, #1
 8008e48:	701c      	strb	r4, [r3, #0]
 8008e4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e4e:	9006      	str	r0, [sp, #24]
 8008e50:	9107      	str	r1, [sp, #28]
 8008e52:	f7f7 faf7 	bl	8000444 <__aeabi_dcmplt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d165      	bne.n	8008f26 <_dtoa_r+0x622>
 8008e5a:	9a06      	ldr	r2, [sp, #24]
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	2000      	movs	r0, #0
 8008e60:	495c      	ldr	r1, [pc, #368]	; (8008fd4 <_dtoa_r+0x6d0>)
 8008e62:	f7f8 fdd9 	bl	8001a18 <__aeabi_dsub>
 8008e66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e6a:	f7f7 faeb 	bl	8000444 <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d000      	beq.n	8008e74 <_dtoa_r+0x570>
 8008e72:	e0be      	b.n	8008ff2 <_dtoa_r+0x6ee>
 8008e74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e76:	429d      	cmp	r5, r3
 8008e78:	d100      	bne.n	8008e7c <_dtoa_r+0x578>
 8008e7a:	e77a      	b.n	8008d72 <_dtoa_r+0x46e>
 8008e7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e80:	2200      	movs	r2, #0
 8008e82:	4b55      	ldr	r3, [pc, #340]	; (8008fd8 <_dtoa_r+0x6d4>)
 8008e84:	f7f8 fb48 	bl	8001518 <__aeabi_dmul>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	9010      	str	r0, [sp, #64]	; 0x40
 8008e8c:	9111      	str	r1, [sp, #68]	; 0x44
 8008e8e:	9806      	ldr	r0, [sp, #24]
 8008e90:	9907      	ldr	r1, [sp, #28]
 8008e92:	4b51      	ldr	r3, [pc, #324]	; (8008fd8 <_dtoa_r+0x6d4>)
 8008e94:	f7f8 fb40 	bl	8001518 <__aeabi_dmul>
 8008e98:	9512      	str	r5, [sp, #72]	; 0x48
 8008e9a:	9006      	str	r0, [sp, #24]
 8008e9c:	9107      	str	r1, [sp, #28]
 8008e9e:	e7c3      	b.n	8008e28 <_dtoa_r+0x524>
 8008ea0:	1859      	adds	r1, r3, r1
 8008ea2:	6808      	ldr	r0, [r1, #0]
 8008ea4:	6849      	ldr	r1, [r1, #4]
 8008ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eaa:	f7f8 fb35 	bl	8001518 <__aeabi_dmul>
 8008eae:	9010      	str	r0, [sp, #64]	; 0x40
 8008eb0:	9111      	str	r1, [sp, #68]	; 0x44
 8008eb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008eb4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008eb6:	9806      	ldr	r0, [sp, #24]
 8008eb8:	9907      	ldr	r1, [sp, #28]
 8008eba:	f7f9 f8e3 	bl	8002084 <__aeabi_d2iz>
 8008ebe:	9012      	str	r0, [sp, #72]	; 0x48
 8008ec0:	f7f9 f914 	bl	80020ec <__aeabi_i2d>
 8008ec4:	0002      	movs	r2, r0
 8008ec6:	000b      	movs	r3, r1
 8008ec8:	9806      	ldr	r0, [sp, #24]
 8008eca:	9907      	ldr	r1, [sp, #28]
 8008ecc:	f7f8 fda4 	bl	8001a18 <__aeabi_dsub>
 8008ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ed2:	9006      	str	r0, [sp, #24]
 8008ed4:	9107      	str	r1, [sp, #28]
 8008ed6:	3330      	adds	r3, #48	; 0x30
 8008ed8:	7023      	strb	r3, [r4, #0]
 8008eda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008edc:	3401      	adds	r4, #1
 8008ede:	2200      	movs	r2, #0
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	d124      	bne.n	8008f2e <_dtoa_r+0x62a>
 8008ee4:	4b41      	ldr	r3, [pc, #260]	; (8008fec <_dtoa_r+0x6e8>)
 8008ee6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ee8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008eea:	f7f7 fbd1 	bl	8000690 <__aeabi_dadd>
 8008eee:	0002      	movs	r2, r0
 8008ef0:	000b      	movs	r3, r1
 8008ef2:	9806      	ldr	r0, [sp, #24]
 8008ef4:	9907      	ldr	r1, [sp, #28]
 8008ef6:	f7f7 fab9 	bl	800046c <__aeabi_dcmpgt>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d000      	beq.n	8008f00 <_dtoa_r+0x5fc>
 8008efe:	e078      	b.n	8008ff2 <_dtoa_r+0x6ee>
 8008f00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f04:	2000      	movs	r0, #0
 8008f06:	4939      	ldr	r1, [pc, #228]	; (8008fec <_dtoa_r+0x6e8>)
 8008f08:	f7f8 fd86 	bl	8001a18 <__aeabi_dsub>
 8008f0c:	0002      	movs	r2, r0
 8008f0e:	000b      	movs	r3, r1
 8008f10:	9806      	ldr	r0, [sp, #24]
 8008f12:	9907      	ldr	r1, [sp, #28]
 8008f14:	f7f7 fa96 	bl	8000444 <__aeabi_dcmplt>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d100      	bne.n	8008f1e <_dtoa_r+0x61a>
 8008f1c:	e729      	b.n	8008d72 <_dtoa_r+0x46e>
 8008f1e:	1e6b      	subs	r3, r5, #1
 8008f20:	781a      	ldrb	r2, [r3, #0]
 8008f22:	2a30      	cmp	r2, #48	; 0x30
 8008f24:	d001      	beq.n	8008f2a <_dtoa_r+0x626>
 8008f26:	9603      	str	r6, [sp, #12]
 8008f28:	e03f      	b.n	8008faa <_dtoa_r+0x6a6>
 8008f2a:	001d      	movs	r5, r3
 8008f2c:	e7f7      	b.n	8008f1e <_dtoa_r+0x61a>
 8008f2e:	9806      	ldr	r0, [sp, #24]
 8008f30:	9907      	ldr	r1, [sp, #28]
 8008f32:	4b29      	ldr	r3, [pc, #164]	; (8008fd8 <_dtoa_r+0x6d4>)
 8008f34:	f7f8 faf0 	bl	8001518 <__aeabi_dmul>
 8008f38:	9006      	str	r0, [sp, #24]
 8008f3a:	9107      	str	r1, [sp, #28]
 8008f3c:	e7bb      	b.n	8008eb6 <_dtoa_r+0x5b2>
 8008f3e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008f40:	9a08      	ldr	r2, [sp, #32]
 8008f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f44:	9806      	ldr	r0, [sp, #24]
 8008f46:	9907      	ldr	r1, [sp, #28]
 8008f48:	f7f7 feb2 	bl	8000cb0 <__aeabi_ddiv>
 8008f4c:	f7f9 f89a 	bl	8002084 <__aeabi_d2iz>
 8008f50:	0004      	movs	r4, r0
 8008f52:	f7f9 f8cb 	bl	80020ec <__aeabi_i2d>
 8008f56:	9a08      	ldr	r2, [sp, #32]
 8008f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5a:	f7f8 fadd 	bl	8001518 <__aeabi_dmul>
 8008f5e:	000b      	movs	r3, r1
 8008f60:	0002      	movs	r2, r0
 8008f62:	9806      	ldr	r0, [sp, #24]
 8008f64:	9907      	ldr	r1, [sp, #28]
 8008f66:	f7f8 fd57 	bl	8001a18 <__aeabi_dsub>
 8008f6a:	0023      	movs	r3, r4
 8008f6c:	3330      	adds	r3, #48	; 0x30
 8008f6e:	7033      	strb	r3, [r6, #0]
 8008f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f72:	1c75      	adds	r5, r6, #1
 8008f74:	1aeb      	subs	r3, r5, r3
 8008f76:	429f      	cmp	r7, r3
 8008f78:	d14c      	bne.n	8009014 <_dtoa_r+0x710>
 8008f7a:	0002      	movs	r2, r0
 8008f7c:	000b      	movs	r3, r1
 8008f7e:	f7f7 fb87 	bl	8000690 <__aeabi_dadd>
 8008f82:	0006      	movs	r6, r0
 8008f84:	000f      	movs	r7, r1
 8008f86:	0002      	movs	r2, r0
 8008f88:	000b      	movs	r3, r1
 8008f8a:	9808      	ldr	r0, [sp, #32]
 8008f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f8e:	f7f7 fa59 	bl	8000444 <__aeabi_dcmplt>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d12c      	bne.n	8008ff0 <_dtoa_r+0x6ec>
 8008f96:	9808      	ldr	r0, [sp, #32]
 8008f98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f9a:	0032      	movs	r2, r6
 8008f9c:	003b      	movs	r3, r7
 8008f9e:	f7f7 fa4b 	bl	8000438 <__aeabi_dcmpeq>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d001      	beq.n	8008faa <_dtoa_r+0x6a6>
 8008fa6:	07e3      	lsls	r3, r4, #31
 8008fa8:	d422      	bmi.n	8008ff0 <_dtoa_r+0x6ec>
 8008faa:	9905      	ldr	r1, [sp, #20]
 8008fac:	9804      	ldr	r0, [sp, #16]
 8008fae:	f000 faea 	bl	8009586 <_Bfree>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	702b      	strb	r3, [r5, #0]
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008fba:	3301      	adds	r3, #1
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d100      	bne.n	8008fc6 <_dtoa_r+0x6c2>
 8008fc4:	e275      	b.n	80094b2 <_dtoa_r+0xbae>
 8008fc6:	601d      	str	r5, [r3, #0]
 8008fc8:	e273      	b.n	80094b2 <_dtoa_r+0xbae>
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	0800a7b0 	.word	0x0800a7b0
 8008fd0:	0800a788 	.word	0x0800a788
 8008fd4:	3ff00000 	.word	0x3ff00000
 8008fd8:	40240000 	.word	0x40240000
 8008fdc:	401c0000 	.word	0x401c0000
 8008fe0:	fcc00000 	.word	0xfcc00000
 8008fe4:	40140000 	.word	0x40140000
 8008fe8:	7cc00000 	.word	0x7cc00000
 8008fec:	3fe00000 	.word	0x3fe00000
 8008ff0:	9e03      	ldr	r6, [sp, #12]
 8008ff2:	1e6b      	subs	r3, r5, #1
 8008ff4:	781a      	ldrb	r2, [r3, #0]
 8008ff6:	2a39      	cmp	r2, #57	; 0x39
 8008ff8:	d106      	bne.n	8009008 <_dtoa_r+0x704>
 8008ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d107      	bne.n	8009010 <_dtoa_r+0x70c>
 8009000:	2330      	movs	r3, #48	; 0x30
 8009002:	7013      	strb	r3, [r2, #0]
 8009004:	0013      	movs	r3, r2
 8009006:	3601      	adds	r6, #1
 8009008:	781a      	ldrb	r2, [r3, #0]
 800900a:	3201      	adds	r2, #1
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	e78a      	b.n	8008f26 <_dtoa_r+0x622>
 8009010:	001d      	movs	r5, r3
 8009012:	e7ee      	b.n	8008ff2 <_dtoa_r+0x6ee>
 8009014:	2200      	movs	r2, #0
 8009016:	4bcf      	ldr	r3, [pc, #828]	; (8009354 <_dtoa_r+0xa50>)
 8009018:	f7f8 fa7e 	bl	8001518 <__aeabi_dmul>
 800901c:	2200      	movs	r2, #0
 800901e:	2300      	movs	r3, #0
 8009020:	9006      	str	r0, [sp, #24]
 8009022:	9107      	str	r1, [sp, #28]
 8009024:	002e      	movs	r6, r5
 8009026:	f7f7 fa07 	bl	8000438 <__aeabi_dcmpeq>
 800902a:	2800      	cmp	r0, #0
 800902c:	d100      	bne.n	8009030 <_dtoa_r+0x72c>
 800902e:	e787      	b.n	8008f40 <_dtoa_r+0x63c>
 8009030:	e7bb      	b.n	8008faa <_dtoa_r+0x6a6>
 8009032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009034:	2a00      	cmp	r2, #0
 8009036:	d100      	bne.n	800903a <_dtoa_r+0x736>
 8009038:	e087      	b.n	800914a <_dtoa_r+0x846>
 800903a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800903c:	2a01      	cmp	r2, #1
 800903e:	dc6e      	bgt.n	800911e <_dtoa_r+0x81a>
 8009040:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009042:	2a00      	cmp	r2, #0
 8009044:	d067      	beq.n	8009116 <_dtoa_r+0x812>
 8009046:	4ac4      	ldr	r2, [pc, #784]	; (8009358 <_dtoa_r+0xa54>)
 8009048:	189b      	adds	r3, r3, r2
 800904a:	9d08      	ldr	r5, [sp, #32]
 800904c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800904e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009050:	2101      	movs	r1, #1
 8009052:	18d2      	adds	r2, r2, r3
 8009054:	920b      	str	r2, [sp, #44]	; 0x2c
 8009056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009058:	9804      	ldr	r0, [sp, #16]
 800905a:	18d3      	adds	r3, r2, r3
 800905c:	930c      	str	r3, [sp, #48]	; 0x30
 800905e:	f000 fb30 	bl	80096c2 <__i2b>
 8009062:	0006      	movs	r6, r0
 8009064:	2c00      	cmp	r4, #0
 8009066:	dd0e      	ble.n	8009086 <_dtoa_r+0x782>
 8009068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800906a:	2b00      	cmp	r3, #0
 800906c:	dd0b      	ble.n	8009086 <_dtoa_r+0x782>
 800906e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009070:	0023      	movs	r3, r4
 8009072:	4294      	cmp	r4, r2
 8009074:	dd00      	ble.n	8009078 <_dtoa_r+0x774>
 8009076:	0013      	movs	r3, r2
 8009078:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800907a:	1ae4      	subs	r4, r4, r3
 800907c:	1ad2      	subs	r2, r2, r3
 800907e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	930c      	str	r3, [sp, #48]	; 0x30
 8009086:	9b08      	ldr	r3, [sp, #32]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01e      	beq.n	80090ca <_dtoa_r+0x7c6>
 800908c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800908e:	2b00      	cmp	r3, #0
 8009090:	d05f      	beq.n	8009152 <_dtoa_r+0x84e>
 8009092:	2d00      	cmp	r5, #0
 8009094:	dd11      	ble.n	80090ba <_dtoa_r+0x7b6>
 8009096:	0031      	movs	r1, r6
 8009098:	002a      	movs	r2, r5
 800909a:	9804      	ldr	r0, [sp, #16]
 800909c:	f000 fbaa 	bl	80097f4 <__pow5mult>
 80090a0:	9a05      	ldr	r2, [sp, #20]
 80090a2:	0001      	movs	r1, r0
 80090a4:	0006      	movs	r6, r0
 80090a6:	9804      	ldr	r0, [sp, #16]
 80090a8:	f000 fb14 	bl	80096d4 <__multiply>
 80090ac:	9905      	ldr	r1, [sp, #20]
 80090ae:	9010      	str	r0, [sp, #64]	; 0x40
 80090b0:	9804      	ldr	r0, [sp, #16]
 80090b2:	f000 fa68 	bl	8009586 <_Bfree>
 80090b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090b8:	9305      	str	r3, [sp, #20]
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	1b5a      	subs	r2, r3, r5
 80090be:	d004      	beq.n	80090ca <_dtoa_r+0x7c6>
 80090c0:	9905      	ldr	r1, [sp, #20]
 80090c2:	9804      	ldr	r0, [sp, #16]
 80090c4:	f000 fb96 	bl	80097f4 <__pow5mult>
 80090c8:	9005      	str	r0, [sp, #20]
 80090ca:	2101      	movs	r1, #1
 80090cc:	9804      	ldr	r0, [sp, #16]
 80090ce:	f000 faf8 	bl	80096c2 <__i2b>
 80090d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090d4:	9008      	str	r0, [sp, #32]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	dd3d      	ble.n	8009156 <_dtoa_r+0x852>
 80090da:	001a      	movs	r2, r3
 80090dc:	0001      	movs	r1, r0
 80090de:	9804      	ldr	r0, [sp, #16]
 80090e0:	f000 fb88 	bl	80097f4 <__pow5mult>
 80090e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090e6:	9008      	str	r0, [sp, #32]
 80090e8:	2500      	movs	r5, #0
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	dc3b      	bgt.n	8009166 <_dtoa_r+0x862>
 80090ee:	2500      	movs	r5, #0
 80090f0:	9b06      	ldr	r3, [sp, #24]
 80090f2:	42ab      	cmp	r3, r5
 80090f4:	d133      	bne.n	800915e <_dtoa_r+0x85a>
 80090f6:	9b07      	ldr	r3, [sp, #28]
 80090f8:	031b      	lsls	r3, r3, #12
 80090fa:	42ab      	cmp	r3, r5
 80090fc:	d12f      	bne.n	800915e <_dtoa_r+0x85a>
 80090fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009100:	9a07      	ldr	r2, [sp, #28]
 8009102:	4213      	tst	r3, r2
 8009104:	d02b      	beq.n	800915e <_dtoa_r+0x85a>
 8009106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009108:	3501      	adds	r5, #1
 800910a:	3301      	adds	r3, #1
 800910c:	930b      	str	r3, [sp, #44]	; 0x2c
 800910e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009110:	3301      	adds	r3, #1
 8009112:	930c      	str	r3, [sp, #48]	; 0x30
 8009114:	e023      	b.n	800915e <_dtoa_r+0x85a>
 8009116:	2336      	movs	r3, #54	; 0x36
 8009118:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800911a:	1a9b      	subs	r3, r3, r2
 800911c:	e795      	b.n	800904a <_dtoa_r+0x746>
 800911e:	9b08      	ldr	r3, [sp, #32]
 8009120:	1e7d      	subs	r5, r7, #1
 8009122:	42ab      	cmp	r3, r5
 8009124:	db06      	blt.n	8009134 <_dtoa_r+0x830>
 8009126:	1b5d      	subs	r5, r3, r5
 8009128:	2f00      	cmp	r7, #0
 800912a:	da0b      	bge.n	8009144 <_dtoa_r+0x840>
 800912c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800912e:	1bdc      	subs	r4, r3, r7
 8009130:	2300      	movs	r3, #0
 8009132:	e78c      	b.n	800904e <_dtoa_r+0x74a>
 8009134:	9b08      	ldr	r3, [sp, #32]
 8009136:	9508      	str	r5, [sp, #32]
 8009138:	1aea      	subs	r2, r5, r3
 800913a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800913c:	2500      	movs	r5, #0
 800913e:	189b      	adds	r3, r3, r2
 8009140:	930f      	str	r3, [sp, #60]	; 0x3c
 8009142:	e7f1      	b.n	8009128 <_dtoa_r+0x824>
 8009144:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009146:	003b      	movs	r3, r7
 8009148:	e781      	b.n	800904e <_dtoa_r+0x74a>
 800914a:	9d08      	ldr	r5, [sp, #32]
 800914c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800914e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009150:	e788      	b.n	8009064 <_dtoa_r+0x760>
 8009152:	9a08      	ldr	r2, [sp, #32]
 8009154:	e7b4      	b.n	80090c0 <_dtoa_r+0x7bc>
 8009156:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009158:	2500      	movs	r5, #0
 800915a:	2b01      	cmp	r3, #1
 800915c:	ddc7      	ble.n	80090ee <_dtoa_r+0x7ea>
 800915e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009160:	2001      	movs	r0, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00b      	beq.n	800917e <_dtoa_r+0x87a>
 8009166:	9b08      	ldr	r3, [sp, #32]
 8009168:	9a08      	ldr	r2, [sp, #32]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	930f      	str	r3, [sp, #60]	; 0x3c
 800916e:	3303      	adds	r3, #3
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	18d3      	adds	r3, r2, r3
 8009174:	6858      	ldr	r0, [r3, #4]
 8009176:	f000 fa5b 	bl	8009630 <__hi0bits>
 800917a:	2320      	movs	r3, #32
 800917c:	1a18      	subs	r0, r3, r0
 800917e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009180:	18c0      	adds	r0, r0, r3
 8009182:	231f      	movs	r3, #31
 8009184:	4018      	ands	r0, r3
 8009186:	d100      	bne.n	800918a <_dtoa_r+0x886>
 8009188:	e0ab      	b.n	80092e2 <_dtoa_r+0x9de>
 800918a:	3301      	adds	r3, #1
 800918c:	1a1b      	subs	r3, r3, r0
 800918e:	2b04      	cmp	r3, #4
 8009190:	dc00      	bgt.n	8009194 <_dtoa_r+0x890>
 8009192:	e09b      	b.n	80092cc <_dtoa_r+0x9c8>
 8009194:	231c      	movs	r3, #28
 8009196:	1a18      	subs	r0, r3, r0
 8009198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800919a:	1824      	adds	r4, r4, r0
 800919c:	181b      	adds	r3, r3, r0
 800919e:	930b      	str	r3, [sp, #44]	; 0x2c
 80091a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091a2:	181b      	adds	r3, r3, r0
 80091a4:	930c      	str	r3, [sp, #48]	; 0x30
 80091a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dd05      	ble.n	80091b8 <_dtoa_r+0x8b4>
 80091ac:	001a      	movs	r2, r3
 80091ae:	9905      	ldr	r1, [sp, #20]
 80091b0:	9804      	ldr	r0, [sp, #16]
 80091b2:	f000 fb71 	bl	8009898 <__lshift>
 80091b6:	9005      	str	r0, [sp, #20]
 80091b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd05      	ble.n	80091ca <_dtoa_r+0x8c6>
 80091be:	001a      	movs	r2, r3
 80091c0:	9908      	ldr	r1, [sp, #32]
 80091c2:	9804      	ldr	r0, [sp, #16]
 80091c4:	f000 fb68 	bl	8009898 <__lshift>
 80091c8:	9008      	str	r0, [sp, #32]
 80091ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d100      	bne.n	80091d2 <_dtoa_r+0x8ce>
 80091d0:	e089      	b.n	80092e6 <_dtoa_r+0x9e2>
 80091d2:	9908      	ldr	r1, [sp, #32]
 80091d4:	9805      	ldr	r0, [sp, #20]
 80091d6:	f000 fbb0 	bl	800993a <__mcmp>
 80091da:	2800      	cmp	r0, #0
 80091dc:	db00      	blt.n	80091e0 <_dtoa_r+0x8dc>
 80091de:	e082      	b.n	80092e6 <_dtoa_r+0x9e2>
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	220a      	movs	r2, #10
 80091e4:	3b01      	subs	r3, #1
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	9905      	ldr	r1, [sp, #20]
 80091ea:	2300      	movs	r3, #0
 80091ec:	9804      	ldr	r0, [sp, #16]
 80091ee:	f000 f9e3 	bl	80095b8 <__multadd>
 80091f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091f4:	9005      	str	r0, [sp, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d100      	bne.n	80091fc <_dtoa_r+0x8f8>
 80091fa:	e15d      	b.n	80094b8 <_dtoa_r+0xbb4>
 80091fc:	2300      	movs	r3, #0
 80091fe:	0031      	movs	r1, r6
 8009200:	220a      	movs	r2, #10
 8009202:	9804      	ldr	r0, [sp, #16]
 8009204:	f000 f9d8 	bl	80095b8 <__multadd>
 8009208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800920a:	0006      	movs	r6, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	dc02      	bgt.n	8009216 <_dtoa_r+0x912>
 8009210:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009212:	2b02      	cmp	r3, #2
 8009214:	dc6d      	bgt.n	80092f2 <_dtoa_r+0x9ee>
 8009216:	2c00      	cmp	r4, #0
 8009218:	dd05      	ble.n	8009226 <_dtoa_r+0x922>
 800921a:	0031      	movs	r1, r6
 800921c:	0022      	movs	r2, r4
 800921e:	9804      	ldr	r0, [sp, #16]
 8009220:	f000 fb3a 	bl	8009898 <__lshift>
 8009224:	0006      	movs	r6, r0
 8009226:	0030      	movs	r0, r6
 8009228:	2d00      	cmp	r5, #0
 800922a:	d011      	beq.n	8009250 <_dtoa_r+0x94c>
 800922c:	6871      	ldr	r1, [r6, #4]
 800922e:	9804      	ldr	r0, [sp, #16]
 8009230:	f000 f971 	bl	8009516 <_Balloc>
 8009234:	0031      	movs	r1, r6
 8009236:	0004      	movs	r4, r0
 8009238:	6933      	ldr	r3, [r6, #16]
 800923a:	310c      	adds	r1, #12
 800923c:	1c9a      	adds	r2, r3, #2
 800923e:	0092      	lsls	r2, r2, #2
 8009240:	300c      	adds	r0, #12
 8009242:	f7fe fe35 	bl	8007eb0 <memcpy>
 8009246:	2201      	movs	r2, #1
 8009248:	0021      	movs	r1, r4
 800924a:	9804      	ldr	r0, [sp, #16]
 800924c:	f000 fb24 	bl	8009898 <__lshift>
 8009250:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009254:	3f01      	subs	r7, #1
 8009256:	930b      	str	r3, [sp, #44]	; 0x2c
 8009258:	19db      	adds	r3, r3, r7
 800925a:	0037      	movs	r7, r6
 800925c:	0006      	movs	r6, r0
 800925e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009260:	9908      	ldr	r1, [sp, #32]
 8009262:	9805      	ldr	r0, [sp, #20]
 8009264:	f7ff faca 	bl	80087fc <quorem>
 8009268:	0039      	movs	r1, r7
 800926a:	900d      	str	r0, [sp, #52]	; 0x34
 800926c:	0004      	movs	r4, r0
 800926e:	9805      	ldr	r0, [sp, #20]
 8009270:	f000 fb63 	bl	800993a <__mcmp>
 8009274:	0032      	movs	r2, r6
 8009276:	900e      	str	r0, [sp, #56]	; 0x38
 8009278:	9908      	ldr	r1, [sp, #32]
 800927a:	9804      	ldr	r0, [sp, #16]
 800927c:	f000 fb76 	bl	800996c <__mdiff>
 8009280:	2301      	movs	r3, #1
 8009282:	930c      	str	r3, [sp, #48]	; 0x30
 8009284:	68c3      	ldr	r3, [r0, #12]
 8009286:	3430      	adds	r4, #48	; 0x30
 8009288:	0005      	movs	r5, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d104      	bne.n	8009298 <_dtoa_r+0x994>
 800928e:	0001      	movs	r1, r0
 8009290:	9805      	ldr	r0, [sp, #20]
 8009292:	f000 fb52 	bl	800993a <__mcmp>
 8009296:	900c      	str	r0, [sp, #48]	; 0x30
 8009298:	0029      	movs	r1, r5
 800929a:	9804      	ldr	r0, [sp, #16]
 800929c:	f000 f973 	bl	8009586 <_Bfree>
 80092a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80092a4:	4313      	orrs	r3, r2
 80092a6:	d000      	beq.n	80092aa <_dtoa_r+0x9a6>
 80092a8:	e089      	b.n	80093be <_dtoa_r+0xaba>
 80092aa:	9a06      	ldr	r2, [sp, #24]
 80092ac:	3301      	adds	r3, #1
 80092ae:	4213      	tst	r3, r2
 80092b0:	d000      	beq.n	80092b4 <_dtoa_r+0x9b0>
 80092b2:	e084      	b.n	80093be <_dtoa_r+0xaba>
 80092b4:	2c39      	cmp	r4, #57	; 0x39
 80092b6:	d100      	bne.n	80092ba <_dtoa_r+0x9b6>
 80092b8:	e0a3      	b.n	8009402 <_dtoa_r+0xafe>
 80092ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092bc:	2b00      	cmp	r3, #0
 80092be:	dd01      	ble.n	80092c4 <_dtoa_r+0x9c0>
 80092c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80092c2:	3431      	adds	r4, #49	; 0x31
 80092c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092c6:	1c5d      	adds	r5, r3, #1
 80092c8:	701c      	strb	r4, [r3, #0]
 80092ca:	e027      	b.n	800931c <_dtoa_r+0xa18>
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d100      	bne.n	80092d2 <_dtoa_r+0x9ce>
 80092d0:	e769      	b.n	80091a6 <_dtoa_r+0x8a2>
 80092d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092d4:	331c      	adds	r3, #28
 80092d6:	18d2      	adds	r2, r2, r3
 80092d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80092da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092dc:	18e4      	adds	r4, r4, r3
 80092de:	18d3      	adds	r3, r2, r3
 80092e0:	e760      	b.n	80091a4 <_dtoa_r+0x8a0>
 80092e2:	0003      	movs	r3, r0
 80092e4:	e7f5      	b.n	80092d2 <_dtoa_r+0x9ce>
 80092e6:	2f00      	cmp	r7, #0
 80092e8:	dc3c      	bgt.n	8009364 <_dtoa_r+0xa60>
 80092ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	dd39      	ble.n	8009364 <_dtoa_r+0xa60>
 80092f0:	970d      	str	r7, [sp, #52]	; 0x34
 80092f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10c      	bne.n	8009312 <_dtoa_r+0xa0e>
 80092f8:	9908      	ldr	r1, [sp, #32]
 80092fa:	2205      	movs	r2, #5
 80092fc:	9804      	ldr	r0, [sp, #16]
 80092fe:	f000 f95b 	bl	80095b8 <__multadd>
 8009302:	9008      	str	r0, [sp, #32]
 8009304:	0001      	movs	r1, r0
 8009306:	9805      	ldr	r0, [sp, #20]
 8009308:	f000 fb17 	bl	800993a <__mcmp>
 800930c:	2800      	cmp	r0, #0
 800930e:	dd00      	ble.n	8009312 <_dtoa_r+0xa0e>
 8009310:	e55a      	b.n	8008dc8 <_dtoa_r+0x4c4>
 8009312:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009314:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009316:	43db      	mvns	r3, r3
 8009318:	9303      	str	r3, [sp, #12]
 800931a:	2700      	movs	r7, #0
 800931c:	9908      	ldr	r1, [sp, #32]
 800931e:	9804      	ldr	r0, [sp, #16]
 8009320:	f000 f931 	bl	8009586 <_Bfree>
 8009324:	2e00      	cmp	r6, #0
 8009326:	d100      	bne.n	800932a <_dtoa_r+0xa26>
 8009328:	e63f      	b.n	8008faa <_dtoa_r+0x6a6>
 800932a:	2f00      	cmp	r7, #0
 800932c:	d005      	beq.n	800933a <_dtoa_r+0xa36>
 800932e:	42b7      	cmp	r7, r6
 8009330:	d003      	beq.n	800933a <_dtoa_r+0xa36>
 8009332:	0039      	movs	r1, r7
 8009334:	9804      	ldr	r0, [sp, #16]
 8009336:	f000 f926 	bl	8009586 <_Bfree>
 800933a:	0031      	movs	r1, r6
 800933c:	9804      	ldr	r0, [sp, #16]
 800933e:	f000 f922 	bl	8009586 <_Bfree>
 8009342:	e632      	b.n	8008faa <_dtoa_r+0x6a6>
 8009344:	9508      	str	r5, [sp, #32]
 8009346:	002e      	movs	r6, r5
 8009348:	e7e3      	b.n	8009312 <_dtoa_r+0xa0e>
 800934a:	2300      	movs	r3, #0
 800934c:	9308      	str	r3, [sp, #32]
 800934e:	001e      	movs	r6, r3
 8009350:	e7df      	b.n	8009312 <_dtoa_r+0xa0e>
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	40240000 	.word	0x40240000
 8009358:	00000433 	.word	0x00000433
 800935c:	9603      	str	r6, [sp, #12]
 800935e:	9508      	str	r5, [sp, #32]
 8009360:	002e      	movs	r6, r5
 8009362:	e531      	b.n	8008dc8 <_dtoa_r+0x4c4>
 8009364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009366:	970d      	str	r7, [sp, #52]	; 0x34
 8009368:	2b00      	cmp	r3, #0
 800936a:	d000      	beq.n	800936e <_dtoa_r+0xa6a>
 800936c:	e753      	b.n	8009216 <_dtoa_r+0x912>
 800936e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009370:	9908      	ldr	r1, [sp, #32]
 8009372:	9805      	ldr	r0, [sp, #20]
 8009374:	f7ff fa42 	bl	80087fc <quorem>
 8009378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800937a:	3030      	adds	r0, #48	; 0x30
 800937c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800937e:	7028      	strb	r0, [r5, #0]
 8009380:	3501      	adds	r5, #1
 8009382:	0004      	movs	r4, r0
 8009384:	1aeb      	subs	r3, r5, r3
 8009386:	429a      	cmp	r2, r3
 8009388:	dc78      	bgt.n	800947c <_dtoa_r+0xb78>
 800938a:	1e15      	subs	r5, r2, #0
 800938c:	dc00      	bgt.n	8009390 <_dtoa_r+0xa8c>
 800938e:	2501      	movs	r5, #1
 8009390:	2700      	movs	r7, #0
 8009392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009394:	195d      	adds	r5, r3, r5
 8009396:	9905      	ldr	r1, [sp, #20]
 8009398:	2201      	movs	r2, #1
 800939a:	9804      	ldr	r0, [sp, #16]
 800939c:	f000 fa7c 	bl	8009898 <__lshift>
 80093a0:	9908      	ldr	r1, [sp, #32]
 80093a2:	9005      	str	r0, [sp, #20]
 80093a4:	f000 fac9 	bl	800993a <__mcmp>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	dc2f      	bgt.n	800940c <_dtoa_r+0xb08>
 80093ac:	d101      	bne.n	80093b2 <_dtoa_r+0xaae>
 80093ae:	07e3      	lsls	r3, r4, #31
 80093b0:	d42c      	bmi.n	800940c <_dtoa_r+0xb08>
 80093b2:	1e6b      	subs	r3, r5, #1
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	2a30      	cmp	r2, #48	; 0x30
 80093b8:	d1b0      	bne.n	800931c <_dtoa_r+0xa18>
 80093ba:	001d      	movs	r5, r3
 80093bc:	e7f9      	b.n	80093b2 <_dtoa_r+0xaae>
 80093be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db07      	blt.n	80093d4 <_dtoa_r+0xad0>
 80093c4:	001d      	movs	r5, r3
 80093c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093c8:	431d      	orrs	r5, r3
 80093ca:	d126      	bne.n	800941a <_dtoa_r+0xb16>
 80093cc:	2301      	movs	r3, #1
 80093ce:	9a06      	ldr	r2, [sp, #24]
 80093d0:	4213      	tst	r3, r2
 80093d2:	d122      	bne.n	800941a <_dtoa_r+0xb16>
 80093d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dc00      	bgt.n	80093dc <_dtoa_r+0xad8>
 80093da:	e773      	b.n	80092c4 <_dtoa_r+0x9c0>
 80093dc:	9905      	ldr	r1, [sp, #20]
 80093de:	2201      	movs	r2, #1
 80093e0:	9804      	ldr	r0, [sp, #16]
 80093e2:	f000 fa59 	bl	8009898 <__lshift>
 80093e6:	9908      	ldr	r1, [sp, #32]
 80093e8:	9005      	str	r0, [sp, #20]
 80093ea:	f000 faa6 	bl	800993a <__mcmp>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	dc04      	bgt.n	80093fc <_dtoa_r+0xaf8>
 80093f2:	d000      	beq.n	80093f6 <_dtoa_r+0xaf2>
 80093f4:	e766      	b.n	80092c4 <_dtoa_r+0x9c0>
 80093f6:	07e3      	lsls	r3, r4, #31
 80093f8:	d400      	bmi.n	80093fc <_dtoa_r+0xaf8>
 80093fa:	e763      	b.n	80092c4 <_dtoa_r+0x9c0>
 80093fc:	2c39      	cmp	r4, #57	; 0x39
 80093fe:	d000      	beq.n	8009402 <_dtoa_r+0xafe>
 8009400:	e75e      	b.n	80092c0 <_dtoa_r+0x9bc>
 8009402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009406:	1c5d      	adds	r5, r3, #1
 8009408:	2339      	movs	r3, #57	; 0x39
 800940a:	7013      	strb	r3, [r2, #0]
 800940c:	1e6b      	subs	r3, r5, #1
 800940e:	781a      	ldrb	r2, [r3, #0]
 8009410:	2a39      	cmp	r2, #57	; 0x39
 8009412:	d03b      	beq.n	800948c <_dtoa_r+0xb88>
 8009414:	3201      	adds	r2, #1
 8009416:	701a      	strb	r2, [r3, #0]
 8009418:	e780      	b.n	800931c <_dtoa_r+0xa18>
 800941a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941c:	3301      	adds	r3, #1
 800941e:	930d      	str	r3, [sp, #52]	; 0x34
 8009420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009422:	2b00      	cmp	r3, #0
 8009424:	dd05      	ble.n	8009432 <_dtoa_r+0xb2e>
 8009426:	2c39      	cmp	r4, #57	; 0x39
 8009428:	d0eb      	beq.n	8009402 <_dtoa_r+0xafe>
 800942a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800942c:	3401      	adds	r4, #1
 800942e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009430:	e74a      	b.n	80092c8 <_dtoa_r+0x9c4>
 8009432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009434:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009436:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009438:	701c      	strb	r4, [r3, #0]
 800943a:	4293      	cmp	r3, r2
 800943c:	d0ab      	beq.n	8009396 <_dtoa_r+0xa92>
 800943e:	2300      	movs	r3, #0
 8009440:	220a      	movs	r2, #10
 8009442:	9905      	ldr	r1, [sp, #20]
 8009444:	9804      	ldr	r0, [sp, #16]
 8009446:	f000 f8b7 	bl	80095b8 <__multadd>
 800944a:	2300      	movs	r3, #0
 800944c:	9005      	str	r0, [sp, #20]
 800944e:	220a      	movs	r2, #10
 8009450:	0039      	movs	r1, r7
 8009452:	9804      	ldr	r0, [sp, #16]
 8009454:	42b7      	cmp	r7, r6
 8009456:	d106      	bne.n	8009466 <_dtoa_r+0xb62>
 8009458:	f000 f8ae 	bl	80095b8 <__multadd>
 800945c:	0007      	movs	r7, r0
 800945e:	0006      	movs	r6, r0
 8009460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009462:	930b      	str	r3, [sp, #44]	; 0x2c
 8009464:	e6fc      	b.n	8009260 <_dtoa_r+0x95c>
 8009466:	f000 f8a7 	bl	80095b8 <__multadd>
 800946a:	0031      	movs	r1, r6
 800946c:	0007      	movs	r7, r0
 800946e:	2300      	movs	r3, #0
 8009470:	220a      	movs	r2, #10
 8009472:	9804      	ldr	r0, [sp, #16]
 8009474:	f000 f8a0 	bl	80095b8 <__multadd>
 8009478:	0006      	movs	r6, r0
 800947a:	e7f1      	b.n	8009460 <_dtoa_r+0xb5c>
 800947c:	2300      	movs	r3, #0
 800947e:	220a      	movs	r2, #10
 8009480:	9905      	ldr	r1, [sp, #20]
 8009482:	9804      	ldr	r0, [sp, #16]
 8009484:	f000 f898 	bl	80095b8 <__multadd>
 8009488:	9005      	str	r0, [sp, #20]
 800948a:	e771      	b.n	8009370 <_dtoa_r+0xa6c>
 800948c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800948e:	429a      	cmp	r2, r3
 8009490:	d105      	bne.n	800949e <_dtoa_r+0xb9a>
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	9303      	str	r3, [sp, #12]
 8009498:	2331      	movs	r3, #49	; 0x31
 800949a:	7013      	strb	r3, [r2, #0]
 800949c:	e73e      	b.n	800931c <_dtoa_r+0xa18>
 800949e:	001d      	movs	r5, r3
 80094a0:	e7b4      	b.n	800940c <_dtoa_r+0xb08>
 80094a2:	4b0a      	ldr	r3, [pc, #40]	; (80094cc <_dtoa_r+0xbc8>)
 80094a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094a6:	930a      	str	r3, [sp, #40]	; 0x28
 80094a8:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <_dtoa_r+0xbcc>)
 80094aa:	2a00      	cmp	r2, #0
 80094ac:	d001      	beq.n	80094b2 <_dtoa_r+0xbae>
 80094ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094b4:	b01d      	add	sp, #116	; 0x74
 80094b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	dd00      	ble.n	80094c0 <_dtoa_r+0xbbc>
 80094be:	e756      	b.n	800936e <_dtoa_r+0xa6a>
 80094c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	dc00      	bgt.n	80094c8 <_dtoa_r+0xbc4>
 80094c6:	e752      	b.n	800936e <_dtoa_r+0xa6a>
 80094c8:	e713      	b.n	80092f2 <_dtoa_r+0x9ee>
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	0800a778 	.word	0x0800a778
 80094d0:	0800a780 	.word	0x0800a780

080094d4 <_localeconv_r>:
 80094d4:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <_localeconv_r+0x10>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6a18      	ldr	r0, [r3, #32]
 80094da:	2800      	cmp	r0, #0
 80094dc:	d100      	bne.n	80094e0 <_localeconv_r+0xc>
 80094de:	4802      	ldr	r0, [pc, #8]	; (80094e8 <_localeconv_r+0x14>)
 80094e0:	30f0      	adds	r0, #240	; 0xf0
 80094e2:	4770      	bx	lr
 80094e4:	20000054 	.word	0x20000054
 80094e8:	200000b8 	.word	0x200000b8

080094ec <malloc>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	4b03      	ldr	r3, [pc, #12]	; (80094fc <malloc+0x10>)
 80094f0:	0001      	movs	r1, r0
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	f000 fb4a 	bl	8009b8c <_malloc_r>
 80094f8:	bd10      	pop	{r4, pc}
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	20000054 	.word	0x20000054

08009500 <memchr>:
 8009500:	b2c9      	uxtb	r1, r1
 8009502:	1882      	adds	r2, r0, r2
 8009504:	4290      	cmp	r0, r2
 8009506:	d101      	bne.n	800950c <memchr+0xc>
 8009508:	2000      	movs	r0, #0
 800950a:	4770      	bx	lr
 800950c:	7803      	ldrb	r3, [r0, #0]
 800950e:	428b      	cmp	r3, r1
 8009510:	d0fb      	beq.n	800950a <memchr+0xa>
 8009512:	3001      	adds	r0, #1
 8009514:	e7f6      	b.n	8009504 <memchr+0x4>

08009516 <_Balloc>:
 8009516:	b570      	push	{r4, r5, r6, lr}
 8009518:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800951a:	0004      	movs	r4, r0
 800951c:	000d      	movs	r5, r1
 800951e:	2e00      	cmp	r6, #0
 8009520:	d107      	bne.n	8009532 <_Balloc+0x1c>
 8009522:	2010      	movs	r0, #16
 8009524:	f7ff ffe2 	bl	80094ec <malloc>
 8009528:	6260      	str	r0, [r4, #36]	; 0x24
 800952a:	6046      	str	r6, [r0, #4]
 800952c:	6086      	str	r6, [r0, #8]
 800952e:	6006      	str	r6, [r0, #0]
 8009530:	60c6      	str	r6, [r0, #12]
 8009532:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009534:	68f3      	ldr	r3, [r6, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d013      	beq.n	8009562 <_Balloc+0x4c>
 800953a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800953c:	00aa      	lsls	r2, r5, #2
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	189b      	adds	r3, r3, r2
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	2800      	cmp	r0, #0
 8009546:	d118      	bne.n	800957a <_Balloc+0x64>
 8009548:	2101      	movs	r1, #1
 800954a:	000e      	movs	r6, r1
 800954c:	40ae      	lsls	r6, r5
 800954e:	1d72      	adds	r2, r6, #5
 8009550:	0092      	lsls	r2, r2, #2
 8009552:	0020      	movs	r0, r4
 8009554:	f000 fac2 	bl	8009adc <_calloc_r>
 8009558:	2800      	cmp	r0, #0
 800955a:	d00c      	beq.n	8009576 <_Balloc+0x60>
 800955c:	6045      	str	r5, [r0, #4]
 800955e:	6086      	str	r6, [r0, #8]
 8009560:	e00d      	b.n	800957e <_Balloc+0x68>
 8009562:	2221      	movs	r2, #33	; 0x21
 8009564:	2104      	movs	r1, #4
 8009566:	0020      	movs	r0, r4
 8009568:	f000 fab8 	bl	8009adc <_calloc_r>
 800956c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800956e:	60f0      	str	r0, [r6, #12]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e1      	bne.n	800953a <_Balloc+0x24>
 8009576:	2000      	movs	r0, #0
 8009578:	bd70      	pop	{r4, r5, r6, pc}
 800957a:	6802      	ldr	r2, [r0, #0]
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	2300      	movs	r3, #0
 8009580:	6103      	str	r3, [r0, #16]
 8009582:	60c3      	str	r3, [r0, #12]
 8009584:	e7f8      	b.n	8009578 <_Balloc+0x62>

08009586 <_Bfree>:
 8009586:	b570      	push	{r4, r5, r6, lr}
 8009588:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800958a:	0006      	movs	r6, r0
 800958c:	000d      	movs	r5, r1
 800958e:	2c00      	cmp	r4, #0
 8009590:	d107      	bne.n	80095a2 <_Bfree+0x1c>
 8009592:	2010      	movs	r0, #16
 8009594:	f7ff ffaa 	bl	80094ec <malloc>
 8009598:	6270      	str	r0, [r6, #36]	; 0x24
 800959a:	6044      	str	r4, [r0, #4]
 800959c:	6084      	str	r4, [r0, #8]
 800959e:	6004      	str	r4, [r0, #0]
 80095a0:	60c4      	str	r4, [r0, #12]
 80095a2:	2d00      	cmp	r5, #0
 80095a4:	d007      	beq.n	80095b6 <_Bfree+0x30>
 80095a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80095a8:	686a      	ldr	r2, [r5, #4]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	0092      	lsls	r2, r2, #2
 80095ae:	189b      	adds	r3, r3, r2
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	602a      	str	r2, [r5, #0]
 80095b4:	601d      	str	r5, [r3, #0]
 80095b6:	bd70      	pop	{r4, r5, r6, pc}

080095b8 <__multadd>:
 80095b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ba:	001e      	movs	r6, r3
 80095bc:	2314      	movs	r3, #20
 80095be:	469c      	mov	ip, r3
 80095c0:	0007      	movs	r7, r0
 80095c2:	000c      	movs	r4, r1
 80095c4:	2000      	movs	r0, #0
 80095c6:	690d      	ldr	r5, [r1, #16]
 80095c8:	448c      	add	ip, r1
 80095ca:	4663      	mov	r3, ip
 80095cc:	8819      	ldrh	r1, [r3, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4351      	muls	r1, r2
 80095d2:	0c1b      	lsrs	r3, r3, #16
 80095d4:	4353      	muls	r3, r2
 80095d6:	1989      	adds	r1, r1, r6
 80095d8:	0c0e      	lsrs	r6, r1, #16
 80095da:	199b      	adds	r3, r3, r6
 80095dc:	b289      	uxth	r1, r1
 80095de:	0c1e      	lsrs	r6, r3, #16
 80095e0:	041b      	lsls	r3, r3, #16
 80095e2:	185b      	adds	r3, r3, r1
 80095e4:	4661      	mov	r1, ip
 80095e6:	3001      	adds	r0, #1
 80095e8:	c108      	stmia	r1!, {r3}
 80095ea:	468c      	mov	ip, r1
 80095ec:	4285      	cmp	r5, r0
 80095ee:	dcec      	bgt.n	80095ca <__multadd+0x12>
 80095f0:	2e00      	cmp	r6, #0
 80095f2:	d01b      	beq.n	800962c <__multadd+0x74>
 80095f4:	68a3      	ldr	r3, [r4, #8]
 80095f6:	429d      	cmp	r5, r3
 80095f8:	db12      	blt.n	8009620 <__multadd+0x68>
 80095fa:	6863      	ldr	r3, [r4, #4]
 80095fc:	0038      	movs	r0, r7
 80095fe:	1c59      	adds	r1, r3, #1
 8009600:	f7ff ff89 	bl	8009516 <_Balloc>
 8009604:	0021      	movs	r1, r4
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	9001      	str	r0, [sp, #4]
 800960a:	1c9a      	adds	r2, r3, #2
 800960c:	0092      	lsls	r2, r2, #2
 800960e:	310c      	adds	r1, #12
 8009610:	300c      	adds	r0, #12
 8009612:	f7fe fc4d 	bl	8007eb0 <memcpy>
 8009616:	0021      	movs	r1, r4
 8009618:	0038      	movs	r0, r7
 800961a:	f7ff ffb4 	bl	8009586 <_Bfree>
 800961e:	9c01      	ldr	r4, [sp, #4]
 8009620:	1d2b      	adds	r3, r5, #4
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	18e3      	adds	r3, r4, r3
 8009626:	3501      	adds	r5, #1
 8009628:	605e      	str	r6, [r3, #4]
 800962a:	6125      	str	r5, [r4, #16]
 800962c:	0020      	movs	r0, r4
 800962e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08009630 <__hi0bits>:
 8009630:	0003      	movs	r3, r0
 8009632:	0c02      	lsrs	r2, r0, #16
 8009634:	2000      	movs	r0, #0
 8009636:	4282      	cmp	r2, r0
 8009638:	d101      	bne.n	800963e <__hi0bits+0xe>
 800963a:	041b      	lsls	r3, r3, #16
 800963c:	3010      	adds	r0, #16
 800963e:	0e1a      	lsrs	r2, r3, #24
 8009640:	d101      	bne.n	8009646 <__hi0bits+0x16>
 8009642:	3008      	adds	r0, #8
 8009644:	021b      	lsls	r3, r3, #8
 8009646:	0f1a      	lsrs	r2, r3, #28
 8009648:	d101      	bne.n	800964e <__hi0bits+0x1e>
 800964a:	3004      	adds	r0, #4
 800964c:	011b      	lsls	r3, r3, #4
 800964e:	0f9a      	lsrs	r2, r3, #30
 8009650:	d101      	bne.n	8009656 <__hi0bits+0x26>
 8009652:	3002      	adds	r0, #2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	2b00      	cmp	r3, #0
 8009658:	db03      	blt.n	8009662 <__hi0bits+0x32>
 800965a:	3001      	adds	r0, #1
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	d400      	bmi.n	8009662 <__hi0bits+0x32>
 8009660:	2020      	movs	r0, #32
 8009662:	4770      	bx	lr

08009664 <__lo0bits>:
 8009664:	2207      	movs	r2, #7
 8009666:	6803      	ldr	r3, [r0, #0]
 8009668:	b510      	push	{r4, lr}
 800966a:	0001      	movs	r1, r0
 800966c:	401a      	ands	r2, r3
 800966e:	d00d      	beq.n	800968c <__lo0bits+0x28>
 8009670:	2401      	movs	r4, #1
 8009672:	2000      	movs	r0, #0
 8009674:	4223      	tst	r3, r4
 8009676:	d105      	bne.n	8009684 <__lo0bits+0x20>
 8009678:	3002      	adds	r0, #2
 800967a:	4203      	tst	r3, r0
 800967c:	d003      	beq.n	8009686 <__lo0bits+0x22>
 800967e:	40e3      	lsrs	r3, r4
 8009680:	0020      	movs	r0, r4
 8009682:	600b      	str	r3, [r1, #0]
 8009684:	bd10      	pop	{r4, pc}
 8009686:	089b      	lsrs	r3, r3, #2
 8009688:	600b      	str	r3, [r1, #0]
 800968a:	e7fb      	b.n	8009684 <__lo0bits+0x20>
 800968c:	b29c      	uxth	r4, r3
 800968e:	0010      	movs	r0, r2
 8009690:	2c00      	cmp	r4, #0
 8009692:	d101      	bne.n	8009698 <__lo0bits+0x34>
 8009694:	2010      	movs	r0, #16
 8009696:	0c1b      	lsrs	r3, r3, #16
 8009698:	b2da      	uxtb	r2, r3
 800969a:	2a00      	cmp	r2, #0
 800969c:	d101      	bne.n	80096a2 <__lo0bits+0x3e>
 800969e:	3008      	adds	r0, #8
 80096a0:	0a1b      	lsrs	r3, r3, #8
 80096a2:	071a      	lsls	r2, r3, #28
 80096a4:	d101      	bne.n	80096aa <__lo0bits+0x46>
 80096a6:	3004      	adds	r0, #4
 80096a8:	091b      	lsrs	r3, r3, #4
 80096aa:	079a      	lsls	r2, r3, #30
 80096ac:	d101      	bne.n	80096b2 <__lo0bits+0x4e>
 80096ae:	3002      	adds	r0, #2
 80096b0:	089b      	lsrs	r3, r3, #2
 80096b2:	07da      	lsls	r2, r3, #31
 80096b4:	d4e8      	bmi.n	8009688 <__lo0bits+0x24>
 80096b6:	085b      	lsrs	r3, r3, #1
 80096b8:	d001      	beq.n	80096be <__lo0bits+0x5a>
 80096ba:	3001      	adds	r0, #1
 80096bc:	e7e4      	b.n	8009688 <__lo0bits+0x24>
 80096be:	2020      	movs	r0, #32
 80096c0:	e7e0      	b.n	8009684 <__lo0bits+0x20>

080096c2 <__i2b>:
 80096c2:	b510      	push	{r4, lr}
 80096c4:	000c      	movs	r4, r1
 80096c6:	2101      	movs	r1, #1
 80096c8:	f7ff ff25 	bl	8009516 <_Balloc>
 80096cc:	2301      	movs	r3, #1
 80096ce:	6144      	str	r4, [r0, #20]
 80096d0:	6103      	str	r3, [r0, #16]
 80096d2:	bd10      	pop	{r4, pc}

080096d4 <__multiply>:
 80096d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096d6:	690b      	ldr	r3, [r1, #16]
 80096d8:	0015      	movs	r5, r2
 80096da:	6912      	ldr	r2, [r2, #16]
 80096dc:	b089      	sub	sp, #36	; 0x24
 80096de:	000c      	movs	r4, r1
 80096e0:	4293      	cmp	r3, r2
 80096e2:	da01      	bge.n	80096e8 <__multiply+0x14>
 80096e4:	002c      	movs	r4, r5
 80096e6:	000d      	movs	r5, r1
 80096e8:	6927      	ldr	r7, [r4, #16]
 80096ea:	692e      	ldr	r6, [r5, #16]
 80096ec:	68a2      	ldr	r2, [r4, #8]
 80096ee:	19bb      	adds	r3, r7, r6
 80096f0:	6861      	ldr	r1, [r4, #4]
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	4293      	cmp	r3, r2
 80096f6:	dd00      	ble.n	80096fa <__multiply+0x26>
 80096f8:	3101      	adds	r1, #1
 80096fa:	f7ff ff0c 	bl	8009516 <_Balloc>
 80096fe:	0003      	movs	r3, r0
 8009700:	3314      	adds	r3, #20
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	9a00      	ldr	r2, [sp, #0]
 8009706:	19bb      	adds	r3, r7, r6
 8009708:	4694      	mov	ip, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	449c      	add	ip, r3
 800970e:	0013      	movs	r3, r2
 8009710:	2200      	movs	r2, #0
 8009712:	9004      	str	r0, [sp, #16]
 8009714:	4563      	cmp	r3, ip
 8009716:	d31c      	bcc.n	8009752 <__multiply+0x7e>
 8009718:	002a      	movs	r2, r5
 800971a:	3414      	adds	r4, #20
 800971c:	00bf      	lsls	r7, r7, #2
 800971e:	19e3      	adds	r3, r4, r7
 8009720:	3214      	adds	r2, #20
 8009722:	00b6      	lsls	r6, r6, #2
 8009724:	9305      	str	r3, [sp, #20]
 8009726:	1993      	adds	r3, r2, r6
 8009728:	9402      	str	r4, [sp, #8]
 800972a:	9306      	str	r3, [sp, #24]
 800972c:	9b06      	ldr	r3, [sp, #24]
 800972e:	429a      	cmp	r2, r3
 8009730:	d311      	bcc.n	8009756 <__multiply+0x82>
 8009732:	9b01      	ldr	r3, [sp, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	dd06      	ble.n	8009746 <__multiply+0x72>
 8009738:	2304      	movs	r3, #4
 800973a:	425b      	negs	r3, r3
 800973c:	449c      	add	ip, r3
 800973e:	4663      	mov	r3, ip
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d051      	beq.n	80097ea <__multiply+0x116>
 8009746:	9b04      	ldr	r3, [sp, #16]
 8009748:	9a01      	ldr	r2, [sp, #4]
 800974a:	0018      	movs	r0, r3
 800974c:	611a      	str	r2, [r3, #16]
 800974e:	b009      	add	sp, #36	; 0x24
 8009750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009752:	c304      	stmia	r3!, {r2}
 8009754:	e7de      	b.n	8009714 <__multiply+0x40>
 8009756:	8814      	ldrh	r4, [r2, #0]
 8009758:	2c00      	cmp	r4, #0
 800975a:	d01e      	beq.n	800979a <__multiply+0xc6>
 800975c:	2600      	movs	r6, #0
 800975e:	9d00      	ldr	r5, [sp, #0]
 8009760:	9f02      	ldr	r7, [sp, #8]
 8009762:	cf01      	ldmia	r7!, {r0}
 8009764:	9507      	str	r5, [sp, #28]
 8009766:	cd08      	ldmia	r5!, {r3}
 8009768:	9303      	str	r3, [sp, #12]
 800976a:	b283      	uxth	r3, r0
 800976c:	4363      	muls	r3, r4
 800976e:	0019      	movs	r1, r3
 8009770:	466b      	mov	r3, sp
 8009772:	0c00      	lsrs	r0, r0, #16
 8009774:	899b      	ldrh	r3, [r3, #12]
 8009776:	4360      	muls	r0, r4
 8009778:	18cb      	adds	r3, r1, r3
 800977a:	9903      	ldr	r1, [sp, #12]
 800977c:	199b      	adds	r3, r3, r6
 800977e:	0c09      	lsrs	r1, r1, #16
 8009780:	1841      	adds	r1, r0, r1
 8009782:	0c18      	lsrs	r0, r3, #16
 8009784:	1809      	adds	r1, r1, r0
 8009786:	0c0e      	lsrs	r6, r1, #16
 8009788:	b29b      	uxth	r3, r3
 800978a:	0409      	lsls	r1, r1, #16
 800978c:	430b      	orrs	r3, r1
 800978e:	9907      	ldr	r1, [sp, #28]
 8009790:	600b      	str	r3, [r1, #0]
 8009792:	9b05      	ldr	r3, [sp, #20]
 8009794:	42bb      	cmp	r3, r7
 8009796:	d8e4      	bhi.n	8009762 <__multiply+0x8e>
 8009798:	602e      	str	r6, [r5, #0]
 800979a:	6813      	ldr	r3, [r2, #0]
 800979c:	0c1b      	lsrs	r3, r3, #16
 800979e:	9303      	str	r3, [sp, #12]
 80097a0:	d01e      	beq.n	80097e0 <__multiply+0x10c>
 80097a2:	2600      	movs	r6, #0
 80097a4:	9b00      	ldr	r3, [sp, #0]
 80097a6:	9c02      	ldr	r4, [sp, #8]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	9800      	ldr	r0, [sp, #0]
 80097ac:	0007      	movs	r7, r0
 80097ae:	8821      	ldrh	r1, [r4, #0]
 80097b0:	9d03      	ldr	r5, [sp, #12]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	4369      	muls	r1, r5
 80097b6:	c820      	ldmia	r0!, {r5}
 80097b8:	0c2d      	lsrs	r5, r5, #16
 80097ba:	1949      	adds	r1, r1, r5
 80097bc:	198e      	adds	r6, r1, r6
 80097be:	0431      	lsls	r1, r6, #16
 80097c0:	430b      	orrs	r3, r1
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	cc08      	ldmia	r4!, {r3}
 80097c6:	9903      	ldr	r1, [sp, #12]
 80097c8:	0c1b      	lsrs	r3, r3, #16
 80097ca:	434b      	muls	r3, r1
 80097cc:	6879      	ldr	r1, [r7, #4]
 80097ce:	0c36      	lsrs	r6, r6, #16
 80097d0:	b289      	uxth	r1, r1
 80097d2:	185b      	adds	r3, r3, r1
 80097d4:	9905      	ldr	r1, [sp, #20]
 80097d6:	199b      	adds	r3, r3, r6
 80097d8:	0c1e      	lsrs	r6, r3, #16
 80097da:	42a1      	cmp	r1, r4
 80097dc:	d8e6      	bhi.n	80097ac <__multiply+0xd8>
 80097de:	6003      	str	r3, [r0, #0]
 80097e0:	9b00      	ldr	r3, [sp, #0]
 80097e2:	3204      	adds	r2, #4
 80097e4:	3304      	adds	r3, #4
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	e7a0      	b.n	800972c <__multiply+0x58>
 80097ea:	9b01      	ldr	r3, [sp, #4]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	e79f      	b.n	8009732 <__multiply+0x5e>
	...

080097f4 <__pow5mult>:
 80097f4:	2303      	movs	r3, #3
 80097f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097f8:	4013      	ands	r3, r2
 80097fa:	0005      	movs	r5, r0
 80097fc:	000e      	movs	r6, r1
 80097fe:	0014      	movs	r4, r2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d008      	beq.n	8009816 <__pow5mult+0x22>
 8009804:	4922      	ldr	r1, [pc, #136]	; (8009890 <__pow5mult+0x9c>)
 8009806:	3b01      	subs	r3, #1
 8009808:	009a      	lsls	r2, r3, #2
 800980a:	5852      	ldr	r2, [r2, r1]
 800980c:	2300      	movs	r3, #0
 800980e:	0031      	movs	r1, r6
 8009810:	f7ff fed2 	bl	80095b8 <__multadd>
 8009814:	0006      	movs	r6, r0
 8009816:	10a3      	asrs	r3, r4, #2
 8009818:	9301      	str	r3, [sp, #4]
 800981a:	d036      	beq.n	800988a <__pow5mult+0x96>
 800981c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800981e:	2c00      	cmp	r4, #0
 8009820:	d107      	bne.n	8009832 <__pow5mult+0x3e>
 8009822:	2010      	movs	r0, #16
 8009824:	f7ff fe62 	bl	80094ec <malloc>
 8009828:	6268      	str	r0, [r5, #36]	; 0x24
 800982a:	6044      	str	r4, [r0, #4]
 800982c:	6084      	str	r4, [r0, #8]
 800982e:	6004      	str	r4, [r0, #0]
 8009830:	60c4      	str	r4, [r0, #12]
 8009832:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8009834:	68bc      	ldr	r4, [r7, #8]
 8009836:	2c00      	cmp	r4, #0
 8009838:	d107      	bne.n	800984a <__pow5mult+0x56>
 800983a:	4916      	ldr	r1, [pc, #88]	; (8009894 <__pow5mult+0xa0>)
 800983c:	0028      	movs	r0, r5
 800983e:	f7ff ff40 	bl	80096c2 <__i2b>
 8009842:	2300      	movs	r3, #0
 8009844:	0004      	movs	r4, r0
 8009846:	60b8      	str	r0, [r7, #8]
 8009848:	6003      	str	r3, [r0, #0]
 800984a:	2201      	movs	r2, #1
 800984c:	9b01      	ldr	r3, [sp, #4]
 800984e:	4213      	tst	r3, r2
 8009850:	d00a      	beq.n	8009868 <__pow5mult+0x74>
 8009852:	0031      	movs	r1, r6
 8009854:	0022      	movs	r2, r4
 8009856:	0028      	movs	r0, r5
 8009858:	f7ff ff3c 	bl	80096d4 <__multiply>
 800985c:	0007      	movs	r7, r0
 800985e:	0031      	movs	r1, r6
 8009860:	0028      	movs	r0, r5
 8009862:	f7ff fe90 	bl	8009586 <_Bfree>
 8009866:	003e      	movs	r6, r7
 8009868:	9b01      	ldr	r3, [sp, #4]
 800986a:	105b      	asrs	r3, r3, #1
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	d00c      	beq.n	800988a <__pow5mult+0x96>
 8009870:	6820      	ldr	r0, [r4, #0]
 8009872:	2800      	cmp	r0, #0
 8009874:	d107      	bne.n	8009886 <__pow5mult+0x92>
 8009876:	0022      	movs	r2, r4
 8009878:	0021      	movs	r1, r4
 800987a:	0028      	movs	r0, r5
 800987c:	f7ff ff2a 	bl	80096d4 <__multiply>
 8009880:	2300      	movs	r3, #0
 8009882:	6020      	str	r0, [r4, #0]
 8009884:	6003      	str	r3, [r0, #0]
 8009886:	0004      	movs	r4, r0
 8009888:	e7df      	b.n	800984a <__pow5mult+0x56>
 800988a:	0030      	movs	r0, r6
 800988c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	0800a878 	.word	0x0800a878
 8009894:	00000271 	.word	0x00000271

08009898 <__lshift>:
 8009898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989a:	000d      	movs	r5, r1
 800989c:	0017      	movs	r7, r2
 800989e:	692b      	ldr	r3, [r5, #16]
 80098a0:	1154      	asrs	r4, r2, #5
 80098a2:	b085      	sub	sp, #20
 80098a4:	18e3      	adds	r3, r4, r3
 80098a6:	9302      	str	r3, [sp, #8]
 80098a8:	3301      	adds	r3, #1
 80098aa:	9301      	str	r3, [sp, #4]
 80098ac:	6849      	ldr	r1, [r1, #4]
 80098ae:	68ab      	ldr	r3, [r5, #8]
 80098b0:	9003      	str	r0, [sp, #12]
 80098b2:	9a01      	ldr	r2, [sp, #4]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	db34      	blt.n	8009922 <__lshift+0x8a>
 80098b8:	9803      	ldr	r0, [sp, #12]
 80098ba:	f7ff fe2c 	bl	8009516 <_Balloc>
 80098be:	2300      	movs	r3, #0
 80098c0:	0002      	movs	r2, r0
 80098c2:	0006      	movs	r6, r0
 80098c4:	0019      	movs	r1, r3
 80098c6:	3214      	adds	r2, #20
 80098c8:	42a3      	cmp	r3, r4
 80098ca:	db2d      	blt.n	8009928 <__lshift+0x90>
 80098cc:	43e3      	mvns	r3, r4
 80098ce:	17db      	asrs	r3, r3, #31
 80098d0:	401c      	ands	r4, r3
 80098d2:	002b      	movs	r3, r5
 80098d4:	211f      	movs	r1, #31
 80098d6:	00a4      	lsls	r4, r4, #2
 80098d8:	1914      	adds	r4, r2, r4
 80098da:	692a      	ldr	r2, [r5, #16]
 80098dc:	3314      	adds	r3, #20
 80098de:	0092      	lsls	r2, r2, #2
 80098e0:	189a      	adds	r2, r3, r2
 80098e2:	400f      	ands	r7, r1
 80098e4:	d024      	beq.n	8009930 <__lshift+0x98>
 80098e6:	3101      	adds	r1, #1
 80098e8:	1bc9      	subs	r1, r1, r7
 80098ea:	468c      	mov	ip, r1
 80098ec:	2100      	movs	r1, #0
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	40b8      	lsls	r0, r7
 80098f2:	4301      	orrs	r1, r0
 80098f4:	4660      	mov	r0, ip
 80098f6:	6021      	str	r1, [r4, #0]
 80098f8:	cb02      	ldmia	r3!, {r1}
 80098fa:	3404      	adds	r4, #4
 80098fc:	40c1      	lsrs	r1, r0
 80098fe:	429a      	cmp	r2, r3
 8009900:	d8f5      	bhi.n	80098ee <__lshift+0x56>
 8009902:	6021      	str	r1, [r4, #0]
 8009904:	2900      	cmp	r1, #0
 8009906:	d002      	beq.n	800990e <__lshift+0x76>
 8009908:	9b02      	ldr	r3, [sp, #8]
 800990a:	3302      	adds	r3, #2
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	9803      	ldr	r0, [sp, #12]
 8009912:	3b01      	subs	r3, #1
 8009914:	6133      	str	r3, [r6, #16]
 8009916:	0029      	movs	r1, r5
 8009918:	f7ff fe35 	bl	8009586 <_Bfree>
 800991c:	0030      	movs	r0, r6
 800991e:	b005      	add	sp, #20
 8009920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009922:	3101      	adds	r1, #1
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	e7c4      	b.n	80098b2 <__lshift+0x1a>
 8009928:	0098      	lsls	r0, r3, #2
 800992a:	5011      	str	r1, [r2, r0]
 800992c:	3301      	adds	r3, #1
 800992e:	e7cb      	b.n	80098c8 <__lshift+0x30>
 8009930:	cb02      	ldmia	r3!, {r1}
 8009932:	c402      	stmia	r4!, {r1}
 8009934:	429a      	cmp	r2, r3
 8009936:	d8fb      	bhi.n	8009930 <__lshift+0x98>
 8009938:	e7e9      	b.n	800990e <__lshift+0x76>

0800993a <__mcmp>:
 800993a:	690a      	ldr	r2, [r1, #16]
 800993c:	6903      	ldr	r3, [r0, #16]
 800993e:	b530      	push	{r4, r5, lr}
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	d10e      	bne.n	8009962 <__mcmp+0x28>
 8009944:	0092      	lsls	r2, r2, #2
 8009946:	3014      	adds	r0, #20
 8009948:	3114      	adds	r1, #20
 800994a:	1884      	adds	r4, r0, r2
 800994c:	1889      	adds	r1, r1, r2
 800994e:	3c04      	subs	r4, #4
 8009950:	3904      	subs	r1, #4
 8009952:	6822      	ldr	r2, [r4, #0]
 8009954:	680d      	ldr	r5, [r1, #0]
 8009956:	42aa      	cmp	r2, r5
 8009958:	d005      	beq.n	8009966 <__mcmp+0x2c>
 800995a:	42aa      	cmp	r2, r5
 800995c:	4192      	sbcs	r2, r2
 800995e:	2301      	movs	r3, #1
 8009960:	4313      	orrs	r3, r2
 8009962:	0018      	movs	r0, r3
 8009964:	bd30      	pop	{r4, r5, pc}
 8009966:	42a0      	cmp	r0, r4
 8009968:	d3f1      	bcc.n	800994e <__mcmp+0x14>
 800996a:	e7fa      	b.n	8009962 <__mcmp+0x28>

0800996c <__mdiff>:
 800996c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800996e:	000d      	movs	r5, r1
 8009970:	b085      	sub	sp, #20
 8009972:	0007      	movs	r7, r0
 8009974:	0011      	movs	r1, r2
 8009976:	0028      	movs	r0, r5
 8009978:	0014      	movs	r4, r2
 800997a:	f7ff ffde 	bl	800993a <__mcmp>
 800997e:	1e06      	subs	r6, r0, #0
 8009980:	d108      	bne.n	8009994 <__mdiff+0x28>
 8009982:	0001      	movs	r1, r0
 8009984:	0038      	movs	r0, r7
 8009986:	f7ff fdc6 	bl	8009516 <_Balloc>
 800998a:	2301      	movs	r3, #1
 800998c:	6146      	str	r6, [r0, #20]
 800998e:	6103      	str	r3, [r0, #16]
 8009990:	b005      	add	sp, #20
 8009992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009994:	2301      	movs	r3, #1
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	2800      	cmp	r0, #0
 800999a:	db04      	blt.n	80099a6 <__mdiff+0x3a>
 800999c:	0023      	movs	r3, r4
 800999e:	002c      	movs	r4, r5
 80099a0:	001d      	movs	r5, r3
 80099a2:	2300      	movs	r3, #0
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	6861      	ldr	r1, [r4, #4]
 80099a8:	0038      	movs	r0, r7
 80099aa:	f7ff fdb4 	bl	8009516 <_Balloc>
 80099ae:	002f      	movs	r7, r5
 80099b0:	2200      	movs	r2, #0
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	6926      	ldr	r6, [r4, #16]
 80099b6:	60c3      	str	r3, [r0, #12]
 80099b8:	3414      	adds	r4, #20
 80099ba:	00b3      	lsls	r3, r6, #2
 80099bc:	18e3      	adds	r3, r4, r3
 80099be:	9302      	str	r3, [sp, #8]
 80099c0:	692b      	ldr	r3, [r5, #16]
 80099c2:	3714      	adds	r7, #20
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	18fb      	adds	r3, r7, r3
 80099c8:	9303      	str	r3, [sp, #12]
 80099ca:	0003      	movs	r3, r0
 80099cc:	4694      	mov	ip, r2
 80099ce:	3314      	adds	r3, #20
 80099d0:	cc20      	ldmia	r4!, {r5}
 80099d2:	cf04      	ldmia	r7!, {r2}
 80099d4:	9201      	str	r2, [sp, #4]
 80099d6:	b2aa      	uxth	r2, r5
 80099d8:	4494      	add	ip, r2
 80099da:	466a      	mov	r2, sp
 80099dc:	4661      	mov	r1, ip
 80099de:	8892      	ldrh	r2, [r2, #4]
 80099e0:	0c2d      	lsrs	r5, r5, #16
 80099e2:	1a8a      	subs	r2, r1, r2
 80099e4:	9901      	ldr	r1, [sp, #4]
 80099e6:	0c09      	lsrs	r1, r1, #16
 80099e8:	1a69      	subs	r1, r5, r1
 80099ea:	1415      	asrs	r5, r2, #16
 80099ec:	1949      	adds	r1, r1, r5
 80099ee:	140d      	asrs	r5, r1, #16
 80099f0:	b292      	uxth	r2, r2
 80099f2:	0409      	lsls	r1, r1, #16
 80099f4:	430a      	orrs	r2, r1
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	9a03      	ldr	r2, [sp, #12]
 80099fa:	46ac      	mov	ip, r5
 80099fc:	3304      	adds	r3, #4
 80099fe:	42ba      	cmp	r2, r7
 8009a00:	d8e6      	bhi.n	80099d0 <__mdiff+0x64>
 8009a02:	9902      	ldr	r1, [sp, #8]
 8009a04:	001a      	movs	r2, r3
 8009a06:	428c      	cmp	r4, r1
 8009a08:	d305      	bcc.n	8009a16 <__mdiff+0xaa>
 8009a0a:	3a04      	subs	r2, #4
 8009a0c:	6813      	ldr	r3, [r2, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00e      	beq.n	8009a30 <__mdiff+0xc4>
 8009a12:	6106      	str	r6, [r0, #16]
 8009a14:	e7bc      	b.n	8009990 <__mdiff+0x24>
 8009a16:	cc04      	ldmia	r4!, {r2}
 8009a18:	b291      	uxth	r1, r2
 8009a1a:	4461      	add	r1, ip
 8009a1c:	140d      	asrs	r5, r1, #16
 8009a1e:	0c12      	lsrs	r2, r2, #16
 8009a20:	1952      	adds	r2, r2, r5
 8009a22:	1415      	asrs	r5, r2, #16
 8009a24:	b289      	uxth	r1, r1
 8009a26:	0412      	lsls	r2, r2, #16
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	46ac      	mov	ip, r5
 8009a2c:	c304      	stmia	r3!, {r2}
 8009a2e:	e7e8      	b.n	8009a02 <__mdiff+0x96>
 8009a30:	3e01      	subs	r6, #1
 8009a32:	e7ea      	b.n	8009a0a <__mdiff+0x9e>

08009a34 <__d2b>:
 8009a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a36:	001d      	movs	r5, r3
 8009a38:	2101      	movs	r1, #1
 8009a3a:	9f08      	ldr	r7, [sp, #32]
 8009a3c:	0014      	movs	r4, r2
 8009a3e:	f7ff fd6a 	bl	8009516 <_Balloc>
 8009a42:	032b      	lsls	r3, r5, #12
 8009a44:	006d      	lsls	r5, r5, #1
 8009a46:	0006      	movs	r6, r0
 8009a48:	0b1b      	lsrs	r3, r3, #12
 8009a4a:	0d6d      	lsrs	r5, r5, #21
 8009a4c:	d124      	bne.n	8009a98 <__d2b+0x64>
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	2c00      	cmp	r4, #0
 8009a52:	d027      	beq.n	8009aa4 <__d2b+0x70>
 8009a54:	4668      	mov	r0, sp
 8009a56:	9400      	str	r4, [sp, #0]
 8009a58:	f7ff fe04 	bl	8009664 <__lo0bits>
 8009a5c:	9c00      	ldr	r4, [sp, #0]
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d01e      	beq.n	8009aa0 <__d2b+0x6c>
 8009a62:	9b01      	ldr	r3, [sp, #4]
 8009a64:	2120      	movs	r1, #32
 8009a66:	001a      	movs	r2, r3
 8009a68:	1a09      	subs	r1, r1, r0
 8009a6a:	408a      	lsls	r2, r1
 8009a6c:	40c3      	lsrs	r3, r0
 8009a6e:	4322      	orrs	r2, r4
 8009a70:	6172      	str	r2, [r6, #20]
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	9c01      	ldr	r4, [sp, #4]
 8009a76:	61b4      	str	r4, [r6, #24]
 8009a78:	1e63      	subs	r3, r4, #1
 8009a7a:	419c      	sbcs	r4, r3
 8009a7c:	3401      	adds	r4, #1
 8009a7e:	6134      	str	r4, [r6, #16]
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	d018      	beq.n	8009ab6 <__d2b+0x82>
 8009a84:	4b12      	ldr	r3, [pc, #72]	; (8009ad0 <__d2b+0x9c>)
 8009a86:	18ed      	adds	r5, r5, r3
 8009a88:	2335      	movs	r3, #53	; 0x35
 8009a8a:	182d      	adds	r5, r5, r0
 8009a8c:	603d      	str	r5, [r7, #0]
 8009a8e:	1a18      	subs	r0, r3, r0
 8009a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a92:	6018      	str	r0, [r3, #0]
 8009a94:	0030      	movs	r0, r6
 8009a96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a98:	2280      	movs	r2, #128	; 0x80
 8009a9a:	0352      	lsls	r2, r2, #13
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	e7d6      	b.n	8009a4e <__d2b+0x1a>
 8009aa0:	6174      	str	r4, [r6, #20]
 8009aa2:	e7e7      	b.n	8009a74 <__d2b+0x40>
 8009aa4:	a801      	add	r0, sp, #4
 8009aa6:	f7ff fddd 	bl	8009664 <__lo0bits>
 8009aaa:	2401      	movs	r4, #1
 8009aac:	9b01      	ldr	r3, [sp, #4]
 8009aae:	6134      	str	r4, [r6, #16]
 8009ab0:	6173      	str	r3, [r6, #20]
 8009ab2:	3020      	adds	r0, #32
 8009ab4:	e7e4      	b.n	8009a80 <__d2b+0x4c>
 8009ab6:	4b07      	ldr	r3, [pc, #28]	; (8009ad4 <__d2b+0xa0>)
 8009ab8:	18c0      	adds	r0, r0, r3
 8009aba:	4b07      	ldr	r3, [pc, #28]	; (8009ad8 <__d2b+0xa4>)
 8009abc:	6038      	str	r0, [r7, #0]
 8009abe:	18e3      	adds	r3, r4, r3
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	18f3      	adds	r3, r6, r3
 8009ac4:	6958      	ldr	r0, [r3, #20]
 8009ac6:	f7ff fdb3 	bl	8009630 <__hi0bits>
 8009aca:	0164      	lsls	r4, r4, #5
 8009acc:	1a20      	subs	r0, r4, r0
 8009ace:	e7df      	b.n	8009a90 <__d2b+0x5c>
 8009ad0:	fffffbcd 	.word	0xfffffbcd
 8009ad4:	fffffbce 	.word	0xfffffbce
 8009ad8:	3fffffff 	.word	0x3fffffff

08009adc <_calloc_r>:
 8009adc:	434a      	muls	r2, r1
 8009ade:	b570      	push	{r4, r5, r6, lr}
 8009ae0:	0011      	movs	r1, r2
 8009ae2:	0014      	movs	r4, r2
 8009ae4:	f000 f852 	bl	8009b8c <_malloc_r>
 8009ae8:	1e05      	subs	r5, r0, #0
 8009aea:	d003      	beq.n	8009af4 <_calloc_r+0x18>
 8009aec:	0022      	movs	r2, r4
 8009aee:	2100      	movs	r1, #0
 8009af0:	f7fe f9e7 	bl	8007ec2 <memset>
 8009af4:	0028      	movs	r0, r5
 8009af6:	bd70      	pop	{r4, r5, r6, pc}

08009af8 <_free_r>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	0005      	movs	r5, r0
 8009afc:	2900      	cmp	r1, #0
 8009afe:	d010      	beq.n	8009b22 <_free_r+0x2a>
 8009b00:	1f0c      	subs	r4, r1, #4
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	da00      	bge.n	8009b0a <_free_r+0x12>
 8009b08:	18e4      	adds	r4, r4, r3
 8009b0a:	0028      	movs	r0, r5
 8009b0c:	f000 fa38 	bl	8009f80 <__malloc_lock>
 8009b10:	4a1d      	ldr	r2, [pc, #116]	; (8009b88 <_free_r+0x90>)
 8009b12:	6813      	ldr	r3, [r2, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d105      	bne.n	8009b24 <_free_r+0x2c>
 8009b18:	6063      	str	r3, [r4, #4]
 8009b1a:	6014      	str	r4, [r2, #0]
 8009b1c:	0028      	movs	r0, r5
 8009b1e:	f000 fa30 	bl	8009f82 <__malloc_unlock>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	d909      	bls.n	8009b3c <_free_r+0x44>
 8009b28:	6821      	ldr	r1, [r4, #0]
 8009b2a:	1860      	adds	r0, r4, r1
 8009b2c:	4283      	cmp	r3, r0
 8009b2e:	d1f3      	bne.n	8009b18 <_free_r+0x20>
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	1841      	adds	r1, r0, r1
 8009b36:	6021      	str	r1, [r4, #0]
 8009b38:	e7ee      	b.n	8009b18 <_free_r+0x20>
 8009b3a:	0013      	movs	r3, r2
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	2a00      	cmp	r2, #0
 8009b40:	d001      	beq.n	8009b46 <_free_r+0x4e>
 8009b42:	42a2      	cmp	r2, r4
 8009b44:	d9f9      	bls.n	8009b3a <_free_r+0x42>
 8009b46:	6819      	ldr	r1, [r3, #0]
 8009b48:	1858      	adds	r0, r3, r1
 8009b4a:	42a0      	cmp	r0, r4
 8009b4c:	d10b      	bne.n	8009b66 <_free_r+0x6e>
 8009b4e:	6820      	ldr	r0, [r4, #0]
 8009b50:	1809      	adds	r1, r1, r0
 8009b52:	1858      	adds	r0, r3, r1
 8009b54:	6019      	str	r1, [r3, #0]
 8009b56:	4282      	cmp	r2, r0
 8009b58:	d1e0      	bne.n	8009b1c <_free_r+0x24>
 8009b5a:	6810      	ldr	r0, [r2, #0]
 8009b5c:	6852      	ldr	r2, [r2, #4]
 8009b5e:	1841      	adds	r1, r0, r1
 8009b60:	6019      	str	r1, [r3, #0]
 8009b62:	605a      	str	r2, [r3, #4]
 8009b64:	e7da      	b.n	8009b1c <_free_r+0x24>
 8009b66:	42a0      	cmp	r0, r4
 8009b68:	d902      	bls.n	8009b70 <_free_r+0x78>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	602b      	str	r3, [r5, #0]
 8009b6e:	e7d5      	b.n	8009b1c <_free_r+0x24>
 8009b70:	6821      	ldr	r1, [r4, #0]
 8009b72:	1860      	adds	r0, r4, r1
 8009b74:	4282      	cmp	r2, r0
 8009b76:	d103      	bne.n	8009b80 <_free_r+0x88>
 8009b78:	6810      	ldr	r0, [r2, #0]
 8009b7a:	6852      	ldr	r2, [r2, #4]
 8009b7c:	1841      	adds	r1, r0, r1
 8009b7e:	6021      	str	r1, [r4, #0]
 8009b80:	6062      	str	r2, [r4, #4]
 8009b82:	605c      	str	r4, [r3, #4]
 8009b84:	e7ca      	b.n	8009b1c <_free_r+0x24>
 8009b86:	46c0      	nop			; (mov r8, r8)
 8009b88:	200006d0 	.word	0x200006d0

08009b8c <_malloc_r>:
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	b570      	push	{r4, r5, r6, lr}
 8009b90:	1ccd      	adds	r5, r1, #3
 8009b92:	439d      	bics	r5, r3
 8009b94:	3508      	adds	r5, #8
 8009b96:	0006      	movs	r6, r0
 8009b98:	2d0c      	cmp	r5, #12
 8009b9a:	d21e      	bcs.n	8009bda <_malloc_r+0x4e>
 8009b9c:	250c      	movs	r5, #12
 8009b9e:	42a9      	cmp	r1, r5
 8009ba0:	d81d      	bhi.n	8009bde <_malloc_r+0x52>
 8009ba2:	0030      	movs	r0, r6
 8009ba4:	f000 f9ec 	bl	8009f80 <__malloc_lock>
 8009ba8:	4a25      	ldr	r2, [pc, #148]	; (8009c40 <_malloc_r+0xb4>)
 8009baa:	6814      	ldr	r4, [r2, #0]
 8009bac:	0021      	movs	r1, r4
 8009bae:	2900      	cmp	r1, #0
 8009bb0:	d119      	bne.n	8009be6 <_malloc_r+0x5a>
 8009bb2:	4c24      	ldr	r4, [pc, #144]	; (8009c44 <_malloc_r+0xb8>)
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d103      	bne.n	8009bc2 <_malloc_r+0x36>
 8009bba:	0030      	movs	r0, r6
 8009bbc:	f000 f9aa 	bl	8009f14 <_sbrk_r>
 8009bc0:	6020      	str	r0, [r4, #0]
 8009bc2:	0029      	movs	r1, r5
 8009bc4:	0030      	movs	r0, r6
 8009bc6:	f000 f9a5 	bl	8009f14 <_sbrk_r>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	d12c      	bne.n	8009c28 <_malloc_r+0x9c>
 8009bce:	230c      	movs	r3, #12
 8009bd0:	0030      	movs	r0, r6
 8009bd2:	6033      	str	r3, [r6, #0]
 8009bd4:	f000 f9d5 	bl	8009f82 <__malloc_unlock>
 8009bd8:	e003      	b.n	8009be2 <_malloc_r+0x56>
 8009bda:	2d00      	cmp	r5, #0
 8009bdc:	dadf      	bge.n	8009b9e <_malloc_r+0x12>
 8009bde:	230c      	movs	r3, #12
 8009be0:	6033      	str	r3, [r6, #0]
 8009be2:	2000      	movs	r0, #0
 8009be4:	bd70      	pop	{r4, r5, r6, pc}
 8009be6:	680b      	ldr	r3, [r1, #0]
 8009be8:	1b5b      	subs	r3, r3, r5
 8009bea:	d41a      	bmi.n	8009c22 <_malloc_r+0x96>
 8009bec:	2b0b      	cmp	r3, #11
 8009bee:	d903      	bls.n	8009bf8 <_malloc_r+0x6c>
 8009bf0:	600b      	str	r3, [r1, #0]
 8009bf2:	18cc      	adds	r4, r1, r3
 8009bf4:	6025      	str	r5, [r4, #0]
 8009bf6:	e003      	b.n	8009c00 <_malloc_r+0x74>
 8009bf8:	428c      	cmp	r4, r1
 8009bfa:	d10e      	bne.n	8009c1a <_malloc_r+0x8e>
 8009bfc:	6863      	ldr	r3, [r4, #4]
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	0030      	movs	r0, r6
 8009c02:	f000 f9be 	bl	8009f82 <__malloc_unlock>
 8009c06:	0020      	movs	r0, r4
 8009c08:	2207      	movs	r2, #7
 8009c0a:	300b      	adds	r0, #11
 8009c0c:	1d23      	adds	r3, r4, #4
 8009c0e:	4390      	bics	r0, r2
 8009c10:	1ac3      	subs	r3, r0, r3
 8009c12:	d0e7      	beq.n	8009be4 <_malloc_r+0x58>
 8009c14:	425a      	negs	r2, r3
 8009c16:	50e2      	str	r2, [r4, r3]
 8009c18:	e7e4      	b.n	8009be4 <_malloc_r+0x58>
 8009c1a:	684b      	ldr	r3, [r1, #4]
 8009c1c:	6063      	str	r3, [r4, #4]
 8009c1e:	000c      	movs	r4, r1
 8009c20:	e7ee      	b.n	8009c00 <_malloc_r+0x74>
 8009c22:	000c      	movs	r4, r1
 8009c24:	6849      	ldr	r1, [r1, #4]
 8009c26:	e7c2      	b.n	8009bae <_malloc_r+0x22>
 8009c28:	2303      	movs	r3, #3
 8009c2a:	1cc4      	adds	r4, r0, #3
 8009c2c:	439c      	bics	r4, r3
 8009c2e:	42a0      	cmp	r0, r4
 8009c30:	d0e0      	beq.n	8009bf4 <_malloc_r+0x68>
 8009c32:	1a21      	subs	r1, r4, r0
 8009c34:	0030      	movs	r0, r6
 8009c36:	f000 f96d 	bl	8009f14 <_sbrk_r>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	d1da      	bne.n	8009bf4 <_malloc_r+0x68>
 8009c3e:	e7c6      	b.n	8009bce <_malloc_r+0x42>
 8009c40:	200006d0 	.word	0x200006d0
 8009c44:	200006d4 	.word	0x200006d4

08009c48 <__ssputs_r>:
 8009c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4a:	688e      	ldr	r6, [r1, #8]
 8009c4c:	b085      	sub	sp, #20
 8009c4e:	0007      	movs	r7, r0
 8009c50:	000c      	movs	r4, r1
 8009c52:	9203      	str	r2, [sp, #12]
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	429e      	cmp	r6, r3
 8009c58:	d839      	bhi.n	8009cce <__ssputs_r+0x86>
 8009c5a:	2390      	movs	r3, #144	; 0x90
 8009c5c:	898a      	ldrh	r2, [r1, #12]
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	421a      	tst	r2, r3
 8009c62:	d034      	beq.n	8009cce <__ssputs_r+0x86>
 8009c64:	2503      	movs	r5, #3
 8009c66:	6909      	ldr	r1, [r1, #16]
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	1a5b      	subs	r3, r3, r1
 8009c6c:	9302      	str	r3, [sp, #8]
 8009c6e:	6963      	ldr	r3, [r4, #20]
 8009c70:	9802      	ldr	r0, [sp, #8]
 8009c72:	435d      	muls	r5, r3
 8009c74:	0feb      	lsrs	r3, r5, #31
 8009c76:	195d      	adds	r5, r3, r5
 8009c78:	9b01      	ldr	r3, [sp, #4]
 8009c7a:	106d      	asrs	r5, r5, #1
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	181b      	adds	r3, r3, r0
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	d900      	bls.n	8009c86 <__ssputs_r+0x3e>
 8009c84:	001d      	movs	r5, r3
 8009c86:	0553      	lsls	r3, r2, #21
 8009c88:	d532      	bpl.n	8009cf0 <__ssputs_r+0xa8>
 8009c8a:	0029      	movs	r1, r5
 8009c8c:	0038      	movs	r0, r7
 8009c8e:	f7ff ff7d 	bl	8009b8c <_malloc_r>
 8009c92:	1e06      	subs	r6, r0, #0
 8009c94:	d109      	bne.n	8009caa <__ssputs_r+0x62>
 8009c96:	230c      	movs	r3, #12
 8009c98:	603b      	str	r3, [r7, #0]
 8009c9a:	2340      	movs	r3, #64	; 0x40
 8009c9c:	2001      	movs	r0, #1
 8009c9e:	89a2      	ldrh	r2, [r4, #12]
 8009ca0:	4240      	negs	r0, r0
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	81a3      	strh	r3, [r4, #12]
 8009ca6:	b005      	add	sp, #20
 8009ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009caa:	9a02      	ldr	r2, [sp, #8]
 8009cac:	6921      	ldr	r1, [r4, #16]
 8009cae:	f7fe f8ff 	bl	8007eb0 <memcpy>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	4a14      	ldr	r2, [pc, #80]	; (8009d08 <__ssputs_r+0xc0>)
 8009cb6:	401a      	ands	r2, r3
 8009cb8:	2380      	movs	r3, #128	; 0x80
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	6126      	str	r6, [r4, #16]
 8009cc2:	18f6      	adds	r6, r6, r3
 8009cc4:	6026      	str	r6, [r4, #0]
 8009cc6:	6165      	str	r5, [r4, #20]
 8009cc8:	9e01      	ldr	r6, [sp, #4]
 8009cca:	1aed      	subs	r5, r5, r3
 8009ccc:	60a5      	str	r5, [r4, #8]
 8009cce:	9b01      	ldr	r3, [sp, #4]
 8009cd0:	42b3      	cmp	r3, r6
 8009cd2:	d200      	bcs.n	8009cd6 <__ssputs_r+0x8e>
 8009cd4:	001e      	movs	r6, r3
 8009cd6:	0032      	movs	r2, r6
 8009cd8:	9903      	ldr	r1, [sp, #12]
 8009cda:	6820      	ldr	r0, [r4, #0]
 8009cdc:	f000 f93e 	bl	8009f5c <memmove>
 8009ce0:	68a3      	ldr	r3, [r4, #8]
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	1b9b      	subs	r3, r3, r6
 8009ce6:	60a3      	str	r3, [r4, #8]
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	199e      	adds	r6, r3, r6
 8009cec:	6026      	str	r6, [r4, #0]
 8009cee:	e7da      	b.n	8009ca6 <__ssputs_r+0x5e>
 8009cf0:	002a      	movs	r2, r5
 8009cf2:	0038      	movs	r0, r7
 8009cf4:	f000 f946 	bl	8009f84 <_realloc_r>
 8009cf8:	1e06      	subs	r6, r0, #0
 8009cfa:	d1e0      	bne.n	8009cbe <__ssputs_r+0x76>
 8009cfc:	6921      	ldr	r1, [r4, #16]
 8009cfe:	0038      	movs	r0, r7
 8009d00:	f7ff fefa 	bl	8009af8 <_free_r>
 8009d04:	e7c7      	b.n	8009c96 <__ssputs_r+0x4e>
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	fffffb7f 	.word	0xfffffb7f

08009d0c <_svfiprintf_r>:
 8009d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0e:	b09f      	sub	sp, #124	; 0x7c
 8009d10:	9002      	str	r0, [sp, #8]
 8009d12:	9305      	str	r3, [sp, #20]
 8009d14:	898b      	ldrh	r3, [r1, #12]
 8009d16:	000f      	movs	r7, r1
 8009d18:	0016      	movs	r6, r2
 8009d1a:	061b      	lsls	r3, r3, #24
 8009d1c:	d511      	bpl.n	8009d42 <_svfiprintf_r+0x36>
 8009d1e:	690b      	ldr	r3, [r1, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10e      	bne.n	8009d42 <_svfiprintf_r+0x36>
 8009d24:	2140      	movs	r1, #64	; 0x40
 8009d26:	f7ff ff31 	bl	8009b8c <_malloc_r>
 8009d2a:	6038      	str	r0, [r7, #0]
 8009d2c:	6138      	str	r0, [r7, #16]
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d105      	bne.n	8009d3e <_svfiprintf_r+0x32>
 8009d32:	230c      	movs	r3, #12
 8009d34:	9a02      	ldr	r2, [sp, #8]
 8009d36:	3801      	subs	r0, #1
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	b01f      	add	sp, #124	; 0x7c
 8009d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d3e:	2340      	movs	r3, #64	; 0x40
 8009d40:	617b      	str	r3, [r7, #20]
 8009d42:	2300      	movs	r3, #0
 8009d44:	ad06      	add	r5, sp, #24
 8009d46:	616b      	str	r3, [r5, #20]
 8009d48:	3320      	adds	r3, #32
 8009d4a:	766b      	strb	r3, [r5, #25]
 8009d4c:	3310      	adds	r3, #16
 8009d4e:	76ab      	strb	r3, [r5, #26]
 8009d50:	0034      	movs	r4, r6
 8009d52:	7823      	ldrb	r3, [r4, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d147      	bne.n	8009de8 <_svfiprintf_r+0xdc>
 8009d58:	1ba3      	subs	r3, r4, r6
 8009d5a:	9304      	str	r3, [sp, #16]
 8009d5c:	d00d      	beq.n	8009d7a <_svfiprintf_r+0x6e>
 8009d5e:	1ba3      	subs	r3, r4, r6
 8009d60:	0032      	movs	r2, r6
 8009d62:	0039      	movs	r1, r7
 8009d64:	9802      	ldr	r0, [sp, #8]
 8009d66:	f7ff ff6f 	bl	8009c48 <__ssputs_r>
 8009d6a:	1c43      	adds	r3, r0, #1
 8009d6c:	d100      	bne.n	8009d70 <_svfiprintf_r+0x64>
 8009d6e:	e0b5      	b.n	8009edc <_svfiprintf_r+0x1d0>
 8009d70:	696a      	ldr	r2, [r5, #20]
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	4694      	mov	ip, r2
 8009d76:	4463      	add	r3, ip
 8009d78:	616b      	str	r3, [r5, #20]
 8009d7a:	7823      	ldrb	r3, [r4, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d100      	bne.n	8009d82 <_svfiprintf_r+0x76>
 8009d80:	e0ac      	b.n	8009edc <_svfiprintf_r+0x1d0>
 8009d82:	2201      	movs	r2, #1
 8009d84:	2300      	movs	r3, #0
 8009d86:	4252      	negs	r2, r2
 8009d88:	606a      	str	r2, [r5, #4]
 8009d8a:	a902      	add	r1, sp, #8
 8009d8c:	3254      	adds	r2, #84	; 0x54
 8009d8e:	1852      	adds	r2, r2, r1
 8009d90:	3401      	adds	r4, #1
 8009d92:	602b      	str	r3, [r5, #0]
 8009d94:	60eb      	str	r3, [r5, #12]
 8009d96:	60ab      	str	r3, [r5, #8]
 8009d98:	7013      	strb	r3, [r2, #0]
 8009d9a:	65ab      	str	r3, [r5, #88]	; 0x58
 8009d9c:	4e58      	ldr	r6, [pc, #352]	; (8009f00 <_svfiprintf_r+0x1f4>)
 8009d9e:	2205      	movs	r2, #5
 8009da0:	7821      	ldrb	r1, [r4, #0]
 8009da2:	0030      	movs	r0, r6
 8009da4:	f7ff fbac 	bl	8009500 <memchr>
 8009da8:	1c62      	adds	r2, r4, #1
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d120      	bne.n	8009df0 <_svfiprintf_r+0xe4>
 8009dae:	6829      	ldr	r1, [r5, #0]
 8009db0:	06cb      	lsls	r3, r1, #27
 8009db2:	d504      	bpl.n	8009dbe <_svfiprintf_r+0xb2>
 8009db4:	2353      	movs	r3, #83	; 0x53
 8009db6:	ae02      	add	r6, sp, #8
 8009db8:	3020      	adds	r0, #32
 8009dba:	199b      	adds	r3, r3, r6
 8009dbc:	7018      	strb	r0, [r3, #0]
 8009dbe:	070b      	lsls	r3, r1, #28
 8009dc0:	d504      	bpl.n	8009dcc <_svfiprintf_r+0xc0>
 8009dc2:	2353      	movs	r3, #83	; 0x53
 8009dc4:	202b      	movs	r0, #43	; 0x2b
 8009dc6:	ae02      	add	r6, sp, #8
 8009dc8:	199b      	adds	r3, r3, r6
 8009dca:	7018      	strb	r0, [r3, #0]
 8009dcc:	7823      	ldrb	r3, [r4, #0]
 8009dce:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd0:	d016      	beq.n	8009e00 <_svfiprintf_r+0xf4>
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	210a      	movs	r1, #10
 8009dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd8:	7822      	ldrb	r2, [r4, #0]
 8009dda:	3a30      	subs	r2, #48	; 0x30
 8009ddc:	2a09      	cmp	r2, #9
 8009dde:	d955      	bls.n	8009e8c <_svfiprintf_r+0x180>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d015      	beq.n	8009e10 <_svfiprintf_r+0x104>
 8009de4:	9309      	str	r3, [sp, #36]	; 0x24
 8009de6:	e013      	b.n	8009e10 <_svfiprintf_r+0x104>
 8009de8:	2b25      	cmp	r3, #37	; 0x25
 8009dea:	d0b5      	beq.n	8009d58 <_svfiprintf_r+0x4c>
 8009dec:	3401      	adds	r4, #1
 8009dee:	e7b0      	b.n	8009d52 <_svfiprintf_r+0x46>
 8009df0:	2301      	movs	r3, #1
 8009df2:	1b80      	subs	r0, r0, r6
 8009df4:	4083      	lsls	r3, r0
 8009df6:	6829      	ldr	r1, [r5, #0]
 8009df8:	0014      	movs	r4, r2
 8009dfa:	430b      	orrs	r3, r1
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	e7cd      	b.n	8009d9c <_svfiprintf_r+0x90>
 8009e00:	9b05      	ldr	r3, [sp, #20]
 8009e02:	1d18      	adds	r0, r3, #4
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	9005      	str	r0, [sp, #20]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	db39      	blt.n	8009e80 <_svfiprintf_r+0x174>
 8009e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0e:	0014      	movs	r4, r2
 8009e10:	7823      	ldrb	r3, [r4, #0]
 8009e12:	2b2e      	cmp	r3, #46	; 0x2e
 8009e14:	d10b      	bne.n	8009e2e <_svfiprintf_r+0x122>
 8009e16:	7863      	ldrb	r3, [r4, #1]
 8009e18:	1c62      	adds	r2, r4, #1
 8009e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e1c:	d13e      	bne.n	8009e9c <_svfiprintf_r+0x190>
 8009e1e:	9b05      	ldr	r3, [sp, #20]
 8009e20:	3402      	adds	r4, #2
 8009e22:	1d1a      	adds	r2, r3, #4
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	9205      	str	r2, [sp, #20]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	db34      	blt.n	8009e96 <_svfiprintf_r+0x18a>
 8009e2c:	9307      	str	r3, [sp, #28]
 8009e2e:	4e35      	ldr	r6, [pc, #212]	; (8009f04 <_svfiprintf_r+0x1f8>)
 8009e30:	7821      	ldrb	r1, [r4, #0]
 8009e32:	2203      	movs	r2, #3
 8009e34:	0030      	movs	r0, r6
 8009e36:	f7ff fb63 	bl	8009500 <memchr>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d006      	beq.n	8009e4c <_svfiprintf_r+0x140>
 8009e3e:	2340      	movs	r3, #64	; 0x40
 8009e40:	1b80      	subs	r0, r0, r6
 8009e42:	4083      	lsls	r3, r0
 8009e44:	682a      	ldr	r2, [r5, #0]
 8009e46:	3401      	adds	r4, #1
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	7821      	ldrb	r1, [r4, #0]
 8009e4e:	2206      	movs	r2, #6
 8009e50:	482d      	ldr	r0, [pc, #180]	; (8009f08 <_svfiprintf_r+0x1fc>)
 8009e52:	1c66      	adds	r6, r4, #1
 8009e54:	7629      	strb	r1, [r5, #24]
 8009e56:	f7ff fb53 	bl	8009500 <memchr>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d046      	beq.n	8009eec <_svfiprintf_r+0x1e0>
 8009e5e:	4b2b      	ldr	r3, [pc, #172]	; (8009f0c <_svfiprintf_r+0x200>)
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d12f      	bne.n	8009ec4 <_svfiprintf_r+0x1b8>
 8009e64:	6829      	ldr	r1, [r5, #0]
 8009e66:	9b05      	ldr	r3, [sp, #20]
 8009e68:	2207      	movs	r2, #7
 8009e6a:	05c9      	lsls	r1, r1, #23
 8009e6c:	d528      	bpl.n	8009ec0 <_svfiprintf_r+0x1b4>
 8009e6e:	189b      	adds	r3, r3, r2
 8009e70:	4393      	bics	r3, r2
 8009e72:	3308      	adds	r3, #8
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	696b      	ldr	r3, [r5, #20]
 8009e78:	9a03      	ldr	r2, [sp, #12]
 8009e7a:	189b      	adds	r3, r3, r2
 8009e7c:	616b      	str	r3, [r5, #20]
 8009e7e:	e767      	b.n	8009d50 <_svfiprintf_r+0x44>
 8009e80:	425b      	negs	r3, r3
 8009e82:	60eb      	str	r3, [r5, #12]
 8009e84:	2302      	movs	r3, #2
 8009e86:	430b      	orrs	r3, r1
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	e7c0      	b.n	8009e0e <_svfiprintf_r+0x102>
 8009e8c:	434b      	muls	r3, r1
 8009e8e:	3401      	adds	r4, #1
 8009e90:	189b      	adds	r3, r3, r2
 8009e92:	2001      	movs	r0, #1
 8009e94:	e7a0      	b.n	8009dd8 <_svfiprintf_r+0xcc>
 8009e96:	2301      	movs	r3, #1
 8009e98:	425b      	negs	r3, r3
 8009e9a:	e7c7      	b.n	8009e2c <_svfiprintf_r+0x120>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	0014      	movs	r4, r2
 8009ea0:	200a      	movs	r0, #10
 8009ea2:	001a      	movs	r2, r3
 8009ea4:	606b      	str	r3, [r5, #4]
 8009ea6:	7821      	ldrb	r1, [r4, #0]
 8009ea8:	3930      	subs	r1, #48	; 0x30
 8009eaa:	2909      	cmp	r1, #9
 8009eac:	d903      	bls.n	8009eb6 <_svfiprintf_r+0x1aa>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0bd      	beq.n	8009e2e <_svfiprintf_r+0x122>
 8009eb2:	9207      	str	r2, [sp, #28]
 8009eb4:	e7bb      	b.n	8009e2e <_svfiprintf_r+0x122>
 8009eb6:	4342      	muls	r2, r0
 8009eb8:	3401      	adds	r4, #1
 8009eba:	1852      	adds	r2, r2, r1
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e7f2      	b.n	8009ea6 <_svfiprintf_r+0x19a>
 8009ec0:	3307      	adds	r3, #7
 8009ec2:	e7d5      	b.n	8009e70 <_svfiprintf_r+0x164>
 8009ec4:	ab05      	add	r3, sp, #20
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	003a      	movs	r2, r7
 8009eca:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <_svfiprintf_r+0x204>)
 8009ecc:	0029      	movs	r1, r5
 8009ece:	9802      	ldr	r0, [sp, #8]
 8009ed0:	f7fe f89c 	bl	800800c <_printf_float>
 8009ed4:	9003      	str	r0, [sp, #12]
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	d1cc      	bne.n	8009e76 <_svfiprintf_r+0x16a>
 8009edc:	89bb      	ldrh	r3, [r7, #12]
 8009ede:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009ee0:	065b      	lsls	r3, r3, #25
 8009ee2:	d400      	bmi.n	8009ee6 <_svfiprintf_r+0x1da>
 8009ee4:	e729      	b.n	8009d3a <_svfiprintf_r+0x2e>
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	4240      	negs	r0, r0
 8009eea:	e726      	b.n	8009d3a <_svfiprintf_r+0x2e>
 8009eec:	ab05      	add	r3, sp, #20
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	003a      	movs	r2, r7
 8009ef2:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <_svfiprintf_r+0x204>)
 8009ef4:	0029      	movs	r1, r5
 8009ef6:	9802      	ldr	r0, [sp, #8]
 8009ef8:	f7fe fb42 	bl	8008580 <_printf_i>
 8009efc:	e7ea      	b.n	8009ed4 <_svfiprintf_r+0x1c8>
 8009efe:	46c0      	nop			; (mov r8, r8)
 8009f00:	0800a884 	.word	0x0800a884
 8009f04:	0800a88a 	.word	0x0800a88a
 8009f08:	0800a88e 	.word	0x0800a88e
 8009f0c:	0800800d 	.word	0x0800800d
 8009f10:	08009c49 	.word	0x08009c49

08009f14 <_sbrk_r>:
 8009f14:	2300      	movs	r3, #0
 8009f16:	b570      	push	{r4, r5, r6, lr}
 8009f18:	4c06      	ldr	r4, [pc, #24]	; (8009f34 <_sbrk_r+0x20>)
 8009f1a:	0005      	movs	r5, r0
 8009f1c:	0008      	movs	r0, r1
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	f000 f9b4 	bl	800a28c <_sbrk>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d103      	bne.n	8009f30 <_sbrk_r+0x1c>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d000      	beq.n	8009f30 <_sbrk_r+0x1c>
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	bd70      	pop	{r4, r5, r6, pc}
 8009f32:	46c0      	nop			; (mov r8, r8)
 8009f34:	20000848 	.word	0x20000848

08009f38 <__ascii_mbtowc>:
 8009f38:	b082      	sub	sp, #8
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	d100      	bne.n	8009f40 <__ascii_mbtowc+0x8>
 8009f3e:	a901      	add	r1, sp, #4
 8009f40:	1e10      	subs	r0, r2, #0
 8009f42:	d006      	beq.n	8009f52 <__ascii_mbtowc+0x1a>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d006      	beq.n	8009f56 <__ascii_mbtowc+0x1e>
 8009f48:	7813      	ldrb	r3, [r2, #0]
 8009f4a:	600b      	str	r3, [r1, #0]
 8009f4c:	7810      	ldrb	r0, [r2, #0]
 8009f4e:	1e43      	subs	r3, r0, #1
 8009f50:	4198      	sbcs	r0, r3
 8009f52:	b002      	add	sp, #8
 8009f54:	4770      	bx	lr
 8009f56:	2002      	movs	r0, #2
 8009f58:	4240      	negs	r0, r0
 8009f5a:	e7fa      	b.n	8009f52 <__ascii_mbtowc+0x1a>

08009f5c <memmove>:
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	4288      	cmp	r0, r1
 8009f60:	d902      	bls.n	8009f68 <memmove+0xc>
 8009f62:	188b      	adds	r3, r1, r2
 8009f64:	4298      	cmp	r0, r3
 8009f66:	d308      	bcc.n	8009f7a <memmove+0x1e>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d007      	beq.n	8009f7e <memmove+0x22>
 8009f6e:	5ccc      	ldrb	r4, [r1, r3]
 8009f70:	54c4      	strb	r4, [r0, r3]
 8009f72:	3301      	adds	r3, #1
 8009f74:	e7f9      	b.n	8009f6a <memmove+0xe>
 8009f76:	5c8b      	ldrb	r3, [r1, r2]
 8009f78:	5483      	strb	r3, [r0, r2]
 8009f7a:	3a01      	subs	r2, #1
 8009f7c:	d2fb      	bcs.n	8009f76 <memmove+0x1a>
 8009f7e:	bd10      	pop	{r4, pc}

08009f80 <__malloc_lock>:
 8009f80:	4770      	bx	lr

08009f82 <__malloc_unlock>:
 8009f82:	4770      	bx	lr

08009f84 <_realloc_r>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	0007      	movs	r7, r0
 8009f88:	000d      	movs	r5, r1
 8009f8a:	0016      	movs	r6, r2
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	d105      	bne.n	8009f9c <_realloc_r+0x18>
 8009f90:	0011      	movs	r1, r2
 8009f92:	f7ff fdfb 	bl	8009b8c <_malloc_r>
 8009f96:	0004      	movs	r4, r0
 8009f98:	0020      	movs	r0, r4
 8009f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	d103      	bne.n	8009fa8 <_realloc_r+0x24>
 8009fa0:	f7ff fdaa 	bl	8009af8 <_free_r>
 8009fa4:	0034      	movs	r4, r6
 8009fa6:	e7f7      	b.n	8009f98 <_realloc_r+0x14>
 8009fa8:	f000 f81e 	bl	8009fe8 <_malloc_usable_size_r>
 8009fac:	002c      	movs	r4, r5
 8009fae:	4286      	cmp	r6, r0
 8009fb0:	d9f2      	bls.n	8009f98 <_realloc_r+0x14>
 8009fb2:	0031      	movs	r1, r6
 8009fb4:	0038      	movs	r0, r7
 8009fb6:	f7ff fde9 	bl	8009b8c <_malloc_r>
 8009fba:	1e04      	subs	r4, r0, #0
 8009fbc:	d0ec      	beq.n	8009f98 <_realloc_r+0x14>
 8009fbe:	0029      	movs	r1, r5
 8009fc0:	0032      	movs	r2, r6
 8009fc2:	f7fd ff75 	bl	8007eb0 <memcpy>
 8009fc6:	0029      	movs	r1, r5
 8009fc8:	0038      	movs	r0, r7
 8009fca:	f7ff fd95 	bl	8009af8 <_free_r>
 8009fce:	e7e3      	b.n	8009f98 <_realloc_r+0x14>

08009fd0 <__ascii_wctomb>:
 8009fd0:	1e0b      	subs	r3, r1, #0
 8009fd2:	d004      	beq.n	8009fde <__ascii_wctomb+0xe>
 8009fd4:	2aff      	cmp	r2, #255	; 0xff
 8009fd6:	d904      	bls.n	8009fe2 <__ascii_wctomb+0x12>
 8009fd8:	238a      	movs	r3, #138	; 0x8a
 8009fda:	6003      	str	r3, [r0, #0]
 8009fdc:	3b8b      	subs	r3, #139	; 0x8b
 8009fde:	0018      	movs	r0, r3
 8009fe0:	4770      	bx	lr
 8009fe2:	700a      	strb	r2, [r1, #0]
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e7fa      	b.n	8009fde <__ascii_wctomb+0xe>

08009fe8 <_malloc_usable_size_r>:
 8009fe8:	1f0b      	subs	r3, r1, #4
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	1f18      	subs	r0, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	da01      	bge.n	8009ff6 <_malloc_usable_size_r+0xe>
 8009ff2:	580b      	ldr	r3, [r1, r0]
 8009ff4:	18c0      	adds	r0, r0, r3
 8009ff6:	4770      	bx	lr

08009ff8 <ceil>:
 8009ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ffa:	004b      	lsls	r3, r1, #1
 8009ffc:	4a39      	ldr	r2, [pc, #228]	; (800a0e4 <ceil+0xec>)
 8009ffe:	0d5b      	lsrs	r3, r3, #21
 800a000:	b085      	sub	sp, #20
 800a002:	189e      	adds	r6, r3, r2
 800a004:	9003      	str	r0, [sp, #12]
 800a006:	000c      	movs	r4, r1
 800a008:	0005      	movs	r5, r0
 800a00a:	2e13      	cmp	r6, #19
 800a00c:	dc32      	bgt.n	800a074 <ceil+0x7c>
 800a00e:	2e00      	cmp	r6, #0
 800a010:	da13      	bge.n	800a03a <ceil+0x42>
 800a012:	4a35      	ldr	r2, [pc, #212]	; (800a0e8 <ceil+0xf0>)
 800a014:	4b35      	ldr	r3, [pc, #212]	; (800a0ec <ceil+0xf4>)
 800a016:	f7f6 fb3b 	bl	8000690 <__aeabi_dadd>
 800a01a:	2200      	movs	r2, #0
 800a01c:	2300      	movs	r3, #0
 800a01e:	f7f6 fa25 	bl	800046c <__aeabi_dcmpgt>
 800a022:	2800      	cmp	r0, #0
 800a024:	d006      	beq.n	800a034 <ceil+0x3c>
 800a026:	2c00      	cmp	r4, #0
 800a028:	db57      	blt.n	800a0da <ceil+0xe2>
 800a02a:	432c      	orrs	r4, r5
 800a02c:	2500      	movs	r5, #0
 800a02e:	42ac      	cmp	r4, r5
 800a030:	d000      	beq.n	800a034 <ceil+0x3c>
 800a032:	4c2f      	ldr	r4, [pc, #188]	; (800a0f0 <ceil+0xf8>)
 800a034:	0028      	movs	r0, r5
 800a036:	0021      	movs	r1, r4
 800a038:	e026      	b.n	800a088 <ceil+0x90>
 800a03a:	4f2e      	ldr	r7, [pc, #184]	; (800a0f4 <ceil+0xfc>)
 800a03c:	4137      	asrs	r7, r6
 800a03e:	003b      	movs	r3, r7
 800a040:	400b      	ands	r3, r1
 800a042:	4303      	orrs	r3, r0
 800a044:	d020      	beq.n	800a088 <ceil+0x90>
 800a046:	9000      	str	r0, [sp, #0]
 800a048:	9101      	str	r1, [sp, #4]
 800a04a:	4a27      	ldr	r2, [pc, #156]	; (800a0e8 <ceil+0xf0>)
 800a04c:	4b27      	ldr	r3, [pc, #156]	; (800a0ec <ceil+0xf4>)
 800a04e:	9800      	ldr	r0, [sp, #0]
 800a050:	9901      	ldr	r1, [sp, #4]
 800a052:	f7f6 fb1d 	bl	8000690 <__aeabi_dadd>
 800a056:	2200      	movs	r2, #0
 800a058:	2300      	movs	r3, #0
 800a05a:	f7f6 fa07 	bl	800046c <__aeabi_dcmpgt>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d0e8      	beq.n	800a034 <ceil+0x3c>
 800a062:	2c00      	cmp	r4, #0
 800a064:	dd03      	ble.n	800a06e <ceil+0x76>
 800a066:	2380      	movs	r3, #128	; 0x80
 800a068:	035b      	lsls	r3, r3, #13
 800a06a:	4133      	asrs	r3, r6
 800a06c:	18e4      	adds	r4, r4, r3
 800a06e:	43bc      	bics	r4, r7
 800a070:	2500      	movs	r5, #0
 800a072:	e7df      	b.n	800a034 <ceil+0x3c>
 800a074:	2e33      	cmp	r6, #51	; 0x33
 800a076:	dd09      	ble.n	800a08c <ceil+0x94>
 800a078:	2380      	movs	r3, #128	; 0x80
 800a07a:	00db      	lsls	r3, r3, #3
 800a07c:	429e      	cmp	r6, r3
 800a07e:	d103      	bne.n	800a088 <ceil+0x90>
 800a080:	0002      	movs	r2, r0
 800a082:	000b      	movs	r3, r1
 800a084:	f7f6 fb04 	bl	8000690 <__aeabi_dadd>
 800a088:	b005      	add	sp, #20
 800a08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a08c:	2701      	movs	r7, #1
 800a08e:	4a1a      	ldr	r2, [pc, #104]	; (800a0f8 <ceil+0x100>)
 800a090:	427f      	negs	r7, r7
 800a092:	189b      	adds	r3, r3, r2
 800a094:	40df      	lsrs	r7, r3
 800a096:	4207      	tst	r7, r0
 800a098:	d0f6      	beq.n	800a088 <ceil+0x90>
 800a09a:	9000      	str	r0, [sp, #0]
 800a09c:	9101      	str	r1, [sp, #4]
 800a09e:	4a12      	ldr	r2, [pc, #72]	; (800a0e8 <ceil+0xf0>)
 800a0a0:	4b12      	ldr	r3, [pc, #72]	; (800a0ec <ceil+0xf4>)
 800a0a2:	9800      	ldr	r0, [sp, #0]
 800a0a4:	9901      	ldr	r1, [sp, #4]
 800a0a6:	f7f6 faf3 	bl	8000690 <__aeabi_dadd>
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f7f6 f9dd 	bl	800046c <__aeabi_dcmpgt>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d0be      	beq.n	800a034 <ceil+0x3c>
 800a0b6:	2c00      	cmp	r4, #0
 800a0b8:	dd02      	ble.n	800a0c0 <ceil+0xc8>
 800a0ba:	2e14      	cmp	r6, #20
 800a0bc:	d102      	bne.n	800a0c4 <ceil+0xcc>
 800a0be:	3401      	adds	r4, #1
 800a0c0:	43bd      	bics	r5, r7
 800a0c2:	e7b7      	b.n	800a034 <ceil+0x3c>
 800a0c4:	2334      	movs	r3, #52	; 0x34
 800a0c6:	1b9e      	subs	r6, r3, r6
 800a0c8:	3b33      	subs	r3, #51	; 0x33
 800a0ca:	40b3      	lsls	r3, r6
 800a0cc:	18ed      	adds	r5, r5, r3
 800a0ce:	9b03      	ldr	r3, [sp, #12]
 800a0d0:	429d      	cmp	r5, r3
 800a0d2:	419b      	sbcs	r3, r3
 800a0d4:	425b      	negs	r3, r3
 800a0d6:	18e4      	adds	r4, r4, r3
 800a0d8:	e7f2      	b.n	800a0c0 <ceil+0xc8>
 800a0da:	2480      	movs	r4, #128	; 0x80
 800a0dc:	2500      	movs	r5, #0
 800a0de:	0624      	lsls	r4, r4, #24
 800a0e0:	e7a8      	b.n	800a034 <ceil+0x3c>
 800a0e2:	46c0      	nop			; (mov r8, r8)
 800a0e4:	fffffc01 	.word	0xfffffc01
 800a0e8:	8800759c 	.word	0x8800759c
 800a0ec:	7e37e43c 	.word	0x7e37e43c
 800a0f0:	3ff00000 	.word	0x3ff00000
 800a0f4:	000fffff 	.word	0x000fffff
 800a0f8:	fffffbed 	.word	0xfffffbed

0800a0fc <floor>:
 800a0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0fe:	004b      	lsls	r3, r1, #1
 800a100:	4a39      	ldr	r2, [pc, #228]	; (800a1e8 <floor+0xec>)
 800a102:	0d5b      	lsrs	r3, r3, #21
 800a104:	b085      	sub	sp, #20
 800a106:	189e      	adds	r6, r3, r2
 800a108:	9003      	str	r0, [sp, #12]
 800a10a:	000c      	movs	r4, r1
 800a10c:	0005      	movs	r5, r0
 800a10e:	2e13      	cmp	r6, #19
 800a110:	dc34      	bgt.n	800a17c <floor+0x80>
 800a112:	2e00      	cmp	r6, #0
 800a114:	da15      	bge.n	800a142 <floor+0x46>
 800a116:	4a35      	ldr	r2, [pc, #212]	; (800a1ec <floor+0xf0>)
 800a118:	4b35      	ldr	r3, [pc, #212]	; (800a1f0 <floor+0xf4>)
 800a11a:	f7f6 fab9 	bl	8000690 <__aeabi_dadd>
 800a11e:	2200      	movs	r2, #0
 800a120:	2300      	movs	r3, #0
 800a122:	f7f6 f9a3 	bl	800046c <__aeabi_dcmpgt>
 800a126:	2800      	cmp	r0, #0
 800a128:	d008      	beq.n	800a13c <floor+0x40>
 800a12a:	2c00      	cmp	r4, #0
 800a12c:	da59      	bge.n	800a1e2 <floor+0xe6>
 800a12e:	0063      	lsls	r3, r4, #1
 800a130:	085b      	lsrs	r3, r3, #1
 800a132:	432b      	orrs	r3, r5
 800a134:	2500      	movs	r5, #0
 800a136:	42ab      	cmp	r3, r5
 800a138:	d000      	beq.n	800a13c <floor+0x40>
 800a13a:	4c2e      	ldr	r4, [pc, #184]	; (800a1f4 <floor+0xf8>)
 800a13c:	0028      	movs	r0, r5
 800a13e:	0021      	movs	r1, r4
 800a140:	e026      	b.n	800a190 <floor+0x94>
 800a142:	4f2d      	ldr	r7, [pc, #180]	; (800a1f8 <floor+0xfc>)
 800a144:	4137      	asrs	r7, r6
 800a146:	003b      	movs	r3, r7
 800a148:	400b      	ands	r3, r1
 800a14a:	4303      	orrs	r3, r0
 800a14c:	d020      	beq.n	800a190 <floor+0x94>
 800a14e:	9000      	str	r0, [sp, #0]
 800a150:	9101      	str	r1, [sp, #4]
 800a152:	4a26      	ldr	r2, [pc, #152]	; (800a1ec <floor+0xf0>)
 800a154:	4b26      	ldr	r3, [pc, #152]	; (800a1f0 <floor+0xf4>)
 800a156:	9800      	ldr	r0, [sp, #0]
 800a158:	9901      	ldr	r1, [sp, #4]
 800a15a:	f7f6 fa99 	bl	8000690 <__aeabi_dadd>
 800a15e:	2200      	movs	r2, #0
 800a160:	2300      	movs	r3, #0
 800a162:	f7f6 f983 	bl	800046c <__aeabi_dcmpgt>
 800a166:	2800      	cmp	r0, #0
 800a168:	d0e8      	beq.n	800a13c <floor+0x40>
 800a16a:	2c00      	cmp	r4, #0
 800a16c:	da03      	bge.n	800a176 <floor+0x7a>
 800a16e:	2380      	movs	r3, #128	; 0x80
 800a170:	035b      	lsls	r3, r3, #13
 800a172:	4133      	asrs	r3, r6
 800a174:	18e4      	adds	r4, r4, r3
 800a176:	43bc      	bics	r4, r7
 800a178:	2500      	movs	r5, #0
 800a17a:	e7df      	b.n	800a13c <floor+0x40>
 800a17c:	2e33      	cmp	r6, #51	; 0x33
 800a17e:	dd09      	ble.n	800a194 <floor+0x98>
 800a180:	2380      	movs	r3, #128	; 0x80
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	429e      	cmp	r6, r3
 800a186:	d103      	bne.n	800a190 <floor+0x94>
 800a188:	0002      	movs	r2, r0
 800a18a:	000b      	movs	r3, r1
 800a18c:	f7f6 fa80 	bl	8000690 <__aeabi_dadd>
 800a190:	b005      	add	sp, #20
 800a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a194:	2701      	movs	r7, #1
 800a196:	4a19      	ldr	r2, [pc, #100]	; (800a1fc <floor+0x100>)
 800a198:	427f      	negs	r7, r7
 800a19a:	189b      	adds	r3, r3, r2
 800a19c:	40df      	lsrs	r7, r3
 800a19e:	4207      	tst	r7, r0
 800a1a0:	d0f6      	beq.n	800a190 <floor+0x94>
 800a1a2:	9000      	str	r0, [sp, #0]
 800a1a4:	9101      	str	r1, [sp, #4]
 800a1a6:	4a11      	ldr	r2, [pc, #68]	; (800a1ec <floor+0xf0>)
 800a1a8:	4b11      	ldr	r3, [pc, #68]	; (800a1f0 <floor+0xf4>)
 800a1aa:	9800      	ldr	r0, [sp, #0]
 800a1ac:	9901      	ldr	r1, [sp, #4]
 800a1ae:	f7f6 fa6f 	bl	8000690 <__aeabi_dadd>
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f7f6 f959 	bl	800046c <__aeabi_dcmpgt>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d0be      	beq.n	800a13c <floor+0x40>
 800a1be:	2c00      	cmp	r4, #0
 800a1c0:	da02      	bge.n	800a1c8 <floor+0xcc>
 800a1c2:	2e14      	cmp	r6, #20
 800a1c4:	d102      	bne.n	800a1cc <floor+0xd0>
 800a1c6:	3401      	adds	r4, #1
 800a1c8:	43bd      	bics	r5, r7
 800a1ca:	e7b7      	b.n	800a13c <floor+0x40>
 800a1cc:	2334      	movs	r3, #52	; 0x34
 800a1ce:	1b9e      	subs	r6, r3, r6
 800a1d0:	3b33      	subs	r3, #51	; 0x33
 800a1d2:	40b3      	lsls	r3, r6
 800a1d4:	18ed      	adds	r5, r5, r3
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	429d      	cmp	r5, r3
 800a1da:	419b      	sbcs	r3, r3
 800a1dc:	425b      	negs	r3, r3
 800a1de:	18e4      	adds	r4, r4, r3
 800a1e0:	e7f2      	b.n	800a1c8 <floor+0xcc>
 800a1e2:	2500      	movs	r5, #0
 800a1e4:	002c      	movs	r4, r5
 800a1e6:	e7a9      	b.n	800a13c <floor+0x40>
 800a1e8:	fffffc01 	.word	0xfffffc01
 800a1ec:	8800759c 	.word	0x8800759c
 800a1f0:	7e37e43c 	.word	0x7e37e43c
 800a1f4:	bff00000 	.word	0xbff00000
 800a1f8:	000fffff 	.word	0x000fffff
 800a1fc:	fffffbed 	.word	0xfffffbed

0800a200 <round>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	004a      	lsls	r2, r1, #1
 800a204:	4d1d      	ldr	r5, [pc, #116]	; (800a27c <round+0x7c>)
 800a206:	0d52      	lsrs	r2, r2, #21
 800a208:	1955      	adds	r5, r2, r5
 800a20a:	000e      	movs	r6, r1
 800a20c:	2d13      	cmp	r5, #19
 800a20e:	dc18      	bgt.n	800a242 <round+0x42>
 800a210:	2d00      	cmp	r5, #0
 800a212:	da09      	bge.n	800a228 <round+0x28>
 800a214:	0fcb      	lsrs	r3, r1, #31
 800a216:	07db      	lsls	r3, r3, #31
 800a218:	2200      	movs	r2, #0
 800a21a:	1c69      	adds	r1, r5, #1
 800a21c:	d101      	bne.n	800a222 <round+0x22>
 800a21e:	4918      	ldr	r1, [pc, #96]	; (800a280 <round+0x80>)
 800a220:	430b      	orrs	r3, r1
 800a222:	0019      	movs	r1, r3
 800a224:	0010      	movs	r0, r2
 800a226:	e016      	b.n	800a256 <round+0x56>
 800a228:	4a16      	ldr	r2, [pc, #88]	; (800a284 <round+0x84>)
 800a22a:	412a      	asrs	r2, r5
 800a22c:	420a      	tst	r2, r1
 800a22e:	d101      	bne.n	800a234 <round+0x34>
 800a230:	2800      	cmp	r0, #0
 800a232:	d010      	beq.n	800a256 <round+0x56>
 800a234:	2380      	movs	r3, #128	; 0x80
 800a236:	031b      	lsls	r3, r3, #12
 800a238:	412b      	asrs	r3, r5
 800a23a:	199b      	adds	r3, r3, r6
 800a23c:	4393      	bics	r3, r2
 800a23e:	2200      	movs	r2, #0
 800a240:	e7ef      	b.n	800a222 <round+0x22>
 800a242:	2d33      	cmp	r5, #51	; 0x33
 800a244:	dd08      	ble.n	800a258 <round+0x58>
 800a246:	2380      	movs	r3, #128	; 0x80
 800a248:	00db      	lsls	r3, r3, #3
 800a24a:	429d      	cmp	r5, r3
 800a24c:	d103      	bne.n	800a256 <round+0x56>
 800a24e:	0002      	movs	r2, r0
 800a250:	000b      	movs	r3, r1
 800a252:	f7f6 fa1d 	bl	8000690 <__aeabi_dadd>
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	4e0b      	ldr	r6, [pc, #44]	; (800a288 <round+0x88>)
 800a25a:	1992      	adds	r2, r2, r6
 800a25c:	2601      	movs	r6, #1
 800a25e:	4276      	negs	r6, r6
 800a260:	40d6      	lsrs	r6, r2
 800a262:	4206      	tst	r6, r0
 800a264:	d0f7      	beq.n	800a256 <round+0x56>
 800a266:	2233      	movs	r2, #51	; 0x33
 800a268:	1b55      	subs	r5, r2, r5
 800a26a:	3a32      	subs	r2, #50	; 0x32
 800a26c:	40aa      	lsls	r2, r5
 800a26e:	1812      	adds	r2, r2, r0
 800a270:	4282      	cmp	r2, r0
 800a272:	41a4      	sbcs	r4, r4
 800a274:	4264      	negs	r4, r4
 800a276:	190b      	adds	r3, r1, r4
 800a278:	43b2      	bics	r2, r6
 800a27a:	e7d2      	b.n	800a222 <round+0x22>
 800a27c:	fffffc01 	.word	0xfffffc01
 800a280:	3ff00000 	.word	0x3ff00000
 800a284:	000fffff 	.word	0x000fffff
 800a288:	fffffbed 	.word	0xfffffbed

0800a28c <_sbrk>:
 800a28c:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <_sbrk+0x18>)
 800a28e:	0002      	movs	r2, r0
 800a290:	6819      	ldr	r1, [r3, #0]
 800a292:	2900      	cmp	r1, #0
 800a294:	d101      	bne.n	800a29a <_sbrk+0xe>
 800a296:	4904      	ldr	r1, [pc, #16]	; (800a2a8 <_sbrk+0x1c>)
 800a298:	6019      	str	r1, [r3, #0]
 800a29a:	6818      	ldr	r0, [r3, #0]
 800a29c:	1882      	adds	r2, r0, r2
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	4770      	bx	lr
 800a2a2:	46c0      	nop			; (mov r8, r8)
 800a2a4:	200006d8 	.word	0x200006d8
 800a2a8:	20000850 	.word	0x20000850

0800a2ac <_init>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	46c0      	nop			; (mov r8, r8)
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr

0800a2b8 <_fini>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr
